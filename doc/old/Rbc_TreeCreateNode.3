'\"
'\" Copyright 1991-1998 by Bell Labs Innovations for Lucent Technologies.
'\"
'\" Permission to use, copy, modify, and distribute this software and its
'\" documentation for any purpose and without fee is hereby granted, provided
'\" that the above copyright notice appear in all copies and that both that the
'\" copyright notice and warranty disclaimer appear in supporting documentation,
'\" and that the names of Lucent Technologies any of their entities not be used
'\" in advertising or publicity pertaining to distribution of the software
'\" without specific, written prior permission.
'\"
'\" Lucent Technologies disclaims all warranties with regard to this software,
'\" including all implied warranties of merchantability and fitness.  In no event
'\" shall Lucent Technologies be liable for any special, indirect or
'\" consequential damages or any damages whatsoever resulting from loss of use,
'\" data or profits, whether in an action of contract, negligence or other
'\" tortuous action, arising out of or in connection with the use or performance
'\" of this software.  
'\"
'\"
.so man.macros
.TH Rbc_TreeCreateNode 3 RBC_VERSION RBC "RBC Library Procedures"
.BS
.SH NAME
Rbc_TreeCreateNode \- Creates a node in a tree data object.
.SH SYNOPSIS
.nf
#include <rbcTree.h>
.sp
Rbc_TreeNode
\fBRbc_TreeCreateNode\fR(\fItree\fR, \fIparent\fR, \fIname\fR, \fIposition\fR)
.SH ARGUMENTS
.AS Rbc_TreeNode parent
.AP Rbc_Tree tree in
Tree containing the parent node.
.AP Rbc_TreeNode parent in
Node in which to insert the new child.
.AP "const char" *name  in
Node label.  If NULL, a label will automatically be generated.
.AP int position in
Position in the parent's list of children to insert the new node.
.BE
.SH DESCRIPTION
.PP
This procedure creates a new node is a tree data object.  The node
is initially empty, but data values can be added with
\fBRbc_TreeSetValue\fR.  Each node has a serial number that identifies it
within the tree.  No two nodes in the same tree will ever have the
same ID.  You can find a node's ID with \fBRbc_TreeNodeId\fR.
.PP
The arguments are as follows:
.TP 1i
\fItree\fR
The tree containing the parent node.
.TP 
\fIparent\fR
Node in which the new child will be inserted. 
.TP 
\fIname\fR
Label of the new node.  If \fIname\fR is NULL, a label in the
form "\f(CWnode0\fR", "\f(CWnode1\fR", etc. will automatically be
generated.  \fIName\fR can be any string.  Labels are non-unique.  A
parent can contain two nodes with the same label. Nodes can be
relabeled using \fBRbc_TreeRelabelNode\fR.
.TP 
\fIposition\fR
Position the parent's list of children to insert the new node.  For
example, if \fIposition\fR is 0, then the new node is prepended to the
beginning of the list.  If \fIposition\fR is -1, then the node is
appended onto the end of the parent's list.  
.PP
.SH RETURNS
The new node returned is of type \fBRbc_TreeNode\fR.  It's a token
that can be used with other routines to add/delete data values or
children nodes.
.SH EXAMPLE
The following example creates a new node from the root node.
.CS
Rbc_Tree token;
Rbc_TreeNode root, node;

if (Rbc_TreeGetToken(interp, "myTree", &token) != TCL_OK) {
    return TCL_ERROR;
}
root = Rbc_TreeRootNode(token);
node = Rbc_TreeCreateNode(token, root, "myNode", -1);
.CE
.SH NOTIFICATIONS
\fBRbc_TreeCreateNode\fR can trigger tree notify events.
You can be notified whenever a node is created by using the 
\fBRbc_TreeCreateNotifyHandler\fR.  A callback routine is registered
that will be automatically invoked whenever a new node is added
via \fBRbc_TreeCreateNode\fR to the tree.
.SH KEYWORDS
tree, token
