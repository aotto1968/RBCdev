.\" Automatically generated by Pandoc 1.17.1
.\"
.ad l
.TH "table" "n" "" "RBC(0.2)" "RBC Built-In Commands"
.hy
.SH NAME
.PP
table \- Arranges widgets in a table
.SH SYNOPSIS
.PP
\f[B]table\f[] \f[I]container\f[] ?\f[I]widget\f[] \f[I]index\f[]
\f[I]option\f[] \f[I]value\f[]?...
.PP
\f[B]table arrange\f[] \f[I]container\f[]
.PP
\f[B]table cget\f[] \f[I]container\f[] ?\f[I]item\f[]?
\f[I]option\f[]
.PP
\f[B]table configure\f[] \f[I]container\f[] ?\f[I]item\f[]?...
?\f[I]option\f[] \f[I]value\f[]?...
.PP
\f[B]table extents\f[] \f[I]container\f[] \f[I]item\f[]
.PP
\f[B]table forget\f[] \f[I]widget\f[] ?\f[I]widget\f[]?...
.PP
\f[B]table info\f[] \f[I]container\f[] \f[I]item\f[]
.PP
\f[B]table locate\f[] \f[I]container\f[] \f[I]x\f[] \f[I]y\f[]
.PP
\f[B]table containers\f[] ?\f[I]switch\f[]?
?\f[I]arg\f[]?
.PP
\f[B]table save\f[] \f[I]container\f[]
.PP
\f[B]table search\f[] \f[I]container\f[] ?\f[I]switch\f[]
\f[I]arg\f[]?...
.SH DESCRIPTION
.PP
The \f[B]table\f[] command arranges widgets in a table.
The alignment of widgets is detemined by their row and column positions
and the number of rows or columns that they span.
.SH INTRODUCTION
.PP
Probably the most painstaking aspect of building a graphical application
is getting the placement and size of the widgets just right.
It usually takes many iterations to align widgets and adjust their
spacing.
That\[aq]s because managing the geometry of widgets is simply not a
packing problem, but also graphical design problem.
Attributes such as alignment, symmetry, and balance are more important
than minimizing the amount of space used for packing.
.PP
The \f[B]table\f[] geometry manager arranges widgets in a table.
It\[aq]s easy to align widgets (horizontally and vertically) or to
create empty space to balance the arrangement of the widgets.
Widgets (called \f[I]slaves\f[] in the Tk parlance) are arranged inside
a containing widget (called the \f[I]master\f[]).
Widgets are positioned at row,column locations and may span any number
of rows or columns.
More than one widget can occupy a single location.
.PP
The placement of widget windows determines both the size and arrangement
of the table.
The table queries the requested size of each widget.
The \f[I]requested\f[] \f[I]size\f[] of a widget is the natural size of
the widget (before the widget is shrunk or expanded).
The height of each row and the width of each column is the largest
widget spanning that row or column.
The size of the table is in turn the sum of the row and column sizes.
This is the table\[aq]s \f[I]normal\f[] \f[I]size\f[].
.PP
The total number of rows and columns in a table is determined from the
indices specified.
The table grows dynamically as windows are added at larger indices.
.SH EXAMPLE
.PP
The table geometry manager is created by invoking the \f[B]table\f[]
command.
.IP
.nf
\f[C]
#\ Create\ a\ table\ in\ the\ root\ window
table\ .
\f[]
.fi
.PP
The window .
is now the \f[I]container\f[] of the table.
Widgets are packed into the table and displayed within the confines of
the container.
.PP
You add widgets to the table by row and column location.
Row and column indices start from zero.
.IP
.nf
\f[C]
label\ .title\ \-text\ "This\ is\ a\ title"

#\ Add\ a\ label\ to\ the\ table
table\ .\ .title\ 0,0
\f[]
.fi
.PP
The label .title is added to the table.
We can add more widgets in the same way.
.IP
.nf
\f[C]
button\ .ok\ \-text\ "Ok"
button\ .cancel\ \-text\ "Cancel"

#\ Add\ two\ buttons
table\ .\ .ok\ 1,0
table\ .\ .cancel\ 1,1
\f[]
.fi
.PP
Two buttons .ok and .cancel are now packed into the second row of the
table.
They each occupy one cell of the table.
By default, widgets span only a single row and column.
.PP
The first column contains two widgets, .title and .ok.
By default, the widest of the two widgets will define the width of the
column.
However, we want .title to be centered horizontally along the top of the
table.
We can make .title span two columns using the \f[B]configure\f[]
operation.
.IP
.nf
\f[C]
#\ Make\ the\ label\ span\ both\ columns
table\ configure\ .\ .title\ \-cspan\ 2
\f[]
.fi
.PP
The label .title will now be centered along the top row of the table.
.PP
In the above example, we\[aq]ve create and arranged the layout for the
table invoking the \f[B]table\f[] command several times.
Alternately, we could have used a single \f[B]table\f[] command.
.IP
.nf
\f[C]
label\ .title\ \-text\ "This\ is\ a\ title"
button\ .ok\ \-text\ "Ok"
button\ .cancel\ \-text\ "Cancel"

#\ Create\ and\ pack\ the\ table
table\ .\ \\
\ \ \ \ .title\ \ 0,0\ \-cspan\ 2\ \\
\ \ \ \ .ok\ \ \ \ \ 1,0\ \\
\ \ \ \ .cancel\ 1,1
\f[]
.fi
.PP
The table will override the requested width and height of the container
so that the window fits the table exactly.
This also means that any change to the size of table will be propagated
up through the Tk window hierarchy.
This feature can be turned off using the \f[B]configure\f[] operation
again.
.IP
.nf
\f[C]
table\ configure\ .\ \-propagate\ no
\f[]
.fi
.PP
You can also set the width of height of the table to a specific value.
This supersedes the calculated table size.
.IP
.nf
\f[C]
#\ Make\ the\ container\ 4\ inches\ wide,\ 3\ inches\ high
table\ configure\ .\ \-reqwidth\ 4i\ \-reqheight\ 3i
\f[]
.fi
.PP
If a widget is smaller than the cell(s) it occupies, the widget will
float within the extra space.
By default, the widget will be centered within the space, but you can
anchor the widget to any side of cell using the \f[B]\-anchor\f[]
configuration option.
.IP
.nf
\f[C]
table\ configure\ .\ .ok\ \-anchor\ w
\f[]
.fi
.PP
The \f[B]\-fill\f[] option expands the widget to fill the extra space
either vertically or horizontally (or both).
.IP
.nf
\f[C]
#\ Make\ the\ title\ label\ fill\ the\ entire\ top\ row
table\ configure\ .\ .title\ \-cspan\ 2\ \-fill\ x

#\ Each\ button\ will\ be\ as\ height\ of\ the\ 2nd\ row.
table\ configure\ .\ .ok\ .cancel\ \-fill\ y
\f[]
.fi
.PP
The width of .title will be the combined widths of both columns.
Both .ok and .cancel will become as tall as the second row.
.PP
The \f[B]\-padx\f[] and \f[B]\-pady\f[] options control the amount of
padding around the widget.
Both options take a list of one or two values.
.IP
.nf
\f[C]
#\ Pad\ the\ title\ by\ two\ pixels\ above\ and\ below.
table\ configure\ .\ .title\ \-pady\ 2

#\ Pad\ each\ button\ 2\ pixels\ on\ the\ left,\ and\ 4\ on\ the\ right.
table\ configure\ .\ .ok\ .cancel\ \-padx\ {\ 2\ 4\ }
\f[]
.fi
.PP
If the list has only one value, then both exterior sides (top and bottom
or left and right) of the widget are padded by that amount.
If the list has two elements, the first specifies padding for the top or
left side and the second for the bottom or right side.
.PP
Like the container, you can also override the requested widths and
heights of widgets using the \f[B]\-reqwidth\f[] and
\f[B]\-reqheight\f[] options.
This is especially useful with character\-based widgets (such as
buttons, labels, text, listbox, etc) that let you specify their size
only in units of characters and lines, instead of pixels.
.IP
.nf
\f[C]
#\ Make\ all\ buttons\ one\ inch\ wide
table\ configure\ .\ .ok\ .cancel\ \-reqwidth\ 1i
\f[]
.fi
.PP
Each row and column of the table can be configured, again using the
\f[B]configure\f[] operation.
Rows are and columns are designated by R\f[I]i\f[] and C\f[I]i\f[]
respectively, where \f[I]i\f[] is the index of the row or column.
.PP
For example, you can set the size of a row or column.
.IP
.nf
\f[C]
#\ Make\ the\ 1st\ column\ 2\ inches\ wide
table\ configure\ .\ c0\ \-width\ 2.0i

#\ Make\ the\ 2nd\ row\ 1/2\ inch\ high.
table\ configure\ .\ r1\ \-height\ 0.5i
\f[]
.fi
.PP
The new size for the row or column overrides its calculated size.
If no widgets span the row or column, its height or width is zero.
So you can use the \f[B]\-width\f[] and \f[B]\-height\f[] options to
create empty spaces in the table.
.IP
.nf
\f[C]
#\ Create\ an\ empty\ row\ and\ column
table\ configure\ .\ r2\ c2\ \-width\ 1i
\f[]
.fi
.PP
The \f[B]\-pady\f[] option lets you add padding to the top and bottom
sides of rows.
The \f[B]\-padx\f[] option adds padding to the left and right sides of
columns.
Both options take a list of one or two values.
.IP
.nf
\f[C]
#\ Pad\ above\ the\ title\ by\ two\ pixels
table\ configure\ .\ r0\ \-pady\ {\ 2\ 0\ }

#\ Pad\ each\ column\ 4\ pixels\ on\ the\ left,\ and\ 2\ on\ the\ right.
table\ configure\ .\ c*\ \-padx\ {\ 2\ 4\ }
\f[]
.fi
.PP
Notice that you can configure all the rows and columns using either R*
or C*.
.PP
When the container is resized, the rows and columns of the table are
also resized.
Only the rows or columns that contain widgets (a widget spans the row or
column) grow or shrink.
The \f[B]\-resize\f[] option indicates whether the row or column can be
shrunk or stretched.
If the value is shrink, the row or column can only be resized smaller.
If expand, it can only be resized larger.
If none, the row or column is frozen at its requested size.
.IP
.nf
\f[C]
#\ Let\ the\ 1st\ column\ get\ smaller,\ but\ not\ bigger
table\ configure\ .\ c0\ \-resize\ shrink

#\ Let\ the\ 2nd\ column\ get\ bigger,\ not\ smaller
table\ configure\ .\ c1\ \-resize\ expand

#\ Don\[aq]t\ resize\ the\ first\ row
table\ configure\ .\ r0\ \-resize\ none
\f[]
.fi
.PP
The following example packs a canvas, two scrollbars, and a title.
The rows and columns containing the scrollbars are frozen at their
requested size, so that even if the frame is resized, the scrollbars
will remain the same width.
.IP
.nf
\f[C]
table\ .\ \\
\ \ \ \ .title\ \ \ 0,0\ \-cspan\ 3\ \\
\ \ \ \ .canvas\ \ 1,1\ \-fill\ both\ \\
\ \ \ \ .vscroll\ 1,2\ \-fill\ y\ \\
\ \ \ \ .hscroll\ 2,1\ \-fill\ x

#\ Don\[aq]t\ let\ the\ scrollbars\ resize
table\ configure\ .\ c2\ r2\ \-resize\ none

#\ Create\ an\ empty\ space\ to\ balance\ the\ scrollbar
table\ configure\ .\ c0\ \-width\ .vscroll
\f[]
.fi
.PP
Note that the value of the \f[B]\-width\f[] option is the name of a
widget window.
This indicates that the width of the column should be the same as the
requested width of .vscroll.
.PP
Finally, the \f[B]forget\f[] operation removes widgets from the table.
.IP
.nf
\f[C]
#\ Remove\ the\ windows\ from\ the\ table
table\ forget\ .quit\ .frame
\f[]
.fi
.PP
It\[aq]s not necessary to specify the container.
The \f[B]table\f[] command determines the container from the widget
name.
.SH OPERATIONS
.PP
The following operations are available for the \f[B]table\f[]:
.TP
.B \f[B]table\f[] \f[I]container\f[] ?\f[I]widget\f[] \f[I]index\f[] \f[I]option\f[] \f[I]value\f[]?...
Adds the widget \f[I]widget\f[] to the table at \f[I]index\f[].
\f[I]Index\f[] is a row,column position in the table.
It must be in the form \f[I]row\f[],\f[I]column\f[] where \f[I]row\f[]
and \f[I]column\f[] are the respective row and column numbers, starting
from zero (0,0 is the upper leftmost position).
\f[I]Row\f[] and \f[I]column\f[] may also be numeric expressions that
are recursively evaluated.
If a table doesn\[aq]t exist for \f[I]container\f[], one is created.
\f[I]Widget\f[] is the path name of the window, that must already exist,
to be arranged inside of \f[I]container\f[].
\f[I]Option\f[] and \f[I]value\f[] are described in the \f[B]WIDGET
OPTIONS\f[] section.
.RS
.RE
.TP
.B \f[B]table arrange\f[] \f[I]container\f[]
Forces the table to compute its layout immediately.
Normally, the table geometry manager will wait until the next idle
point, before calculating the size of its rows and columns.
This is useful for collecting the \f[I]normal\f[] sizes of rows and
columns, that are based upon the requested widget sizes.
.RS
.RE
.TP
.B \f[B]table cget\f[] \f[I]container\f[] ?\f[I]item\f[]? \f[I]option\f[]
Returns the current value of the configuration option specific to
\f[I]item\f[] given by \f[I]option\f[].
\f[I]Item\f[] is either a row or column index, or the path name of a
widget.
\f[I]Item\f[] can be in any form describe in the \f[B]configure\f[]
operation below.
If no \f[I]item\f[] argument is provided, then the configuration option
is for the table itself.
\f[I]Option\f[] may be any one of the options described in the
appropiate section for \f[I]item\f[].
.RS
.RE
.TP
.B \f[B]table configure\f[] \f[I]container\f[] \f[I]item\f[]... ?\f[I]option\f[] \f[I]value\f[]?...
Queries or modifies the configuration options specific to \f[I]item\f[].
If no \f[I]option\f[] is specified, this command returns a list
describing all of the available options for \f[I]item\f[] If the
argument \f[I]item\f[] is omitted, then the specified configuration
options are for the table itself.
Otherwise \f[I]item\f[] must be either a row or column specification, or
the path name of a widget.
The following \f[I]item\f[] types are available.
.RS
.TP
.B C\f[I]i\f[]
Specifies the column of \f[I]container\f[] to be configured.
\f[I]Item\f[] must be in the form C\f[I]n\f[], where \f[I]i\f[] is the
index of the column.
See the \f[B]COLUMN OPTIONS\f[] section.
.RS
.RE
.TP
.B R\f[I]i\f[]
Specifies the row of \f[I]container\f[] to be configured.
\f[I]Item\f[] must be in the form R\f[I]i\f[], where \f[I]i\f[] is the
index of the row.
See the \f[B]ROW OPTIONS\f[] section.
.RS
.RE
.TP
.B \f[I]widget\f[]
Specifies a widget of \f[I]container\f[] to be queried.
\f[I]Widget\f[] is the path name of a widget packed in
\f[I]container\f[].
See the \f[B]WIDGET OPTIONS\f[] section.
.RS
.RE
.TP
.B No argument
Specifies that the table itself is to be queried.
See the \f[B]TABLE OPTIONS\f[] section for a description of the
option\-value pairs for the table.
.RS
.RE
.PP
The \f[I]option\f[] \f[I]and\f[] \f[I]value\f[] pairs are specific to
\f[I]item\f[].
If \f[I]option\f[] is specified with no \f[I]value\f[], then the command
returns a list describing the one named option (this list will be
identical to the corresponding sublist of the value returned if no
\f[I]option\f[] is specified).
If one or more \f[I]option\-value\f[] pairs are specified, then the
command modifies the given option(s) to have the given value(s); in this
case the command returns the empty string.
.RE
.TP
.B \f[B]table extents\f[] \f[I]container\f[] \f[I]index\f[]
Queries the location and dimensions of row and columns in the table.
\f[I]Index\f[] can be either a row or column index or a table index.
Returns a list of the x,y coordinates (upperleft corner) and dimensions
(width and height) of the cell, row, or column.
.RS
.RE
.TP
.B \f[B]table forget\f[] \f[I]widget\f[] ?\f[I]widget\f[]?...
Requests that \f[I]widget\f[] no longer have its geometry managed.
\f[I]Widget\f[] is the pathname of the window currently managed by some
table.
The window will be unmapped so that it no longer appears on the screen.
If \f[I]widget\f[] is not currently managed by any table, an error
message is returned, otherwise the empty string.
.RS
.RE
.TP
.B \f[B]table info\f[] \f[I]container\f[] \f[I]item\f[]
Returns a list of the current configuration options for \f[I]item\f[].
The list returned is exactly in the form that might be specified to the
\f[B]table\f[] command.
It can be used to save and reset table configurations.
\f[I]Item\f[] must be one of the following.
.RS
.TP
.B C\f[I]i\f[]
Specifies the column of \f[I]container\f[] to be queried.
\f[I]Item\f[] must be in the form C\f[I]n\f[], where \f[I]n\f[] is the
index of the column.
.RS
.RE
.TP
.B R\f[I]i\f[]
Specifies the row of \f[I]container\f[] to be queried.
\f[I]Item\f[] must be in the form R\f[I]i\f[], where \f[I]i\f[] is the
index of the row.
.RS
.RE
.TP
.B \f[I]widget\f[]
Specifies a widget of \f[I]container\f[] to be queried.
\f[I]Widget\f[] is the path name of a widget packed in
\f[I]container\f[].
.RS
.RE
.TP
.B No argument
Specifies that the table itself is to be queried.
.RS
.RE
.RE
.TP
.B \f[B]table locate\f[] \f[I]container\f[] \f[I]x\f[] \f[I]y\f[]
Returns the table index (row,column) of the cell containing the given
screen coordinates.
The \f[I]x\f[] and \f[I]y\f[] arguments represent the x and y
coordinates of the sample point to be tested.
.RS
.RE
.TP
.B \f[B]table containers\f[] ?\f[I]switch\f[] \f[I]arg\f[]?
Returns a list of all container windows matching a given criteria (using
\f[I]switch\f[] and \f[I]arg\f[]).
If no \f[I]switch\f[] and \f[I]arg\f[] arguments are given, the names of
all container windows (only those using the \f[B]table\f[] command) are
returned.
The following are valid switches:
.RS
.TP
.B \-pattern \f[I]pattern\f[]
Returns a list of pathnames of all container windows matching
\f[I]pattern\f[].
.RS
.RE
.TP
.B \-slave \f[I]window\f[]
Returns the name of the container window of table managing
\f[I]window\f[].
\f[I]Window\f[] must be the path name of widget.
If \f[I]window\f[] is not managed by any table, the empty string is
returned.
.RS
.RE
.RE
.TP
.B \f[B]table search\f[] \f[I]container\f[] ?\f[I]switch\f[] \f[I]arg\f[]?...
Returns the names of all the widgets in \f[I]container\f[] matching the
criteria given by \f[I]switch\f[] and \f[I]arg\f[].
\f[I]Container\f[] is name of the container window associated with the
table to be searched.
The name of the widget is returned if any one
\f[I]switch\f[]\-\f[I]arg\f[] criteria matches.
If no \f[I]switch\f[]\-\f[I]arg\f[] arguments are given, the names of
all widgets managed by \f[I]container\f[] are returned.
The following are switches are available:
.RS
.TP
.B \-pattern \f[I]pattern\f[]
Returns the names of any names of the widgets matching \f[I]pattern\f[].
.RS
.RE
.TP
.B \-span \f[I]index\f[]
Returns the names of widgets that span \f[I]index\f[].
A widget does not need to start at \f[I]index\f[] to be included.
\f[I]Index\f[] must be in the form \f[I]row\f[],\f[I]column\f[], where
\f[I]row\f[] and \f[I]column\f[] are valid row and column numbers.
.RS
.RE
.TP
.B \-start \f[I]index\f[]
Returns the names of widgets that start at \f[I]index\f[].
\f[I]Index\f[] must be in the form \f[I]row\f[],\f[I]column\f[], where
\f[I]row\f[] and \f[I]column\f[] are valid row and column numbers.
.RS
.RE
.RE
.SH TABLE OPTIONS
.PP
To configure the table itself, you omit the \f[I]item\f[] argument when
invoking the \f[B]configure\f[] operation.
.IP
.nf
\f[C]
table\ configure\ container\ ?option\ value?...
\f[]
.fi
.PP
The following options are available for the table:
.TP
.B \-padx \f[I]pad\f[]
Sets how much padding to add to the left and right exteriors of the
table.
\f[I]Pad\f[] can be a list of one or two numbers.
If \f[I]pad\f[] has two elements, the left side of the table is padded
by the first value and the right side by the second value.
If \f[I]pad\f[] has just one value, both the left and right sides are
padded evenly by the value.
The default is 0.
.RS
.RE
.TP
.B \-pady \f[I]pad\f[]
Sets how much padding to add to the top and bottom exteriors of the
table.
\f[I]Pad\f[] can be a list of one or two numbers.
If \f[I]pad\f[] has two elements, the area above the table is padded by
the first value and the area below by the second value.
If \f[I]pad\f[] is just one number, both the top and bottom areas are
padded by the value.
The default is 0.
.RS
.RE
.TP
.B \-propagate \f[I]boolean\f[]
Indicates if the table should override the requested width and height of
the \f[I]container\f[] window.
If \f[I]boolean\f[] is false, \f[I]container\f[] will not be resized.
\f[I]Container\f[] will be its requested size.
The default is 1.
.RS
.RE
.SH WIDGET OPTIONS
.PP
widgets are configured by specifying the name of the widget when
invoking the \f[B]configure\f[] operation.
\f[B]table configure\f[] \f[I]container\f[] \f[I]widget\f[]
?\f[I]option\f[] \f[I]value\f[]?...
\f[I]Widget\f[] must be the path name of a window already packed in the
table associated with \f[I]container\f[].
The following options are available for widgets:
.TP
.B \-anchor \f[I]anchor\f[]
Anchors \f[I]widget\f[] to a particular edge of the cell(s) it resides.
This option has effect only if the space of the spans surrounding
\f[I]widget\f[] is larger than \f[I]widget\f[].
\f[I]Anchor\f[] specifies how \f[I]widget\f[] will be positioned in the
space.
For example, if \f[I]anchor\f[] is center then the window is centered in
the rows and columns it spans; if \f[I]anchor\f[] is w then the window
will be aligned with the leftmost edge of the span.
The default is center.
.RS
.RE
.TP
.B \-columnspan \f[I]number\f[]
Sets the number of columns \f[I]widget\f[] will span.
The default is 1.
.RS
.RE
.TP
.B \-columncontrol \f[I]control\f[]
Specifies how the width of \f[I]widget\f[] should control the width of
the columns it spans.
\f[I]Control\f[] is either normal, none, or full.
The default is normal.
.RS
.TP
.B none
The width of \f[I]widget\f[] is not considered.
.RS
.RE
.TP
.B full
Only the width of \f[I]widget\f[] will be considered when computing the
widths of the columns.
.RS
.RE
.TP
.B normal
Indicates that the widest widget spanning the column will determine the
width of the span.
.RS
.RE
.RE
.TP
.B \-fill \f[I]fill\f[]
Specifies if \f[I]widget\f[] should be stretched to fill any free space
in the span surrounding \f[I]widget\f[].
\f[I]Fill\f[] is either none, x, y, both.
The default is none.
.RS
.TP
.B x
The widget can grow horizontally.
.RS
.RE
.TP
.B y
The widget can grow vertically.
.RS
.RE
.TP
.B both
The widget can grow both vertically and horizontally.
.RS
.RE
.TP
.B none
The widget does not grow along with the span.
.RS
.RE
.RE
.TP
.B \-ipadx \f[I]pixels\f[]
Sets how much horizontal padding to add internally on the left and right
sides of \f[I]widget\f[].
\f[I]Pixels\f[] must be a valid screen distance like 2 or 0.3i.
The default is 0.
.RS
.RE
.TP
.B \-ipady \f[I]pixels\f[]
Sets how much vertical padding to add internally on the top and bottom
of \f[I]widget\f[].
\f[I]Pixels\f[] must be a valid screen distance like 2 or 0.3i.
The default is 0.
.RS
.RE
.TP
.B \-padx \f[I]pad\f[]
Sets how much padding to add to the left and right exteriors of
\f[I]widget\f[].
\f[I]Pad\f[] can be a list of one or two numbers.
If \f[I]pad\f[] has two elements, the left side of \f[I]widget\f[] is
padded by the first value and the right side by the second value.
If \f[I]pad\f[] has just one value, both the left and right sides are
padded evenly by the value.
The default is 0.
.RS
.RE
.TP
.B \-pady \f[I]pad\f[]
Sets how much padding to add to the top and bottom exteriors of
\f[I]widget\f[].
\f[I]Pad\f[] can be a list of one or two numbers.
If \f[I]pad\f[] has two elements, the area above \f[I]widget\f[] is
padded by the first value and the area below by the second value.
If \f[I]pad\f[] is just one number, both the top and bottom areas are
padded by the value.
The default is 0.
.RS
.RE
.TP
.B \-reqheight \f[I]height\f[]
Specifies the limits of the requested height for \f[I]widget\f[].
\f[I]Height\f[] is a list of bounding values.
See the \f[B]BOUNDING\f[] \f[B]SIZES\f[] section for a description of
this list.
By default, the height of \f[I]widget\f[] is its requested height with
its internal padding (see the \f[B]\-ipady\f[] option).
The bounds specified by \f[I]height\f[] either override the height
completely, or bound the height between two sizes.
The default is "".
.RS
.RE
.TP
.B \-reqwidth \f[I]width\f[]
Specifies the limits of the requested width for \f[I]widget\f[].
\f[I]Width\f[] is a list of bounding values.
See the \f[B]BOUNDING\f[] \f[B]SIZES\f[] section for a description of
this list.
By default, the width of \f[I]widget\f[] is its requested width with its
internal padding (set the \f[B]\-ipadx\f[] option).
The bounds specified by \f[I]width\f[] either override the width
completely, or bound the height between two sizes.
The default is "".
.RS
.RE
.TP
.B \-rowspan \f[I]number\f[]
Sets the number of rows \f[I]widget\f[] will span.
The default is 1.
.RS
.RE
.TP
.B \-rowcontrol \f[I]control\f[]
Specifies how the height of \f[I]widget\f[] should control the height of
the rows it spans.
\f[I]Control\f[] is either normal, none, or full.
The default is normal.
.RS
.TP
.B none
The height of \f[I]widget\f[] is not considered.
.RS
.RE
.TP
.B full
Only the height of \f[I]widget\f[] will be considered when computing the
heights of the rows.
.RS
.RE
.TP
.B normal
Indicates that the tallest widget spanning the row will determine the
height of the span.
.RS
.RE
.RE
.SH COLUMN OPTIONS
.PP
To configure a column in the table, specify the column index as
C\f[I]i\f[], where \f[I]i\f[] is the index of the column to be
configured.
\f[B]table configure\f[] \f[I]container\f[] \f[I]Ci\f[] ?\f[I]option\f[]
\f[I]value\f[]?...
If the index is specified as C*, then all columns of the table will be
configured.
The following options are available for table columns.
.TP
.B \-padx \f[I]pad\f[]
Sets the padding to the left and right of the column.
\f[I]Pad\f[] can be a list of one or two numbers.
If \f[I]pad\f[] has two elements, the left side of the column is padded
by the first value and the right side by the second value.
If \f[I]pad\f[] has just one value, both the left and right sides are
padded evenly by the value.
The default is 0.
.RS
.RE
.TP
.B \-resize \f[I]mode\f[]
Indicates that the column can expand or shrink from its requested width
when the table is resized.
\f[I]Mode\f[] must be one of the following: none, expand, shrink, or
both.
If \f[I]mode\f[] is expand the width of the column is expanded if there
is extra space in the container window.
If \f[I]mode\f[] is shrink its width may be reduced beyond its requested
width if there is not enough space in the container.
The default is none.
.RS
.RE
.TP
.B \-width \f[I]width\f[]
Specifies the limits within that the width of the column may expand or
shrink.
\f[I]Width\f[] is a list of bounding values.
See the section \f[B]BOUNDING SIZES\f[] for a description of this list.
By default there are no constraints.
.RS
.RE
.SH ROW OPTIONS
.PP
To configure a row in the table, specify the row index as R\f[I]i\f[],
where \f[I]i\f[] is the index of the row to be configured.
\f[B]table configure\f[] \f[I]container\f[] \f[I]Ri\f[] ?\f[I]option\f[]
\f[I]value\f[]?...
If the index is specified as R*, then all rows of the table will be
configured.
The following options are available for table rows.
.TP
.B \-height \f[I]height\f[]
Specifies the limits of the height that the row may expand or shrink to.
\f[I]Height\f[] is a list of bounding values.
See the section \f[B]BOUNDING SIZES\f[] for a description of this list.
By default there are no constraints.
.RS
.RE
.TP
.B \-pady \f[I]pad\f[]
Sets the padding above and below the row.
\f[I]Pad\f[] can be a list of one or two numbers.
If \f[I]pad\f[] has two elements, the area above the row is padded by
the first value and the area below by the second value.
If \f[I]pad\f[] is just one number, both the top and bottom areas are
padded by the value.
The default is 0.
.RS
.RE
.TP
.B \-resize \f[I]mode\f[]
Indicates that the row can expand or shrink from its requested height
when the table is resized.
\f[I]Mode\f[] must be one of the following: none, expand, shrink, or
both.
If \f[I]mode\f[] is expand the height of the row is expanded if there is
extra space in the container.
If \f[I]mode\f[] is shrink its height may be reduced beyond its
requested height if there is not enough space in the container.
The default is none.
.RS
.RE
.SH BOUNDING SIZES
.PP
Sometimes it\[aq]s more useful to limit resizes to an acceptable range,
than to fix the size to a particular value or disallow resizing
altogether.
Similar to the way the \f[B]wm\f[] command lets you specify a
\f[B]minsize\f[] and \f[B]maxsize\f[] for a toplevel window, you can
bound the sizes the container, a widget, row, or column may take.
The \f[B]\-width\f[], \f[B]\-height\f[], \f[B]\-reqwidth\f[], and
\f[B]\-reqheight\f[] options, take a list of one, two, or three values.
We can take a previous example and instead preventing resizing, bound
the size of the scrollbars between two values.
.IP
.nf
\f[C]
table\ .\ \\
\ \ \ \ .title\ \ \ 0,0\ \-cspan\ 3\ \\
\ \ \ \ .canvas\ \ 1,1\ \-fill\ both\ \\
\ \ \ \ .vscroll\ 1,2\ \-fill\ y\ \\
\ \ \ \ .hscroll\ 2,1\ \-fill\ x

#\ Bound\ the\ scrollbars\ between\ 1/8\ and\ 1/2\ inch
table\ configure\ .\ c2\ \-width\ {\ 0.125\ 0.5\ }
table\ configure\ .\ r2\ \-height\ {\ 0.125\ 0.5\ }
table\ configure\ .\ vscroll\ .hscroll\ \-fill\ both
\f[]
.fi
.PP
The scrollbars will get no smaller than 1/8 of an inch, or bigger than
1/2 inch.
The initial size will be their requested size, so long as it is within
the specified bounds.
.PP
How the elements of the list are interpreted is dependent upon the
number of elements in the list.
.TP
.B {}
Empty list.
No bounds are set.
The default sizing is performed.
.RS
.RE
.TP
.B { \f[I]x\f[] }
Fixes the size to \f[I]x\f[].
The window or partition cannot grow or shrink.
.RS
.RE
.TP
.B { \f[I]min\f[] \f[I]max\f[] }
Sets up minimum and maximum limits for the size of the window or
partition.
The window or partition can be reduced less than \f[I]min\f[], nor can
it be stretched beyond \f[I]max\f[].
.RS
.RE
.TP
.B { \f[I]min\f[] \f[I]max\f[] \f[I]nom\f[] }
Specifies minimum and maximum size limits, but also specifies a nominal
size \f[I]nom\f[].
This overrides the calculated size of the window or partition.
.RS
.RE
.SH MISCELLANEOUS
.PP
Another feature is that you can put two widgets in the same cell of the
table.
This is useful when you want to add decorations around a widget.
.IP
.nf
\f[C]
frame\ .frame\ \-bd\ 1\ \-relief\ sunken
button\ .quit\ \-text\ "Quit"

#\ Put\ both\ the\ frame\ and\ the\ button\ in\ the\ same\ cell.
table\ .\ \\
\ \ \ \ .quit\ \ 1,0\ \-padx\ 2\ \-pady\ 2\ \\
\ \ \ \ .frame\ 1,0\ \-fill\ both
\f[]
.fi
.SH LIMITATIONS
.PP
A long standing bug in Tk (circa 1993), there is no way to detect if a
window is already a container of a different geometry manager.
This is usually done by accident, such as the following where all three
widgets are arranged in the same container ".", but using different
geometry managers.
.PP
table .f1
.TP
.B \&...
pack .f2
.RS
.RE
.TP
.B \&...
grid .f3
.RS
.RE
.PP
This leads to bizarre window resizing, as each geometry manager applies
its own brand of layout policies.
When the container is a top level window (such as "."), your window
manager may become locked as it responds to the never\-ending stream of
resize requests.
.SH KEYWORDS
.PP
frame, geometry manager, location, table, size
