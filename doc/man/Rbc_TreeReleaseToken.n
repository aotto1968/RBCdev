.\" Automatically generated by Pandoc 1.17.1
.\"
.ad l
.TH "Rbc_TreeReleaseToken" "n" "" "RBC(0.2)" "RBC Built-In Commands"
.hy
.SH NAME
.PP
Rbc_TreeReleaseToken \- Releases token associated with tree object.
.SH SYNOPSIS
.PP
\f[B]#include <rbcTree.h>\f[]
.PP
int
.PD 0
.P
.PD
\f[B]Rbc_TreeReleaseToken\f[](\f[I]token\f[])
.SH ARGUMENTS
.PP
Rbc_Tree \f[I]*token\f[] (in) Token of tree to be released.
.SH DESCRIPTION
.PP
This procedure releases the token associated with a C\-based tree data
object.
When all outstanding tokens for a tree data object have been released,
then the data object itself will be freed.
The arguments are as follows:
.TP
.B token
Token of the tree data object to be released.
This token was initialized either by \f[B]Tcl_TreeGetToken\f[]
\f[I]or\f[] \f[I]Rbc_TreeCreate\f[] earlier.
.RS
.RE
.SH RETURNS
.PP
Nothing.
.SH EXAMPLE
.PP
The following example creates and then releases a new token.
.IP
.nf
\f[C]
Rbc_Tree\ token;

if\ (Rbc_TreeCreate(interp,\ "myTree",\ &token)\ !=\ TCL_OK)\ {
\ \ \ \ return\ TCL_ERROR;
}
printf("tree\ is\ %s\\n",\ Rbc_TreeName(token));

/*\ Tree\ will\ be\ destroyed\ when\ the\ token\ is\ released.\ */
Rbc_TreeReleaseToken(token);
\f[]
.fi
.SH KEYWORDS
.PP
tree, token
