.\" Automatically generated by Pandoc 1.17.1
.\"
.ad l
.TH "Rbc_TreeCreateNode" "n" "" "RBC(0.2)" "RBC Built-In Commands"
.hy
.SH NAME
.PP
Rbc_TreeCreateNode \- Creates a node in a tree data object.
.SH SYNOPSIS
.SH include <rbcTree.h>
.PP
Rbc_TreeNode
.PD 0
.P
.PD
\f[B]Rbc_TreeCreateNode\f[](\f[I]tree\f[], \f[I]parent\f[],
\f[I]name\f[], \f[I]position\f[])
.SH ARGUMENTS
.TP
.B Rbc_Tree \f[I]tree\f[] (in)
Tree containing the parent node.
.RS
.RE
.TP
.B Rbc_TreeNode \f[I]parent\f[] (in)
Node in which to insert the new child.
.RS
.RE
.TP
.B const char \f[I]*name\f[] (in)
Node label.
If NULL, a label will automatically be generated.
.RS
.RE
.TP
.B int \f[I]position\f[] (in)
Position in the parent\[aq]s list of children to insert the new node.
.RS
.RE
.SH DESCRIPTION
.PP
This procedure creates a new node is a tree data object.
The node is initially empty, but data values can be added with
\f[B]Rbc_TreeSetValue\f[].
Each node has a serial number that identifies it within the tree.
No two nodes in the same tree will ever have the same ID.
You can find a node\[aq]s ID with \f[B]Rbc_TreeNodeId\f[].
.PP
The arguments are as follows:
.TP
.B \f[I]tree\f[]
The tree containing the parent node.
.RS
.RE
.TP
.B \f[I]parent\f[]
Node in which the new child will be inserted.
.RS
.RE
.TP
.B \f[I]name\f[]
Label of the new node.
If \f[I]name\f[] is NULL, a label in the form "node0", "node1", etc.
will automatically be generated.
\f[I]Name\f[] can be any string.
Labels are non\-unique.
A parent can contain two nodes with the same label.
Nodes can be relabeled using \f[B]Rbc_TreeRelabelNode\f[].
.RS
.RE
.TP
.B \f[I]position\f[]
Position the parent\[aq]s list of children to insert the new node.
For example, if \f[I]position\f[] is 0, then the new node is prepended
to the beginning of the list.
If \f[I]position\f[] is \-1, then the node is appended onto the end of
the parent\[aq]s list.
.RS
.RE
.SH RETURNS
.PP
The new node returned is of type \f[B]Rbc_TreeNode\f[].
It\[aq]s a token that can be used with other routines to add/delete data
values or children nodes.
.SH EXAMPLE
.PP
The following example creates a new node from the root node.
.IP
.nf
\f[C]
Rbc_Tree\ token;
Rbc_TreeNode\ root,\ node;

if\ (Rbc_TreeGetToken(interp,\ "myTree",\ &token)\ !=\ TCL_OK)\ {
\ \ \ \ return\ TCL_ERROR;
}
root\ =\ Rbc_TreeRootNode(token);
node\ =\ Rbc_TreeCreateNode(token,\ root,\ "myNode",\ \-1);
\f[]
.fi
.SH NOTIFICATIONS
.PP
\f[B]Rbc_TreeCreateNode\f[] can trigger tree notify events.
You can be notified whenever a node is created by using the
\f[B]Rbc_TreeCreateNotifyHandler\f[].
A callback routine is registered that will be automatically invoked
whenever a new node is added via \f[B]Rbc_TreeCreateNode\f[] to the
tree.
.SH KEYWORDS
.PP
tree, token
