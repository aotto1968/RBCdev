.\" Automatically generated by Pandoc 1.17.1
.\"
.ad l
.TH "Rbc_TreeExists" "n" "" "RBC(0.2)" "RBC Built-In Commands"
.hy
.SH NAME
.PP
Rbc_TreeExists \- Indicates if a tree exists.
.SH SYNOPSIS
.PP
\f[B]#include <rbcTree.h>\f[]
.PP
int
.PD 0
.P
.PD
\f[B]Rbc_TreeExists\f[](\f[I]interp\f[], \f[I]name\f[])
.SH ARGUMENTS
.TP
.B Tcl_Interp \f[I]*interp\f[] (in)
Interpreter to determine current namespace context.
.RS
.RE
.TP
.B const char \f[I]*name\f[] (in)
Name of an existing tree data object.
Can be qualified by a namespace.
.RS
.RE
.SH DESCRIPTION
.PP
This procedure determines if a C\-based tree data object exists by a
given name.
The arguments are as follows:
.TP
.B interp
Used the determine the current namespace context.
.RS
.RE
.TP
.B name
Name of an existing tree data object.
\f[I]Name\f[] can be qualified by a namespace such as fred::myTree.
If no namespace qualifier is used, the current namespace is searched,
then the global namespace.
.RS
.RE
.SH RETURNS
.PP
A boolean result is returned.
If the tree exists 1 is returned, 0 otherwise.
.SH EXAMPLE
.PP
The following example checks if a tree "myTree" exists.
.IP
.nf
\f[C]
if\ (!Rbc_TreeExists(interp,\ "myTree"))\ {
\ \ \ \ fprintf(stderr,\ "can\[aq]t\ find\ tree\ \\"myTree\\\\n");
}
\f[]
.fi
.SH KEYWORDS
.PP
tree, token Tcl_TreeCreate, Tcl_TreeGetToken, Tcl_TreeReleaseToken
