.\" Automatically generated by Pandoc 1.17.1
.\"
.ad l
.TH "container" "n" "" "RBC(0.2)" "RBC Built-In Commands"
.hy
.SH NAME
.PP
container \- Widget to contain a foreign window.
.SH SYNOPSIS
.PP
\f[B]container\f[] \f[I]pathName\f[] ?\f[I]options\f[]?
.SH DESCRIPTION
.PP
The \f[B]container\f[] widget lets you embed an X11 window from a
foreign application into your Tk application.
The foreign window is reparented inside of the widget.
You can then place and arrange the container just as you would any Tk
widget.
.SH INTRODUCTION
.PP
Notebooks are a popular graphical paradigm.
They allow you to organize many windows in a single widget.
For example, you might have an application the displays several X\-Y
graphs at the same time.
Typically, you can\[aq]t pack the graphs into the same \f[B]frame\f[]
because they are too large.
The other alternative is to pack the graphs into several
\f[B]toplevel\f[] widgets, allowing them to overlap on the screen.
The problem is that all the different toplevel windows clutter the
screen and are difficult to manage.
.PP
The \f[B]container\f[] widget lets organize your application by
displaying each graph as a page in a folder of a notebook.
Only one page is visible at a time.
When you click on a tab, the folder (graph) corresponding to the tab is
displayed in the \f[B]container\f[] widget.
The container also lets you temporarily tear pages out of the notebook
into a separate toplevel widget, and put them back in the container
later.
For example, you could compare two graphs side\-by\-side by tearing them
out, and then replace them when you are finished.
.PP
A container may contain an unlimited number of folders.
If there are too many tabs to view, you can arrange them as multiple
tiers or scroll the tabs.
The container uses the conventional Tk scrollbar syntax, so you can
attach a scrollbar too.
.SH EXAMPLE
.PP
You create a container widget with the \f[B]container\f[] command.
.IP
.nf
\f[C]
#\ Create\ a\ new\ container
container\ .c
\f[]
.fi
.PP
A new Tcl command .c is also created.
This command can be used to query and modify the container.
For example, to change the default borderwidth, you use the new command
and the container\[aq]s \f[B]configure\f[] operation.
.IP
.nf
\f[C]
#\ Change\ the\ default\ font.
\&.c\ configure\ \-borderwidth\ 2
\f[]
.fi
.PP
You can then add folders using the \f[B]insert\f[] operation.
.IP
.nf
\f[C]
#\ Create\ a\ new\ folder\ "f1"
\&.c\ coinsert\ 0\ "f1"
\f[]
.fi
.PP
This inserts the new tab named "f1" into the container.
The index 0 indicates location to insert the new tab.
You can also use the index end to append a tab to the end of the
container.
By default, the text of the tab is the name of the tab.
You can change this by configuring the \f[B]\-text\f[] option.
.IP
.nf
\f[C]
#\ Change\ the\ label\ of\ "f1"
\&.ts\ tab\ configure\ "f1"\ \-label\ "Tab\ #1"
\f[]
.fi
.PP
The \f[B]insert\f[] operation lets you add one or more folders at a
time.
.IP
.nf
\f[C]
\&.ts\ insert\ end\ "f2"\ \-label\ "Tab\ #2"\ "f3"\ "f4"
\f[]
.fi
.PP
The tab on each folder contains a label.
A label may display both an image and a text string.
You can reconfigure the tab\[aq]s attributes (foreground/background
colors, font, rotation, etc) using the \f[B]tab\f[] \f[B]configure\f[]
operation.
.IP
.nf
\f[C]
#\ Add\ an\ image\ to\ the\ label\ of\ "f1"
set\ image\ [image\ create\ photo\ \-file\ stopsign.gif]
\&.ts\ tab\ configure\ "f1"\ \-image\ $image
\&.ts\ tab\ configure\ "f2"\ \-rotate\ 90
\f[]
.fi
.PP
Each folder may contain an embedded widget to represent its contents.
The widget to be embedded must be a child of the container widget.
Using the \f[B]\-window\f[] option, you specify the name of widget to be
embedded.
But don\[aq]t pack the widget, the container takes care of placing and
arranging the widget for you.
.IP
.nf
\f[C]
graph\ .ts.graph
\&.ts\ tab\ configure\ "f1"\ \-window\ ".ts.graph"\ \\
\ \ \ \ \-fill\ both\ \-padx\ 0.25i\ \-pady\ 0.25i
\f[]
.fi
.PP
The size of the folder is determined the sizes of the Tk widgets
embedded inside each folder.
The folder will be as wide as the widest widget in any folder.
The tallest determines the height.
You can use the tab\[aq]s \f[B]\-pagewidth\f[] and \f[B]\-pageheight\f[]
options override this.
.PP
Other options control how the widget appears in the folder.
The \f[B]\-fill\f[] option says that you wish to have the widget stretch
to fill the available space in the folder.
.IP
.nf
\f[C]
\&.ts\ tab\ configure\ "f1"\ \-fill\ both\ \-padx\ 0.25i\ \-pady\ 0.25i
\f[]
.fi
.PP
Now when you click the left mouse button on "f1", the graph will be
displayed in the folder.
It will be automatically hidden when another folder is selected.
If you click on the right mouse button, the embedded widget will be
moved into a toplevel widget of its own.
Clicking again on the right mouse button puts it back into the folder.
.PP
If you want to share a page between two different folders, the
\f[B]\-command\f[] option lets you specify a Tcl command to be invoked
whenever the folder is selected.
You can reset the \f[B]\-window\f[] option for the tab whenever it\[aq]s
clicked.
.IP
.nf
\f[C]
\&.ts\ tab\ configure\ "f2"\ \-command\ {
\ \ \ \ .ts\ tab\ configure\ "f2"\ \-window\ ".ts.graph"
}
\&.ts\ tab\ configure\ "f1"\ \-command\ {
\ \ \ \ .ts\ tab\ configure\ "f1"\ \-window\ ".ts.graph"
}
\f[]
.fi
.PP
If you have many folders, you may wish to stack tabs in multiple tiers.
The container\[aq]s \f[B]\-tiers\f[] option requests a maximum number of
tiers.
The default is one tier.
.IP
.nf
\f[C]
\&.ts\ configure\ \-tiers\ 2
\f[]
.fi
.PP
If the tabs can fit in less tiers, the widget will use that many.
Whenever there are more tabs than can be displayed in the maximum number
of tiers, the container will automatically let you scroll the
.TP
.B tabs.
You can even attach a scrollbar to the container.
.RS
.PP
\&.ts configure \-scrollcommand { .sbar set } \-scrollincrement 20 .sbar
configure \-orient horizontal \-command { .ts view }
.RE
.PP
By default tabs are along the top of the container from left to right.
But tabs can be placed on any side of the container using the
\f[B]\-side\f[] option.
.IP
.nf
\f[C]
#\ Arrange\ tabs\ along\ the\ right\ side\ of\ the\ container.
\&.ts\ configure\ \-side\ right\ \-rotate\ 270
\f[]
.fi
.SH SYNTAX
.PP
The \f[B]container\f[] command creates a new window using the
\f[I]pathName\f[] argument and makes it into a container widget.
.IP
.nf
\f[C]
container\ pathName\ ?option\ value?...
\f[]
.fi
.PP
Additional options may be specified on the command line or in the option
database to configure aspects of the container such as its colors, font,
text, and relief.
The \f[B]container\f[] command returns its \f[I]pathName\f[] argument.
At the time this command is invoked, there must not exist a window named
\f[I]pathName\f[], but \f[I]pathName\f[]\[aq]s parent must exist.
.PP
When first created, a new container contains no tabs.
Tabs are added or deleted using widget operations described below.
It is not necessary for all the tabs to be displayed in the container
window at once; commands described below may be used to change the view
in the window.
Containers allow scrolling of tabs using the \f[B]\-scrollcommand\f[]
option.
They also support scanning (see the \f[B]scan\f[] operation).
Tabs may be arranged along any side of the container window using the
\f[B]\-side\f[] option.
.PP
The size of the container window is determined the number of tiers of
tabs and the sizes of the Tk widgets embedded inside each folder.
The widest widget determines the width of the folder.
The tallest determines the height.
If no folders contain an embedded widget, the size is detemined solely
by the size of the tabs.
.PP
You can override either dimension with the container\[aq]s
\f[B]\-width\f[] and \f[B]\-height\f[] options.
.SH CONTAINER OPERATIONS
.PP
All \f[B]container\f[] operations are invoked by specifying the
widget\[aq]s pathname, the operation, and any arguments that pertain to
that operation.
The general form is:
.RS
.PP
\f[I]pathName\f[] \f[I]operation\f[] ?\f[I]arg\f[] \f[I]arg\f[]
\f[I]\&...\f[]?
.RE
.PP
\f[I]Operation\f[] and the \f[I]arg\f[]s determine the exact behavior of
the command.
The following operations are available for container widgets:
.TP
.B \f[I]pathName\f[] \f[B]cget\f[] \f[I]option\f[]
Returns the current value of the configuration option given by
\f[I]option\f[].
\f[I]Option\f[] may have any of the values accepted by the
\f[B]configure\f[] operation described below.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]configure\f[] ?\f[I]option\f[]? ?\f[I]value\f[] \f[I]option\f[] \f[I]value\f[] \f[I]\&...\f[]?
Query or modify the configuration options of the widget.
If no \f[I]option\f[] is specified, returns a list describing all the
available options for \f[I]pathName\f[] (see \f[B]Tk_ConfigureInfo\f[]
for information on the format of this list).
If \f[I]option\f[] is specified with no \f[I]value\f[], then the command
returns a list describing the one named option (this list will be
identical to the corresponding sublist of the value returned if no
\f[I]option\f[] is specified).
If one or more \f[I]option\-value\f[] pairs are specified, then the
command modifies the given widget option(s) to have the given value(s);
in this case the command returns an empty string.
\f[I]Option\f[] and \f[I]value\f[] are described below:
.RS
.TP
.B \-background \f[I]color\f[]
Sets the border color of the container.
.RS
.RE
.TP
.B \-borderwidth \f[I]pixels\f[]
Sets the width of the 3\-D border around the outside edge of the widget.
The \f[B]\-relief\f[] option determines how the border is to be drawn.
The default is 2.
.RS
.RE
.TP
.B \-command \f[I]pattern\f[]
Specifies to search for a window whose WM_COMMAND property matches the
given pattern.
If no windows, or more than one window, matches the pattern, an error is
generated.
If \f[I]pattern\f[] is the empty string, then no command search is
performed.
The default is "".
.RS
.RE
.TP
.B \-cursor \f[I]cursor\f[]
Specifies the widget\[aq]s cursor.
The default cursor is "".
.RS
.RE
.TP
.B \-height \f[I]pixels\f[]
Specifies the requested height of widget.
If \f[I]pixels\f[] is 0, then the height is height the embedded window
plus the specified borderwidth.
The default is 0.
.RS
.RE
.TP
.B \-highlightbackground \f[I]color\f[]
Sets the color to display in the traversal highlight region when the
container does not have the input focus.
.RS
.RE
.TP
.B \-highlightcolor \f[I]color\f[]
Sets the color to use for the traversal highlight rectangle that is
drawn around the widget when it has the input focus.
The default is black.
.RS
.RE
.TP
.B \-highlightthickness \f[I]pixels\f[]
Sets the width of the highlight rectangle to draw around the outside of
the widget when it has the input focus.
\f[I]Pixels\f[] is a non\-negative value and may have any of the forms
acceptable to \f[B]Tk_GetPixels\f[].
If the value is zero, no focus highlight is drawn around the widget.
The default is 2.
.RS
.RE
.TP
.B \-name \f[I]pattern\f[]
Specifies to search for a window whose WM_NAME property matches the
given pattern.
If no windows, or more than one window, matches the pattern, an error is
generated.
If \f[I]pattern\f[] is the empty string, then no name search is
performed.
The default is "".
.RS
.RE
.TP
.B \-relief \f[I]relief\f[]
Specifies the 3\-D effect for the container widget.
\f[I]Relief\f[] specifies how the container should appear relative to
widget that it is packed into; for example, raised means the container
should appear to protrude.
The default is sunken.
.RS
.RE
.TP
.B \-takefocus \f[I]focus\f[]
Provides information used when moving the focus from window to window
via keyboard traversal (e.g., Tab and Shift\-Tab).
If \f[I]focus\f[] is 0, this means that this window should be skipped
entirely during keyboard traversal.
1 means that the this window should always receive the input focus.
An empty value means that the traversal scripts decide whether to focus
on the window.
The default is 1.
.RS
.RE
.TP
.B \-width \f[I]pixels\f[]
Specifies the requested width of the widget.
If \f[I]pixels\f[] is 0, then the width is the width the embedded window
and the specified borderwidth.
The default is 0.
.RS
.RE
.TP
.B \-window \f[I]id\f[]
Specifies the foreign embedded using its X window id.
.RS
.RE
.RE
.TP
.B \f[I]pathName\f[] \f[B]find \-command\f[]|\f[B]\-name\f[] \f[I]pattern\f[]
Searches for all windows that match the given pattern.
If the \f[B]\-command\f[] switch is given, all windows whose WWM_COMMAND
property match \f[I]pattern\f[] are returned in a list.
If the \f[B]\-name\f[] switch is given, all windows whose WWM_NAME
property match \f[I]pattern\f[] are returned in a list.
The list returned will contains pairs of the window id and the matching
property.
.RS
.RE
.SH KEYWORDS
.PP
container, widget
