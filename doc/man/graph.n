.\" Automatically generated by Pandoc 1.17.1
.\"
.ad l
.TH "graph" "n" "" "RBC(0.2)" "RBC Built-In Commands"
.hy
.SH NAME
.PP
graph \- 2D graph for plotting X\-Y coordinate data.
.SH SYNOPSIS
.PP
\f[B]graph\f[] \f[I]pathName\f[] ?\f[I]option\f[] \f[I]value\f[]?...
.SH DESCRIPTION
.PP
The \f[B]graph\f[] command creates a graph for plotting two\-dimensional
data (X\-Y coordinates).
It has many configurable components: coordinate axes, elements, legend,
grid lines, cross hairs, etc.
They allow you to customize the look and feel of the graph.
.SH INTRODUCTION
.PP
The \f[B]graph\f[] command creates a new window for plotting
two\-dimensional data (X\-Y coordinates).
Data points are plotted in a rectangular area displayed in the center of
the new window.
This is the \f[I]plotting\f[] \f[I]area\f[].
The coordinate axes are drawn in the margins around the plotting area.
By default, the legend is displayed in the right margin.
The title is displayed in top margin.
.PP
The \f[B]graph\f[] widget is composed of several components: coordinate
axes, data elements, legend, grid, cross hairs, pens, postscript, and
annotation markers.
.TP
.B axis
The graph has four standard axes (x, x2, y, and y2), but you can create
and display any number of axes.
Axes control what region of data is displayed and how the data is
scaled.
Each axis consists of the axis line, title, major and minor ticks, and
tick labels.
Tick labels display the value at each major tick.
.RS
.RE
.TP
.B crosshairs
Cross hairs are used to position the mouse pointer relative to the X and
Y coordinate axes.
Two perpendicular lines, intersecting at the current location of the
mouse, extend across the plotting area to the coordinate axes.
.RS
.RE
.TP
.B element
An element represents a set of data points.
Elements can be plotted with a symbol at each data point and lines
connecting the points.
The appearance of the element, such as its symbol, line width, and color
is configurable.
.RS
.RE
.TP
.B grid
Extends the major and minor ticks of the X\-axis and/or Y\-axis across
the plotting area.
.RS
.RE
.TP
.B legend
The legend displays the name and symbol of each data element.
The legend can be drawn in any margin or in the plotting area.
.RS
.RE
.TP
.B marker
Markers are used annotate or highlight areas of the graph.
For example, you could use a polygon marker to fill an area under a
curve, or a text marker to label a particular data point.
Markers come in various forms: text strings, bitmaps, connected line
segments, images, polygons, or embedded widgets.
.RS
.RE
.TP
.B pen
Pens define attributes (both symbol and line style) for elements.
Data elements use pens to specify how they should be drawn.
A data element may use many pens at once.
Here, the particular pen used for a data point is determined from each
element\[aq]s weight vector (see the element\[aq]s \f[B]\-weight\f[] and
\f[B]\-style\f[] options).
.RS
.RE
.TP
.B postscript
The widget can generate encapsulated PostScript output.
This component has several options to configure how the PostScript is
generated.
.RS
.RE
.SH SYNTAX
.PP
\f[B]graph\f[] \f[I]pathName\f[] ?\f[I]option\f[] \f[I]value\f[]?...
The \f[B]graph\f[] command creates a new window \f[I]pathName\f[] and
makes it into a \f[B]graph\f[] widget.
At the time this command is invoked, there must not exist a window named
\f[I]pathName\f[], but \f[I]pathName\f[]\[aq]s parent must exist.
Additional options may be specified on the command line or in the option
database to configure aspects of the graph such as its colors and font.
See the \f[B]configure\f[] operation below for the exact details about
what \f[I]option\f[] and \f[I]value\f[] pairs are valid.
.PP
If successful, \f[B]graph\f[] returns the path name of the widget.
It also creates a new Tcl command by the same name.
You can use this command to invoke various operations that query or
modify the graph.
The general form is: \f[I]pathName\f[] \f[I]operation\f[]
?\f[I]arg\f[]?...
Both \f[I]operation\f[] and its arguments determine the exact behavior
of the command.
The operations available for the graph are described in the \f[B]GRAPH
OPERATIONS\f[] section.
.PP
The command can also be used to access components of the graph.
\f[I]pathName\f[] \f[I]component\f[] \f[I]operation\f[]
?\f[I]arg\f[]?...
The operation, now located after the name of the component, is the
function to be performed on that component.
Each component has its own set of operations that manipulate that
component.
They will be described below in their own sections.
.SH EXAMPLE
.PP
The \f[B]graph\f[] command creates a new graph.
.IP
.nf
\f[C]
#\ Create\ a\ new\ graph.\ \ Plotting\ area\ is\ black.
graph\ .g\ \-plotbackground\ black
\f[]
.fi
.PP
A new Tcl command .g is also created.
This command can be used to query and modify the graph.
For example, to change the title of the graph to "My Plot", you use the
new command and the graph\[aq]s \f[B]configure\f[] operation.
.IP
.nf
\f[C]
#\ Change\ the\ title.
\&.g\ configure\ \-title\ "My\ Plot"
\f[]
.fi
.PP
A graph has several components.
To access a particular component you use the component\[aq]s name.
For example, to add data elements, you use the new command and the
\f[B]element\f[] component.
.IP
.nf
\f[C]
#\ Create\ a\ new\ element\ named\ "line1"
\&.g\ element\ create\ line1\ \\
\ \ \-xdata\ {\ 0.2\ 0.4\ 0.6\ 0.8\ 1.0\ 1.2\ 1.4\ 1.6\ 1.8\ 2.0\ }\ \\
\ \ \-ydata\ {\ 26.18\ 50.46\ 72.85\ 93.31\ 111.86\ 128.47\ 143.14
\ \ \ \ \ 155.85\ 166.60\ 175.38\ }
\f[]
.fi
.PP
The element\[aq]s X\-Y coordinates are specified using lists of numbers.
Alternately, RBC vectors could be used to hold the X\-Y coordinates.
.IP
.nf
\f[C]
#\ Create\ two\ vectors\ and\ add\ them\ to\ the\ graph.
vector\ xVec\ yVec
xVec\ set\ {\ 0.2\ 0.4\ 0.6\ 0.8\ 1.0\ 1.2\ 1.4\ 1.6\ 1.8\ 2.0\ }
yVec\ set\ {\ 26.18\ 50.46\ 72.85\ 93.31\ 111.86\ 128.47\ 143.14\ 155.85
\ \ 166.60\ 175.38\ }
\&.g\ element\ create\ line1\ \-xdata\ xVec\ \-ydata\ yVec
\f[]
.fi
.PP
The advantage of using vectors is that when you modify one, the graph is
automatically redrawn to reflect the new values.
.IP
.nf
\f[C]
#\ Change\ the\ y\ coordinate\ of\ the\ first\ point.
set\ yVector(0)\ 25.18
\f[]
.fi
.PP
An element named e1 is now created in .b.
It is automatically added to the display list of elements.
You can use this list to control in what order elements are displayed.
To query or reset the element display list, you use the element\[aq]s
\f[B]show\f[] operation.
.IP
.nf
\f[C]
#\ Get\ the\ current\ display\ list
set\ elemList\ [.b\ element\ show]
#\ Remove\ the\ first\ element\ so\ it\ won\[aq]t\ be\ displayed.
\&.b\ element\ show\ [lrange\ $elemList\ 0\ end]
\f[]
.fi
.PP
The element will be displayed by as many bars as there are data points
(in this case there are ten).
The bars will be drawn centered at the x\-coordinate of the data point.
All the bars will have the same attributes (colors, stipple, etc).
The width of each bar is by default one unit.
You can change this with using the \f[B]\-barwidth\f[] option.
.IP
.nf
\f[C]
#\ Change\ the\ X\-Y\ coordinates\ of\ the\ first\ point.
set\ xVec(0)\ 0.18
set\ yVec(0)\ 25.18
\f[]
.fi
.PP
An element named line1 is now created in .g.
By default, the element\[aq]s label in the legend will be also line1.
You can change the label, or specify no legend entry, again using the
element\[aq]s \f[B]configure\f[] operation.
.IP
.nf
\f[C]
#\ Don\[aq]t\ display\ "line1"\ in\ the\ legend.
\&.g\ element\ configure\ line1\ \-label\ ""
\f[]
.fi
.PP
You can configure more than just the element\[aq]s label.
An element has many attributes such as symbol type and size, dashed or
solid lines, colors, line width, etc.
.IP
.nf
\f[C]
\&.g\ element\ configure\ line1\ \-symbol\ square\ \-color\ red\ \\
\ \ \-dashes\ {\ 2\ 4\ 2\ }\ \-linewidth\ 2\ \-pixels\ 2c
\f[]
.fi
.PP
Four coordinate axes are automatically created: x, x2, y, and y2.
And by default, elements are mapped onto the axes x and y.
This can be changed with the \f[B]\-mapx\f[] and \f[B]\-mapy\f[]
options.
.IP
.nf
\f[C]
#\ Map\ "line1"\ on\ the\ alternate\ Y\-axis\ "y2".
\&.g\ element\ configure\ line1\ \-mapy\ y2
\f[]
.fi
.PP
Axes can be configured in many ways too.
For example, you change the scale of the Y\-axis from linear to log
using the \f[B]axis\f[] component.
.IP
.nf
\f[C]
#\ Y\-axis\ is\ log\ scale.
\&.g\ axis\ configure\ y\ \-logscale\ yes
\f[]
.fi
.PP
One important way axes are used is to zoom in on a particular data
region.
Zooming is done by simply specifying new axis limits using the
\f[B]\-min\f[] and \f[B]\-max\f[] configuration options.
.IP
.nf
\f[C]
\&.g\ axis\ configure\ x\ \-min\ 1.0\ \-max\ 1.5
\&.g\ axis\ configure\ y\ \-min\ 12.0\ \-max\ 55.15
\f[]
.fi
.PP
To zoom interactively, you link the \f[B]axis configure\f[] operations
with some user interaction (such as pressing the mouse button), using
the \f[B]bind\f[] command.
To convert between screen and graph coordinates, use the
\f[B]invtransform\f[] operation.
.IP
.nf
\f[C]
#\ Click\ the\ button\ to\ set\ a\ new\ minimum
bind\ .g\ <ButtonPress\-1>\ {
\ \ \ \ %W\ axis\ configure\ x\ \-min\ [%W\ axis\ invtransform\ x\ %x]
\ \ \ \ %W\ axis\ configure\ x\ \-min\ [%W\ axis\ invtransform\ x\ %y]
}
\f[]
.fi
.PP
By default, the limits of the axis are determined from data values.
To reset back to the default limits, set the \f[B]\-min\f[] and
\f[B]\-max\f[] options to the empty value.
.IP
.nf
\f[C]
#\ Reset\ the\ axes\ to\ autoscale\ again.
\&.g\ axis\ configure\ x\ \-min\ {}\ \-max\ {}
\&.g\ axis\ configure\ y\ \-min\ {}\ \-max\ {}
\f[]
.fi
.PP
By default, the legend is drawn in the right margin.
You can change this or any legend configuration options using the
\f[B]legend\f[] component.
.IP
.nf
\f[C]
#\ Configure\ the\ legend\ font,\ color,\ and\ relief
\&.g\ legend\ configure\ \-position\ left\ \-relief\ raised\ \\
\ \ \-font\ fixed\ \-fg\ blue
\f[]
.fi
.PP
To prevent the legend from being displayed, turn on the \f[B]\-hide\f[]
option.
.IP
.nf
\f[C]
#\ Don\[aq]t\ display\ the\ legend.
\&.g\ legend\ configure\ \-hide\ yes
\f[]
.fi
.PP
The \f[B]graph\f[] widget has simple drawing procedures called markers.
They can be used to highlight or annotate data in the graph.
The types of markers available are bitmaps, images, polygons, lines, or
windows.
Markers can be used, for example, to mark or brush points.
In this example, is a text marker that labels the data first point.
Markers are created using the \f[B]marker\f[] component.
.IP
.nf
\f[C]
#\ Create\ a\ label\ for\ the\ first\ data\ point\ of\ "line1".
\&.g\ marker\ create\ text\ \-name\ first_marker\ \-coords\ {\ 0.2\ 26.18\ }\ \\
\ \ \-text\ "start"\ \-anchor\ se\ \-xoffset\ \-10\ \-yoffset\ \-10
\f[]
.fi
.PP
This creates a text marker named first_marker.
It will display the text "start" near the coordinates of the first data
point.
The \f[B]\-anchor\f[], \f[B]\-xoffset\f[], and \f[B]\-yoffset\f[]
options are used to display the marker above and to the left of the data
point, so that the data point isn\[aq]t covered by the marker.
By default, markers are drawn last, on top of
.TP
.B data.
You can change this with the \f[B]\-under\f[] option.
.RS
.SH Draw the label before elements are drawn.
.PP
\&.g marker configure first_marker \-under yes
.RE
.PP
You can add cross hairs or grid lines using the \f[B]crosshairs\f[] and
\f[B]grid\f[] components.
.IP
.nf
\f[C]
#\ Display\ both\ cross\ hairs\ and\ grid\ lines.
\&.g\ crosshairs\ configure\ \-hide\ no\ \-color\ red
\&.g\ grid\ configure\ \-hide\ no\ \-dashes\ {\ 2\ 2\ }
#\ Set\ up\ a\ binding\ to\ reposition\ the\ crosshairs.
bind\ .g\ <Motion>\ {
\ \ \ \ .g\ crosshairs\ configure\ \-position\ \@%x,%y
}
\f[]
.fi
.PP
The crosshairs are repositioned as the mouse pointer is moved in the
graph.
The pointer X\-Y coordinates define the center of the crosshairs.
.PP
Finally, to get hardcopy of the graph, use the \f[B]postscript\f[]
component.
.IP
.nf
\f[C]
#\ Print\ the\ graph\ into\ file\ "file.ps"
\&.g\ postscript\ output\ file.ps\ \-maxpect\ yes\ \-decorations\ no
\f[]
.fi
.PP
This generates a file file.ps containing the encapsulated PostScript of
the graph.
The option \f[B]\-maxpect\f[] says to scale the plot to the size of the
page.
Turning off the \f[B]\-decorations\f[] option denotes that no borders or
color backgrounds should be drawn (i.e.
the background of the margins, legend, and plotting area will be white).
.SH GRAPH OPERATIONS
.TP
.B \f[I]pathName\f[] \f[B]axis\f[] \f[I]operation\f[] ?\f[I]arg\f[]?...
See the \f[B]AXIS COMPONENTS\f[] section.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]bar\f[] \f[I]elemName\f[] ?\f[I]option\f[] \f[I]value\f[]?...
Creates a new barchart element \f[I]elemName\f[].
It\[aq]s an error if an element \f[I]elemName\f[] already exists.
See the manual for \f[B]barchart\f[] for details about what
\f[I]option\f[] and \f[I]value\f[] pairs are valid.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]cget\f[] \f[I]option\f[]
Returns the current value of the configuration option given by
\f[I]option\f[].
\f[I]Option\f[] may be any option described below for the
\f[B]configure\f[] operation.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]configure\f[] ?\f[I]option\f[] \f[I]value\f[]?...
Queries or modifies the configuration options of the graph.
If \f[I]option\f[] isn\[aq]t specified, a list describing the current
options for \f[I]pathName\f[] is returned.
If \f[I]option\f[] is specified, but not \f[I]value\f[], then a list
describing \f[I]option\f[] is returned.
If one or more \f[I]option\f[] and \f[I]value\f[] pairs are specified,
then for each pair, the option \f[I]option\f[] is set to \f[I]value\f[].
The following options are valid.
.RS
.TP
.B \-aspect \f[I]width/height\f[]
Force a fixed aspect ratio of \f[I]width/height\f[], a floating point
number.
.RS
.RE
.TP
.B \-background \f[I]color\f[]
Sets the background color.
This includes the margins and legend, but not the plotting area.
.RS
.RE
.TP
.B \-borderwidth \f[I]pixels\f[]
Sets the width of the 3\-D border around the outside edge of the widget.
The \f[B]\-relief\f[] option determines if the border is to be drawn.
The default is 2.
.RS
.RE
.TP
.B \-bottommargin \f[I]pixels\f[]
If non\-zero, overrides the computed size of the margin extending below
the X\-coordinate axis.
If \f[I]pixels\f[] is 0, the automatically computed size is used.
The default is 0.
.RS
.RE
.TP
.B \-bufferelements \f[I]boolean\f[]
Indicates whether an internal pixmap to buffer the display of data
elements should be used.
If \f[I]boolean\f[] is true, data elements are drawn to an internal
pixmap.
This option is especially useful when the graph is redrawn frequently
while the remains data unchanged (for example, moving a marker across
the plot).
See the \f[B]SPEED\f[] \f[B]TIPS\f[] section.
The default is 1.
.RS
.RE
.TP
.B \-cursor \f[I]cursor\f[]
Specifies the widget\[aq]s cursor.
The default cursor is crosshair.
.RS
.RE
.TP
.B \-font \f[I]fontName\f[]
Specifies the font of the graph title.
The default is *\-Helvetica\-Bold\-R\-Normal\-*\-18\-180\-*.
.RS
.RE
.TP
.B \-halo \f[I]pixels\f[]
Specifies a maximum distance to consider when searching for the closest
data point (see the element\[aq]s \f[B]closest\f[] operation below).
Data points further than \f[I]pixels\f[] away are ignored.
The default is 0.5i.
.RS
.RE
.TP
.B \-height \f[I]pixels\f[]
Specifies the requested height of widget.
The default is 4i.
.RS
.RE
.TP
.B \-invertxy \f[I]boolean\f[]
Indicates whether the placement X\-axis and Y\-axis should be inverted.
If \f[I]boolean\f[] is true, the X and Y axes are swapped.
The default is 0.
.RS
.RE
.TP
.B \-justify \f[I]justify\f[]
Specifies how the title should be justified.
This matters only when the title contains more than one line of text.
\f[I]Justify\f[] must be left, right, or center.
The default is center.
.RS
.RE
.TP
.B \-leftmargin \f[I]pixels\f[]
If non\-zero, overrides the computed size of the margin extending from
the left edge of the window to the Y\-coordinate axis.
If \f[I]pixels\f[] is 0, the automatically computed size is used.
The default is 0.
.RS
.RE
.TP
.B \-plotbackground \f[I]color\f[]
Specifies the background color of the plotting area.
The default is white.
.RS
.RE
.TP
.B \-plotborderwidth \f[I]pixels\f[]
Sets the width of the 3\-D border around the plotting area.
The \f[B]\-plotrelief\f[] option determines if a border is drawn.
The default is 2.
.RS
.RE
.TP
.B \-plotpadx \f[I]pad\f[]
Sets the amount of padding to be added to the left and right sides of
the plotting area.
\f[I]Pad\f[] can be a list of one or two screen distances.
If \f[I]pad\f[] has two elements, the left side of the plotting area
entry is padded by the first distance and the right side by the second.
If \f[I]pad\f[] is just one distance, both the left and right sides are
padded evenly.
The default is 8.
.RS
.RE
.TP
.B \-plotpady \f[I]pad\f[]
Sets the amount of padding to be added to the top and bottom of the
plotting area.
\f[I]Pad\f[] can be a list of one or two screen distances.
If \f[I]pad\f[] has two elements, the top of the plotting area is padded
by the first distance and the bottom by the second.
If \f[I]pad\f[] is just one distance, both the top and bottom are padded
evenly.
The default is 8.
.RS
.RE
.TP
.B \-plotrelief \f[I]relief\f[]
Specifies the 3\-D effect for the plotting area.
\f[I]Relief\f[] specifies how the interior of the plotting area should
appear relative to rest of the graph; for example, raised means the plot
should appear to protrude from the graph, relative to the surface of the
graph.
The default is sunken.
.RS
.RE
.TP
.B \-relief \f[I]relief\f[]
Specifies the 3\-D effect for the graph widget.
\f[I]Relief\f[] specifies how the graph should appear relative to widget
it is packed into; for example, raised means the graph should appear to
protrude.
The default is flat.
.RS
.RE
.TP
.B \-rightmargin \f[I]pixels\f[]
If non\-zero, overrides the computed size of the margin extending from
the plotting area to the right edge of the window.
By default, the legend is drawn in this margin.
If \f[I]pixels\f[] is 0, the automatically computed size is used.
The default is 0.
.RS
.RE
.TP
.B \-takefocus \f[I]focus\f[]
Provides information used when moving the focus from window to window
via keyboard traversal (e.g., Tab and Shift\-Tab).
If \f[I]focus\f[] is 0, this means that this window should be skipped
entirely during keyboard traversal.
1 means that the this window should always receive the input focus.
An empty value means that the traversal scripts make the decision
whether to focus on the window.
The default is "".
.RS
.RE
.TP
.B \-tile \f[I]image\f[]
Specifies a tiled background for the widget.
If \f[I]image\f[] isn\[aq]t "", the background is tiled using
\f[I]image\f[].
Otherwise, the normal background color is drawn (see the
\f[B]\-background\f[] option).
\f[I]Image\f[] must be an image created using the Tk \f[B]image\f[]
command.
The default is "".
.RS
.RE
.TP
.B \-title \f[I]text\f[]
Sets the title to \f[I]text\f[].
If \f[I]text\f[] is "", no title will be displayed.
.RS
.RE
.TP
.B \-topmargin \f[I]pixels\f[]
If non\-zero, overrides the computed size of the margin above the x2
axis.
If \f[I]pixels\f[] is 0, the automatically computed size is used.
The default is 0.
.RS
.RE
.TP
.B \-width \f[I]pixels\f[]
Specifies the requested width of the widget.
The default is 5i.
.RS
.RE
.RE
.TP
.B \f[I]pathName\f[] \f[B]crosshairs\f[] \f[I]operation\f[] ?\f[I]arg\f[]?
See the \f[B]CROSSHAIRS COMPONENT\f[] section.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]element\f[] \f[I]operation\f[] ?\f[I]arg\f[]?...
See the \f[B]ELEMENT COMPONENTS\f[] section.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]extents\f[] \f[I]item\f[]
Returns the size of a particular item in the graph.
\f[I]Item\f[] must be either leftmargin, rightmargin, topmargin,
bottommargin, plotwidth, or plotheight.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]grid\f[] \f[I]operation\f[] ?\f[I]arg\f[]?...
See the \f[B]GRID COMPONENT\f[] section.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]invtransform\f[] \f[I]winX\f[] \f[I]winY\f[]
Performs an inverse coordinate transformation, mapping window
coordinates back to graph coordinates, using the standard X\-axis and
Y\-axis.
Returns a list of containing the X\-Y graph coordinates.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]inside\f[] \f[I]x\f[] \f[I]y\f[]
Returns 1 is the designated screen coordinate (\f[I]x\f[] and
\f[I]y\f[]) is inside the plotting area and 0 otherwise.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]legend\f[] \f[I]operation\f[] ?\f[I]arg\f[]?...
See the \f[B]LEGEND COMPONENT\f[] section.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]line operation arg\f[]...
The operation is the same as \f[B]element\f[].
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]marker\f[] \f[I]operation\f[] ?\f[I]arg\f[]?...
See the \f[B]MARKER COMPONENTS\f[] section.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]postscript\f[] \f[I]operation\f[] ?\f[I]arg\f[]?...
See the \f[B]POSTSCRIPT COMPONENT\f[] section.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]snap\f[] ?\f[I]switches\f[]? \f[I]outputName\f[]
Takes a snapshot of the graph, saving the output in \f[I]outputName\f[].
The following switches are available.
.RS
.TP
.B \-format \f[I]format\f[]
Specifies how the snapshot is output.
\f[I]Format\f[] may be one of the following listed below.
The default is photo.
.RS
.TP
.B photo
Saves a Tk photo image.
\f[I]OutputName\f[] represents the name of a Tk photo image that must
already have been created.
.RS
.RE
.TP
.B wmf
Saves an Aldus Placeable Metafile.
\f[I]OutputName\f[] represents the filename where the metafile is
written.
If \f[I]outputName\f[] is CLIPBOARD, then output is written directly to
the Windows clipboard.
This format is available only under Microsoft Windows.
.RS
.RE
.TP
.B emf
Saves an Enhanced Metafile.
\f[I]OutputName\f[] represents the filename where the metafile is
written.
If \f[I]outputName\f[] is CLIPBOARD, then output is written directly to
the Windows clipboard.
This format is available only under Microsoft Windows.
.RS
.RE
.RE
.TP
.B \-height \f[I]size\f[]
Specifies the height of the graph.
\f[I]Size\f[] is a screen distance.
The graph will be redrawn using this dimension, rather than its current
window height.
.RS
.RE
.TP
.B \-width \f[I]size\f[]
Specifies the width of the graph.
\f[I]Size\f[] is a screen distance.
The graph will be redrawn using this dimension, rather than its current
window width.
.RS
.RE
.RE
.TP
.B \f[I]pathName\f[] \f[B]transform\f[] \f[I]x\f[] \f[I]y\f[]
Performs a coordinate transformation, mapping graph coordinates to
window coordinates, using the standard X\-axis and Y\-axis.
Returns a list containing the X\-Y screen coordinates.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]xaxis\f[] \f[I]operation\f[] ?\f[I]arg\f[]?...
\&...
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]x2axis\f[] \f[I]operation\f[] ?\f[I]arg\f[]?...
\&...
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]yaxis\f[] \f[I]operation\f[] ?\f[I]arg\f[]?...
\&...
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]y2axis\f[] \f[I]operation\f[] ?\f[I]arg\f[]?...
See the \f[B]AXIS COMPONENTS\f[] section.
.RS
.RE
.SH GRAPH COMPONENTS
.PP
A graph is composed of several components: coordinate axes, data
elements, legend, grid, cross hairs, postscript, and annotation markers.
Instead of one big set of configuration options and operations, the
graph is partitioned, where each component has its own configuration
options and operations that specifically control that aspect or part of
the graph.
.SS AXIS COMPONENTS
.PP
Four coordinate axes are automatically created: two X\-coordinate axes
(x and x2) and two Y\-coordinate axes (y, and y2).
By default, the axis x is located in the bottom margin, y in the left
margin, x2 in the top margin, and y2 in the right margin.
.PP
An axis consists of the axis line, title, major and minor ticks, and
tick labels.
Major ticks are drawn at uniform intervals along the axis.
Each tick is labeled with its coordinate value.
Minor ticks are drawn at uniform intervals within major ticks.
.PP
The range of the axis controls what region of data is plotted.
Data points outside the minimum and maximum limits of the axis are not
plotted.
By default, the minimum and maximum limits are determined from the data,
but you can reset either limit.
.PP
You can have several axes.
To create an axis, invoke the axis component and its create operation.
.IP
.nf
\f[C]
#\ Create\ a\ new\ axis\ called\ "tempAxis"
\&.g\ axis\ create\ tempAxis
\f[]
.fi
.PP
You map data elements to an axis using the element\[aq]s \-mapy and
\-mapx configuration options.
They specify the coordinate axes an element is mapped onto.
.IP
.nf
\f[C]
#\ Now\ map\ the\ tempAxis\ data\ to\ this\ axis.
\&.g\ element\ create\ "e1"\ \-xdata\ $x\ \-ydata\ $y\ \-mapy\ tempAxis
\f[]
.fi
.PP
Any number of axes can be displayed simultaneously.
They are drawn in the margins surrounding the plotting area.
The default axes x and y are drawn in the bottom and left margins.
The axes x2 and y2 are drawn in top and right margins.
By default, only x and y are shown.
Note that the axes can have different scales.
.PP
To display a different axis or more than one axis, you invoke one of the
following components: \f[B]xaxis\f[], \f[B]yaxis\f[], \f[B]x2axis\f[],
and \f[B]y2axis\f[].
Each component has a \f[B]use\f[] operation that designates the axis (or
axes) to be drawn in that corresponding margin: \f[B]xaxis\f[] in the
bottom, \f[B]yaxis\f[] in the left, \f[B]x2axis\f[] in the top, and
\f[B]y2axis\f[] in the right.
.IP
.nf
\f[C]
#\ Display\ the\ axis\ tempAxis\ in\ the\ left\ margin.
\&.g\ yaxis\ use\ tempAxis
\f[]
.fi
.PP
The \f[B]use\f[] operation takes a list of axis names as its last
argument.
This is the list of axes to be drawn in this margin.
.PP
You can configure axes in many ways.
The axis scale can be linear or logarithmic.
The values along the axis can either monotonically increase or decrease.
If you need custom tick labels, you can specify a Tcl procedure to
format the label any way you wish.
You can control how ticks are drawn, by changing the major tick interval
or the number of minor ticks.
You can define non\-uniform tick intervals, such as for time\-series
plots.
.TP
.B \f[I]pathName\f[] \f[B]axis bind\f[] \f[I]tagName\f[] ?\f[I]sequence\f[]? ?\f[I]command\f[]?
Associates \f[I]command\f[] with \f[I]tagName\f[] such that whenever the
event sequence given by \f[I]sequence\f[] occurs for an axis with this
tag, \f[I]command\f[] will be invoked.
The syntax is similar to the \f[B]bind\f[] command except that it
operates on graph axes, rather than widgets.
See the \f[B]bind\f[] manual entry for complete details on
\f[I]sequence\f[] and the substitutions performed on \f[I]command\f[]
before invoking it.
.RS
.PP
If all arguments are specified then a new binding is created, replacing
any existing binding for the same \f[I]sequence\f[] and
\f[I]tagName\f[].
If the first character of \f[I]command\f[] is + then \f[I]command\f[]
augments an existing binding rather than replacing it.
If no \f[I]command\f[] argument is provided then the command currently
associated with \f[I]tagName\f[] and \f[I]sequence\f[] (it\[aq]s an
error occurs if there\[aq]s no such binding) is returned.
If both \f[I]command\f[] and \f[I]sequence\f[] are missing then a list
of all the event sequences for which bindings have been defined for
\f[I]tagName\f[].
.RE
.TP
.B \f[I]pathName\f[] \f[B]axis cget\f[] \f[I]axisName\f[] \f[I]option\f[]
Returns the current value of the option given by \f[I]option\f[] for
\f[I]axisName\f[].
\f[I]Option\f[] may be any option described below for the axis
\f[B]configure\f[] operation.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]axis configure\f[] \f[I]axisName\f[] ?\f[I]axisName\f[]?... ?\f[I]option\f[] \f[I]value\f[]?...
Queries or modifies the configuration options of \f[I]axisName\f[].
Several axes can be changed.
If \f[I]option\f[] isn\[aq]t specified, a list describing all the
current options for \f[I]axisName\f[] is returned.
If \f[I]option\f[] is specified, but not \f[I]value\f[], then a list
describing \f[I]option\f[] is returned.
If one or more \f[I]option\f[] and \f[I]value\f[] pairs are specified,
then for each pair, the axis option \f[I]option\f[] is set to
\f[I]value\f[].
The following options are valid for axes.
.RS
.TP
.B \-bindtags \f[I]tagList\f[]
Specifies the binding tags for the axis.
\f[I]TagList\f[] is a list of binding tag names.
The tags and their order will determine how events for axes are handled.
Each tag in the list matching the current event sequence will have its
Tcl command executed.
Implicitly the name of the element is always the first tag in the list.
The default value is all.
.RS
.RE
.TP
.B \-color \f[I]color\f[]
Sets the color of the axis and tick labels.
The default is black.
.RS
.RE
.TP
.B \-command \f[I]prefix\f[]
Specifies a Tcl command to be invoked when formatting the axis tick
labels.
\f[I]Prefix\f[] is a string containing the name of a Tcl proc and any
extra arguments for the procedure.
This command is invoked for each major tick on the axis.
Two additional arguments are passed to the procedure: the pathname of
the widget and the current the numeric value of the tick.
The procedure returns the formatted tick label.
If "" is returned, no label will appear next to the tick.
You can get the standard tick labels again by setting \f[I]prefix\f[] to
"".
The default is "".
.RS
.PP
Please note that this procedure is invoked while the graph is redrawn.
You may query configuration options.
But do not them, because this can have unexpected results.
.RE
.TP
.B \-descending \f[I]boolean\f[]
Indicates whether the values along the axis are monotonically increasing
or decreasing.
If \f[I]boolean\f[] is true, the axis values will be decreasing.
The default is 0.
.RS
.RE
.TP
.B \-hide \f[I]boolean\f[]
Indicates if the axis is displayed.
If \f[I]boolean\f[] is false the axis will be displayed.
Any element mapped to the axis is displayed regardless.
The default value is 0.
.RS
.RE
.TP
.B \-justify \f[I]justify\f[]
Specifies how the axis title should be justified.
This matters only when the axis title contains more than one line of
text.
\f[I]Justify\f[] must be left, right, or center.
The default is center.
.RS
.RE
.TP
.B \-limits \f[I]formatStr\f[]
Specifies a printf\-like description to format the minimum and maximum
limits of the axis.
The limits are displayed at the top/bottom or left/right sides of the
plotting area.
\f[I]FormatStr\f[] is a list of one or two format descriptions.
If one description is supplied, both the minimum and maximum limits are
formatted in the same way.
If two, the first designates the format for the minimum limit, the
second for the maximum.
If "" is given as either description, then the that limit will not be
displayed.
The default is "".
.RS
.RE
.TP
.B \-linewidth \f[I]pixels\f[]
Sets the width of the axis and tick lines.
The default is 1 pixel.
.RS
.RE
.TP
.B \-logscale \f[I]boolean\f[]
Indicates whether the scale of the axis is logarithmic or linear.
If \f[I]boolean\f[] is true, the axis is logarithmic.
The default scale is linear.
.RS
.RE
.TP
.B \-loose \f[I]boolean\f[]
Indicates whether the limits of the axis should fit the data points
tightly, at the outermost data points, or loosely, at the outer tick
intervals.
If the axis limit is set with the \-min or \-max option, the axes are
displayed tightly.
If \f[I]boolean\f[] is true, the axis range is "loose".
The default is 0.
.RS
.RE
.TP
.B \-majorticks \f[I]majorList\f[]
Specifies where to display major axis ticks.
You can use this option to display ticks at non\-uniform intervals.
\f[I]MajorList\f[] is a list of axis coordinates designating the
location of major ticks.
No minor ticks are drawn.
If \f[I]majorList\f[] is "", major ticks will be automatically computed.
The default is "".
.RS
.RE
.TP
.B \-max \f[I]value\f[]
Sets the maximum limit of \f[I]axisName\f[].
Any data point greater than \f[I]value\f[] is not displayed.
If \f[I]value\f[] is "", the maximum limit is calculated using the
largest data value.
The default is "".
.RS
.RE
.TP
.B \-min \f[I]value\f[]
Sets the minimum limit of \f[I]axisName\f[].
Any data point less than \f[I]value\f[] is not displayed.
If \f[I]value\f[] is "", the minimum limit is calculated using the
smallest data value.
The default is "".
.RS
.RE
.TP
.B \-minorticks \f[I]minorList\f[]
Specifies where to display minor axis ticks.
You can use this option to display minor ticks at non\-uniform
intervals.
\f[I]MinorList\f[] is a list of real values, ranging from 0.0 to 1.0,
designating the placement of a minor tick.
No minor ticks are drawn if the \f[B]\-majortick\f[] option is also set.
If \f[I]minorList\f[] is "", minor ticks will be automatically computed.
The default is "".
.RS
.RE
.TP
.B \-rotate \f[I]theta\f[]
Specifies the how many degrees to rotate the axis tick labels.
\f[I]Theta\f[] is a real value representing the number of degrees to
rotate the tick labels.
The default is 0.0 degrees.
.RS
.RE
.TP
.B \-scrollcommand \f[I]command\f[]
Specify the prefix for a command used to communicate with scrollbars for
this axis, such as \f[I]\&.sbar\f[] \f[I]set\f[].
.RS
.RE
.TP
.B \-scrollmax \f[I]value\f[]
Sets the maximum limit of the axis scroll region.
If \f[I]value\f[] is "", the maximum limit is calculated using the
largest data value.
The default is "".
.RS
.RE
.TP
.B \-scrollmin \f[I]value\f[]
Sets the minimum limit of axis scroll region.
If \f[I]value\f[] is "", the minimum limit is calculated using the
smallest data value.
The default is "".
.RS
.RE
.TP
.B \-showticks \f[I]boolean\f[]
Indicates whether axis ticks should be drawn.
If \f[I]boolean\f[] is true, ticks are drawn.
If false, only the axis line is drawn.
The default is 1.
.RS
.RE
.TP
.B \-stepsize \f[I]value\f[]
Specifies the interval between major axis ticks.
If \f[I]value\f[] isn\[aq]t a valid interval (must be less than the axis
range), the request is ignored and the step size is automatically
calculated.
.RS
.RE
.TP
.B \-subdivisions \f[I]number\f[]
Indicates how many minor axis ticks are to be drawn.
For example, if \f[I]number\f[] is two, only one minor tick is drawn.
If \f[I]number\f[] is one, no minor ticks are displayed.
The default is 2.
.RS
.RE
.TP
.B \-tickfont \f[I]fontName\f[]
Specifies the font for axis tick labels.
The default is *\-Courier\-Bold\-R\-Normal\-*\-100\-*.
.RS
.RE
.TP
.B \-ticklength \f[I]pixels\f[]
Sets the length of major and minor ticks (minor ticks are half the
length of major ticks).
If \f[I]pixels\f[] is less than zero, the axis will be inverted with
ticks drawn pointing towards the plot.
The default is 0.1i.
.RS
.RE
.TP
.B \-title \f[I]text\f[]
Sets the title of the axis.
If \f[I]text\f[] is "", no axis title will be displayed.
.RS
.RE
.TP
.B \-titlealternate \f[I]boolean\f[]
Indicates to display the axis title in its alternate location.
Normally the axis title is centered along the axis.
This option places the axis either to the right (horizontal axes) or
above (vertical axes) the axis.
The default is 0.
.RS
.RE
.TP
.B \-titlecolor \f[I]color\f[]
Sets the color of the axis title.
The default is black.
.RS
.RE
.TP
.B \-titlefont \f[I]fontName\f[]
Specifies the font for axis title.
The default is *\-Helvetica\-Bold\-R\-Normal\-*\-14\-140\-*.
.RS
.RE
.PP
Axis configuration options may be also be set by the \f[B]option\f[]
command.
The resource class is Axis.
The resource names are the names of the axes (such as x or x2).
.PP
option add *Graph.Axis.Color blue
.PD 0
.P
.PD
option add *Graph.x.LogScale true
.PD 0
.P
.PD
option add *Graph.x2.LogScale false
.RE
.TP
.B \f[I]pathName\f[] \f[B]axis create\f[] \f[I]axisName\f[] ?\f[I]option\f[] \f[I]value\f[]?...
Creates a new axis by the name \f[I]axisName\f[].
No axis by the same name can already exist.
\f[I]Option\f[] and \f[I]value\f[] are described in above in the axis
\f[B]configure\f[] operation.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]axis delete\f[] ?\f[I]axisName\f[]?...
Deletes the named axes.
An axis is not really deleted until it is not longer in use, so it\[aq]s
safe to delete axes mapped to elements.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]axis invtransform\f[] \f[I]axisName\f[] \f[I]value\f[]
Performs the inverse transformation, changing the screen coordinate
\f[I]value\f[] to a graph coordinate, mapping the value mapped to
\f[I]axisName\f[].
Returns the graph coordinate.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]axis limits\f[] \f[I]axisName\f[]
Returns a list of the minimum and maximum limits for \f[I]axisName\f[].
The order of the list is min max.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]axis names\f[] ?\f[I]pattern\f[]?...
Returns a list of axes matching zero or more patterns.
If no \f[I]pattern\f[] argument is give, the names of all axes are
returned.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]axis transform\f[] \f[I]axisName\f[] \f[I]value\f[]
Transforms the coordinate \f[I]value\f[] to a screen coordinate by
mapping the it to \f[I]axisName\f[].
Returns the transformed screen coordinate.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]axis view\f[] \f[I]axisName\f[]
Change the viewable area of this axis.
Use as an argument to a scrollbar\[aq]s "\f[I]\-command\f[]".
.RS
.RE
.PP
The default axes are x, y, x2, and y2.
But you can display more than four axes simultaneously.
You can also swap in a different axis with \f[B]use\f[] operation of the
special axis components: \f[B]xaxis\f[], \f[B]x2axis\f[],
\f[B]yaxis\f[], and \f[B]y2axis\f[].
.IP
.nf
\f[C]
\&.g\ create\ axis\ temp
\&.g\ create\ axis\ time
\&...
\&.g\ xaxis\ use\ temp
\&.g\ yaxis\ use\ time
\f[]
.fi
.PP
Only the axes specified for use are displayed on the screen.
.PP
The \f[B]xaxis\f[], \f[B]x2axis\f[], \f[B]yaxis\f[], and \f[B]y2axis\f[]
components operate on an axis location rather than a specific axis like
the more general \f[B]axis\f[] component does.
They implicitly control the axis that is currently using to that
location.
By default, \f[B]xaxis\f[] uses the x axis, \f[B]yaxis\f[] uses y,
\f[B]x2axis\f[] uses x2, and \f[B]y2axis\f[] uses y2.
When more than one axis is displayed in a margin, it represents the
first axis displayed.
.PP
The following operations are available for axes.
They mirror exactly the operations of the \f[B]axis\f[] component.
The \f[I]axis\f[] argument must be \f[B]xaxis\f[], \f[B]x2axis\f[],
\f[B]yaxis\f[], or \f[B]y2axis\f[].
This feature is deprecated since more than one axis can now be used a
margin.
You should only use the \f[B]xaxis\f[], \f[B]x2axis\f[], \f[B]yaxis\f[],
and \f[B]y2axis\f[] components with the \f[B]use\f[] operation.
For all other operations, use the general \f[B]axis\f[] component
instead.
.TP
.B \f[I]pathName\f[] \f[I]axis\f[] \f[B]cget\f[] \f[I]option\f[]
\&...
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[I]axis\f[] \f[B]configure\f[] ?\f[I]option\f[] \f[I]value\f[]?...
\&...
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[I]axis\f[] \f[B]invtransform\f[] \f[I]value\f[]
\&...
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[I]axis\f[] \f[B]limits\f[]
\&...
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[I]axis\f[] \f[B]transform\f[] \f[I]value\f[]
\&...
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[I]axis\f[] \f[B]use\f[] ?\f[I]axisName\f[]?
Designates the axis \f[I]axisName\f[] is to be displayed at this
location.
\f[I]AxisName\f[] can not be already in use at another location.
This command returns the name of the axis currently using this location.
.RS
.RE
.SS CROSSHAIRS COMPONENT
.PP
Cross hairs consist of two intersecting lines (one vertical and one
horizontal) drawn completely across the plotting area.
They are used to position the mouse in relation to the coordinate axes.
Cross hairs differ from line markers in that they are implemented using
XOR drawing primitives.
This means that they can be quickly drawn and erased without redrawing
the entire graph.
.PP
The following operations are available for cross hairs:
.TP
.B \f[I]pathName\f[] \f[B]crosshairs cget\f[] \f[I]option\f[]
Returns the current value of the cross hairs configuration option given
by \f[I]option\f[].
\f[I]Option\f[] may be any option described below for the cross hairs
\f[B]configure\f[] operation.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]crosshairs configure\f[] ?\f[I]option\f[] \f[I]value\f[]?...
Queries or modifies the configuration options of the cross hairs.
If \f[I]option\f[] isn\[aq]t specified, a list describing all the
current options for the cross hairs is returned.
If \f[I]option\f[] is specified, but not \f[I]value\f[], then a list
describing \f[I]option\f[] is returned.
If one or more \f[I]option\f[] and \f[I]value\f[] pairs are specified,
then for each pair, the cross hairs option \f[I]option\f[] is set to
\f[I]value\f[].
The following options are available for cross hairs.
.RS
.TP
.B \-color \f[I]color\f[]
Sets the color of the cross hairs.
The default is black.
.RS
.RE
.TP
.B \-dashes \f[I]dashList\f[]
Sets the dash style of the cross hairs.
\f[I]DashList\f[] is a list of up to 11 numbers that alternately
represent the lengths of the dashes and gaps on the cross hair lines.
Each number must be between 1 and 255.
If \f[I]dashList\f[] is "", the cross hairs will be solid lines.
.RS
.RE
.TP
.B \-hide \f[I]boolean\f[]
Indicates whether cross hairs are drawn.
If \f[I]boolean\f[] is true, cross hairs are not drawn.
The default is yes.
.RS
.RE
.TP
.B \-linewidth \f[I]pixels\f[]
Set the width of the cross hair lines.
The default is 1.
.RS
.RE
.TP
.B \-position \f[I]pos\f[]
Specifies the screen position where the cross hairs intersect.
\f[I]Pos\f[] must be in the form "\f[I]\@x,y\f[]", where \f[I]x\f[] and
\f[I]y\f[] are the window coordinates of the intersection.
.RS
.RE
.PP
Cross hairs configuration options may be also be set by the
\f[B]option\f[] command.
The resource name and class are crosshairs and Crosshairs respectively.
.PP
option add *Graph.Crosshairs.LineWidth 2 option add
*Graph.Crosshairs.Color red
.RE
.TP
.B \f[I]pathName\f[] \f[B]crosshairs off\f[]
Turns off the cross hairs.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]crosshairs on\f[]
Turns on the display of the cross hairs.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]crosshairs toggle\f[]
Toggles the current state of the cross hairs, alternately mapping and
unmapping the cross hairs.
.RS
.RE
.SS ELEMENT COMPONENTS
.PP
A data element represents a set of data.
It contains x and y vectors containing the coordinates of the data
points.
Elements can be displayed with a symbol at each data point and lines
connecting the points.
Elements also control the appearance of the data, such as the symbol
type, line width, color etc.
.PP
When new data elements are created, they are automatically added to a
list of displayed elements.
The display list controls what elements are drawn and in what order.
.PP
The following operations are available for elements.
.TP
.B \f[I]pathName\f[] \f[B]element activate\f[] \f[I]elemName\f[] ?\f[I]index\f[]?...
Specifies the data points of element \f[I]elemName\f[] to be drawn using
active foreground and background colors.
\f[I]ElemName\f[] is the name of the element and \f[I]index\f[] is a
number representing the index of the data point.
If no indices are present then all data points become active.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]element bind\f[] \f[I]tagName\f[] ?\f[I]sequence\f[]? ?\f[I]command\f[]?
Associates \f[I]command\f[] with \f[I]tagName\f[] such that whenever the
event sequence given by \f[I]sequence\f[] occurs for an element with
this tag, \f[I]command\f[] will be invoked.
The syntax is similar to the \f[B]bind\f[] command except that it
operates on graph elements, rather than widgets.
See the \f[B]bind\f[] manual entry for complete details on
\f[I]sequence\f[] and the substitutions performed on \f[I]command\f[]
before invoking it.
.RS
.PP
If all arguments are specified then a new binding is created, replacing
any existing binding for the same \f[I]sequence\f[] and
\f[I]tagName\f[].
If the first character of \f[I]command\f[] is + then \f[I]command\f[]
augments an existing binding rather than replacing it.
If no \f[I]command\f[] argument is provided then the command currently
associated with \f[I]tagName\f[] and \f[I]sequence\f[] (it\[aq]s an
error occurs if there\[aq]s no such binding) is returned.
If both \f[I]command\f[] and \f[I]sequence\f[] are missing then a list
of all the event sequences for which bindings have been defined for
\f[I]tagName\f[].
.RE
.TP
.B \f[I]pathName\f[] \f[B]element cget\f[] \f[I]elemName\f[] \f[I]option\f[]
Returns the current value of the element configuration option given by
\f[I]option\f[].
\f[I]Option\f[] may be any of the options described below for the
element \f[B]configure\f[] operation.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]element closest\f[] \f[I]x\f[] \f[I]y\f[] \f[I]varName\f[] ?\f[I]option\f[] \f[I]value\f[]?... ?\f[I]elemName\f[]?...
Searches for the data point closest to the window coordinates \f[I]x\f[]
and \f[I]y\f[].
By default, all elements are searched.
Hidden elements (see the \f[B]\-hide\f[] option is false) are ignored.
You can limit the search by specifying only the elements you want to be
considered.
\f[I]ElemName\f[] must be the name of an element that is not be hidden.
\f[I]VarName\f[] is the name of a Tcl array variable and will contain
the search results: the name of the closest element, the index of the
closest data point, and the graph coordinates of the point.
Returns 0, if no data point within the threshold distance can be found,
otherwise 1 is returned.
The following \f[I]option\f[]\-\f[I]value\f[] pairs are available.
.RS
.TP
.B \-along \f[I]direction\f[]
Search for the closest element using the following criteria:
.RS
.TP
.B x
Find closest element vertically from the given X\- coordinate.
.RS
.RE
.TP
.B y
Find the closest element horizontally from the given Y\-coordinate.
.RS
.RE
.TP
.B both
Find the closest element for the given point (using both the X and Y
coordinates).
.RS
.RE
.RE
.TP
.B \-halo \f[I]pixels\f[]
Specifies a threshold distance where selected data points are ignored.
\f[I]Pixels\f[] is a valid screen distance, such as 2 or 1.2i.
If this option isn\[aq]t specified, then it defaults to the value of the
graph\[aq]s \f[B]\-halo\f[] option.
.RS
.RE
.TP
.B \-interpolate \f[I]string\f[]
Indicates whether to consider projections that lie along the line
segments connecting data points when searching for the closest point.
The default value is 0.
The values for \f[I]string\f[] are described below.
.RS
.TP
.B no
Search only for the closest data point.
.RS
.RE
.TP
.B yes
Search includes projections that lie along the line segments connecting
the data points.
.RS
.RE
.RE
.RE
.TP
.B \f[I]pathName\f[] \f[B]element configure\f[] \f[I]elemName\f[] ?\f[I]elemName\f[]... ?\f[I]option\f[] \f[I]value\f[]?...
Queries or modifies the configuration options for elements.
Several elements can be modified at the same time.
If \f[I]option\f[] isn\[aq]t specified, a list describing all the
current options for \f[I]elemName\f[] is returned.
If \f[I]option\f[] is specified, but not \f[I]value\f[], then a list
describing the option \f[I]option\f[] is returned.
If one or more \f[I]option\f[] and \f[I]value\f[] pairs are specified,
then for each pair, the element option \f[I]option\f[] is set to
\f[I]value\f[].
The following options are valid for elements.
.RS
.TP
.B \-activepen \f[I]penName\f[]
Specifies pen to use to draw active element.
If \f[I]penName\f[] is "", no active elements will be drawn.
The default is activeLine.
.RS
.RE
.TP
.B \-bindtags \f[I]tagList\f[]
Specifies the binding tags for the element.
\f[I]TagList\f[] is a list of binding tag names.
The tags and their order will determine how events are handled for
elements.
Each tag in the list matching the current event sequence will have its
Tcl command executed.
Implicitly the name of the element is always the first tag in the list.
The default value is all.
.RS
.RE
.TP
.B \-color \f[I]color\f[]
Sets the color of the traces connecting the data points.
.RS
.RE
.TP
.B \-dashes \f[I]dashList\f[]
Sets the dash style of element line.
\f[I]DashList\f[] is a list of up to 11 numbers that alternately
represent the lengths of the dashes and gaps on the element line.
Each number must be between 1 and 255.
If \f[I]dashList\f[] is "", the lines will be solid.
.RS
.RE
.TP
.B \-data \f[I]coordList\f[]
Specifies the X\-Y coordinates of the data.
\f[I]CoordList\f[] is a list of numeric expressions representing the
X\-Y coordinate pairs of each data point.
.RS
.RE
.TP
.B \-fill \f[I]color\f[]
Sets the interior color of symbols.
If \f[I]color\f[] is "", then the interior of the symbol is transparent.
If \f[I]color\f[] is defcolor, then the color will be the same as the
\f[B]\-color\f[] option.
The default is defcolor.
.RS
.RE
.TP
.B \-hide \f[I]boolean\f[]
Indicates whether the element is displayed.
The default is no.
.RS
.RE
.TP
.B \-label \f[I]text\f[]
Sets the element\[aq]s label in the legend.
If \f[I]text\f[] is "", the element will have no entry in the legend.
The default label is the element\[aq]s name.
.RS
.RE
.TP
.B \-linewidth \f[I]pixels\f[]
Sets the width of the connecting lines between data points.
If \f[I]pixels\f[] is 0, no connecting lines will be drawn between
symbols.
The default is 0.
.RS
.RE
.TP
.B \-mapx \f[I]xAxis\f[]
Selects the X\-axis to map the element\[aq]s X\-coordinates onto.
\f[I]XAxis\f[] must be the name of an axis.
The default is x.
.RS
.RE
.TP
.B \-mapy \f[I]yAxis\f[]
Selects the Y\-axis to map the element\[aq]s Y\-coordinates onto.
\f[I]YAxis\f[] must be the name of an axis.
The default is y.
.RS
.RE
.TP
.B \-offdash \f[I]color\f[]
Sets the color of the stripes when traces are dashed (see the
\f[B]\-dashes\f[] option).
If \f[I]color\f[] is "", then the "off" pixels will represent gaps
instead of stripes.
If \f[I]color\f[] is defcolor, then the color will be the same as the
\f[B]\-color\f[] option.
The default is defcolor.
.RS
.RE
.TP
.B \-outline \f[I]color\f[]
Sets the color or the outline around each symbol.
If \f[I]color\f[] is "", then no outline is drawn.
If \f[I]color\f[] is defcolor, then the color will be the same as the
\f[B]\-color\f[] option.
The default is defcolor.
.RS
.RE
.TP
.B \-pen \f[I]penname\f[]
Set the pen to use for this element.
.RS
.RE
.TP
.B \-outlinewidth \f[I]pixels\f[]
Sets the width of the outline bordering each symbol.
If \f[I]pixels\f[] is 0, no outline will be drawn.
The default is 1.
.RS
.RE
.TP
.B \-pixels \f[I]pixels\f[]
Sets the size of symbols.
If \f[I]pixels\f[] is 0, no symbols will be drawn.
The default is 0.125i.
.RS
.RE
.TP
.B \-scalesymbols \f[I]boolean\f[]
If \f[I]boolean\f[] is true, the size of the symbols drawn for
\f[I]elemName\f[] will change with scale of the X\-axis and Y\-axis.
At the time this option is set, the current ranges of the axes are saved
as the normalized scales (i.e scale factor is 1.0) and the element is
drawn at its designated size (see the \f[B]\-pixels\f[] option).
As the scale of the axes change, the symbol will be scaled according to
the smaller of the X\-axis and Y\-axis scales.
If \f[I]boolean\f[] is false, the element\[aq]s symbols are drawn at the
designated size, regardless of axis scales.
The default is 0.
.RS
.RE
.TP
.B \-smooth \f[I]smooth\f[]
Specifies how connecting line segments are drawn between data points.
\f[I]Smooth\f[] can be either linear, step, natural, or quadratic.
If \f[I]smooth\f[] is linear, a single line segment is drawn, connecting
both data points.
When \f[I]smooth\f[] is step, two line segments are drawn.
The first is a horizontal line segment that steps the next
X\-coordinate.
The second is a vertical line, moving to the next Y\-coordinate.
Both \f[I]natural\f[] and \f[I]quadratic\f[] generate multiple segments
between data points.
If \f[I]natural\f[], the segments are generated using a cubic spline.
If \f[I]quadratic\f[], a quadratic spline is used.
The default is \f[I]linear\f[].
.RS
.RE
.TP
.B \-styles \f[I]styleList\f[]
Specifies what pen to use based on the range of weights given.
\f[I]StyleList\f[] is a list of style specifications.
Each style specification, in turn, is a list consisting of a pen name,
and optionally a minimum and maximum range.
Data points whose weight (see the \f[B]\-weight\f[] option) falls in
this range, are drawn with this pen.
If no range is specified it defaults to the index of the pen in the
list.
Note that this affects only symbol attributes.
Line attributes, such as line width, dashes, etc.
are ignored.
.RS
.RE
.TP
.B \-symbol \f[I]symbol\f[]
Specifies the symbol for data points.
\f[I]Symbol\f[] can be either square, circle, diamond, plus, cross,
splus, scross, triangle, "" (where no symbol is drawn), or a bitmap.
Bitmaps are specified as "\f[I]source\f[] ?\f[I]mask\f[]?", where
\f[I]source\f[] is the name of the bitmap, and \f[I]mask\f[] is the
bitmap\[aq]s optional mask.
The default is circle.
.RS
.RE
.TP
.B \-trace \f[I]direction\f[]
Indicates whether connecting lines between data points (whose
X\-coordinate values are either increasing or decreasing) are drawn.
\f[I]Direction\f[] must be increasing, decreasing, or both.
For example, if \f[I]direction\f[] is increasing, connecting lines will
be drawn only between those data points where X\-coordinate values are
monotonically increasing.
If \f[I]direction\f[] is both, connecting lines will be draw between all
data points.
The default is both.
.RS
.RE
.TP
.B \-weights \f[I]wVec\f[]
Specifies the weights of the individual data points.
This, with the list pen styles (see the \f[B]\-styles\f[] option),
controls how data points are drawn.
\f[I]WVec\f[] is the name of a RBC vector or a list of numeric
expressions representing the weights for each data point.
.RS
.RE
.TP
.B \-xdata \f[I]xVec\f[]
Specifies the X\-coordinates of the data.
\f[I]XVec\f[] is the name of a RBC vector or a list of numeric
expressions.
.RS
.RE
.TP
.B \-ydata \f[I]yVec\f[]
Specifies the Y\-coordinates of the data.
\f[I]YVec\f[] is the name of a RBC vector or a list of numeric
expressions.
.RS
.RE
.PP
Element configuration options may also be set by the \f[B]option\f[]
command.
The resource class is Element.
The resource name is the name of the element.
.PP
option add *Graph.Element.symbol line
.PD 0
.P
.PD
option add *Graph.e1.symbol line
.RE
.TP
.B \f[I]pathName\f[] \f[B]element create\f[] \f[I]elemName\f[] ?\f[I]option\f[] \f[I]value\f[]?...
Creates a new element \f[I]elemName\f[].
It\[aq]s an error is an element \f[I]elemName\f[] already exists.
If additional arguments are present, they specify options valid for the
element \f[B]configure\f[] operation.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]element deactivate\f[] \f[I]elemName\f[] ?\f[I]elemName\f[]?...
Deactivates all the elements matching \f[I]pattern\f[].
Elements whose names match any of the patterns given are redrawn using
their normal colors.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]element delete\f[] ?\f[I]elemName\f[]?...
Deletes all the named elements.
The graph is automatically redrawn.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]element exists\f[] \f[I]elemName\f[]
Returns 1 if an element \f[I]elemName\f[] currently exists and 0
otherwise.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]element names\f[] ?\f[I]pattern\f[]?...
Returns the elements matching one or more pattern.
If no \f[I]pattern\f[] is given, the names of all elements is returned.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]element show\f[] ?\f[I]nameList\f[]?
Queries or modifies the element display list.
The element display list designates the elements drawn and in what
order.
\f[I]NameList\f[] is a list of elements to be displayed in the order
they are named.
If there is no \f[I]nameList\f[] argument, the current display list is
returned.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]element type\f[] \f[I]elemName\f[]
Returns the type of \f[I]elemName\f[].
If the element is a bar element, the commands returns the string "bar",
otherwise it returns "line".
.RS
.RE
.SS GRID COMPONENT
.PP
Grid lines extend from the major and minor ticks of each axis
horizontally or vertically across the plotting area.
The following operations are available for grid lines.
.TP
.B \f[I]pathName\f[] \f[B]grid cget\f[] \f[I]option\f[]
Returns the current value of the grid line configuration option given by
\f[I]option\f[].
\f[I]Option\f[] may be any option described below for the grid
\f[B]configure\f[] operation.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]grid configure\f[] ?\f[I]option\f[] \f[I]value\f[]?...
Queries or modifies the configuration options for grid lines.
If \f[I]option\f[] isn\[aq]t specified, a list describing all the
current grid options for \f[I]pathName\f[] is returned.
If \f[I]option\f[] is specified, but not \f[I]value\f[], then a list
describing \f[I]option\f[] is returned.
If one or more \f[I]option\f[] and \f[I]value\f[] pairs are specified,
then for each pair, the grid line option \f[I]option\f[] is set to
\f[I]value\f[].
The following options are valid for grid lines.
.RS
.TP
.B \-color \f[I]color\f[]
Sets the color of the grid lines.
The default is black.
.RS
.RE
.TP
.B \-dashes \f[I]dashList\f[]
Sets the dash style of the grid lines.
\f[I]DashList\f[] is a list of up to 11 numbers that alternately
represent the lengths of the dashes and gaps on the grid lines.
Each number must be between 1 and 255.
If \f[I]dashList\f[] is "", the grid will be solid lines.
.RS
.RE
.TP
.B \-hide \f[I]boolean\f[]
Indicates whether the grid should be drawn.
If \f[I]boolean\f[] is true, grid lines are not shown.
The default is yes.
.RS
.RE
.TP
.B \-linewidth \f[I]pixels\f[]
Sets the width of grid lines.
The default width is 1.
.RS
.RE
.TP
.B \-mapx \f[I]xAxis\f[]
Specifies the X\-axis to display grid lines.
\f[I]XAxis\f[] must be the name of an axis or "" for no grid lines.
The default is "".
.RS
.RE
.TP
.B \-mapy \f[I]yAxis\f[]
Specifies the Y\-axis to display grid lines.
\f[I]YAxis\f[] must be the name of an axis or "" for no grid lines.
The default is y.
.RS
.RE
.TP
.B \-minor \f[I]boolean\f[]
Indicates whether the grid lines should be drawn for minor ticks.
If \f[I]boolean\f[] is true, the lines will appear at minor tick
intervals.
The default is 1.
.RS
.RE
.PP
Grid configuration options may also be set by the \f[B]option\f[]
command.
The resource name and class are grid and Grid respectively.
.PP
option add *Graph.grid.LineWidth 2
.PD 0
.P
.PD
option add *Graph.Grid.Color black
.RE
.TP
.B \f[I]pathName\f[] \f[B]grid off\f[]
Turns off the display the grid lines.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]grid on\f[]
Turns on the display the grid lines.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]grid toggle\f[]
Toggles the display of the grid.
.RS
.RE
.SS LEGEND COMPONENT
.PP
The legend displays a list of the data elements.
Each entry consists of the element\[aq]s symbol and label.
The legend can appear in any margin (the default location is in the
right margin).
It can also be positioned anywhere within the plotting area.
.PP
The following operations are valid for the legend.
.TP
.B \f[I]pathName\f[] \f[B]legend activate\f[] \f[I]pattern\f[]...
Selects legend entries to be drawn using the active legend colors and
relief.
All entries whose element names match \f[I]pattern\f[] are selected.
To be selected, the element name must match only one \f[I]pattern\f[].
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]legend bind\f[] \f[I]tagName\f[] ?\f[I]sequence\f[]? ?\f[I]command\f[]?
Associates \f[I]command\f[] with \f[I]tagName\f[] such that whenever the
event sequence given by \f[I]sequence\f[] occurs for a legend entry with
this tag, \f[I]command\f[] will be invoked.
Implicitly the element names in the entry are tags.
The syntax is similar to the \f[B]bind\f[] command except that it
operates on legend entries, rather than widgets.
See the \f[B]bind\f[] manual entry for complete details on
\f[I]sequence\f[] and the substitutions performed on \f[I]command\f[]
before invoking it.
.RS
.PP
If all arguments are specified then a new binding is created, replacing
any existing binding for the same \f[I]sequence\f[] and
\f[I]tagName\f[].
If the first character of \f[I]command\f[] is + then \f[I]command\f[]
augments an existing binding rather than replacing it.
If no \f[I]command\f[] argument is provided then the command currently
associated with \f[I]tagName\f[] and \f[I]sequence\f[] (it\[aq]s an
error occurs if there\[aq]s no such binding) is returned.
If both \f[I]command\f[] and \f[I]sequence\f[] are missing then a list
of all the event sequences for which bindings have been defined for
\f[I]tagName\f[].
.RE
.TP
.B \f[I]pathName\f[] \f[B]legend cget\f[] \f[I]option\f[]
Returns the current value of a legend configuration option.
\f[I]Option\f[] may be any option described below in the legend
\f[B]configure\f[] operation.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]legend configure\f[] ?\f[I]option\f[] \f[I]value\f[]?...
Queries or modifies the configuration options for the legend.
If \f[I]option\f[] isn\[aq]t specified, a list describing the current
legend options for \f[I]pathName\f[] is returned.
If \f[I]option\f[] is specified, but not \f[I]value\f[], then a list
describing \f[I]option\f[] is returned.
If one or more \f[I]option\f[] and \f[I]value\f[] pairs are specified,
then for each pair, the legend option \f[I]option\f[] is set to
\f[I]value\f[].
The following options are valid for the legend.
.RS
.TP
.B \-activebackground \f[I]color\f[]
Sets the background color for active legend entries.
All legend entries marked active (see the legend \f[B]activate\f[]
operation) are drawn using this background color.
.RS
.RE
.TP
.B \-activeborderwidth \f[I]pixels\f[]
Sets the width of the 3\-D border around the outside edge of the active
legend entries.
The default is 2.
.RS
.RE
.TP
.B \-activeforeground \f[I]color\f[]
Sets the foreground color for active legend entries.
All legend entries marked as active (see the legend \f[B]activate\f[]
operation) are drawn using this foreground color.
.RS
.RE
.TP
.B \-activerelief \f[I]relief\f[]
Specifies the 3\-D effect desired for active legend entries.
\f[I]Relief\f[] denotes how the interior of the entry should appear
relative to the legend; for example, raised means the entry should
appear to protrude from the legend, relative to the surface of the
legend.
The default is flat.
.RS
.RE
.TP
.B \-anchor \f[I]anchor\f[]
Tells how to position the legend relative to the positioning point for
the legend.
This is dependent on the value of the \f[B]\-position\f[] option.
The default is center.
.RS
.TP
.B left or right
The anchor describes how to position the legend vertically.
.RS
.RE
.TP
.B top or bottom
The anchor describes how to position the legend horizontally.
.RS
.RE
.TP
.B \@x,y
The anchor specifies how to position the legend relative to the
positioning point.
For example, if \f[I]anchor\f[] is center then the legend is centered on
the point; if \f[I]anchor\f[] is n then the legend will be drawn such
that the top center point of the rectangular region occupied by the
legend will be at the positioning point.
.RS
.RE
.TP
.B plotarea
The anchor specifies how to position the legend relative to the plotting
area.
For example, if \f[I]anchor\f[] is center then the legend is centered in
the plotting area; if \f[I]anchor\f[] is ne then the legend will be
drawn such that occupies the upper right corner of the plotting area.
.RS
.RE
.RE
.TP
.B \-background \f[I]color\f[]
Sets the background color of the legend.
If \f[I]color\f[] is "", the legend background with be transparent.
.RS
.RE
.TP
.B \-bindtags \f[I]tagList\f[]
Specifies the binding tags for legend entries.
\f[I]TagList\f[] is a list of binding tag names.
The tags and their order will determine how events are handled for
legend entries.
Each tag in the list matching the current event sequence will have its
Tcl command executed.
The default value is all.
.RS
.RE
.TP
.B \-borderwidth \f[I]pixels\f[]
Sets the width of the 3\-D border around the outside edge of the legend
(if such border is being drawn; the \f[B]relief\f[] option determines
this).
The default is 2 pixels.
.RS
.RE
.TP
.B \-font \f[I]fontName\f[]
\f[I]FontName\f[] specifies a font to use when drawing the labels of
each element into the legend.
The default is *\-Helvetica\-Bold\-R\-Normal\-*\-12\-120\-*.
.RS
.RE
.TP
.B \-foreground \f[I]color\f[]
Sets the foreground color of the text drawn for the element\[aq]s label.
The default is black.
.RS
.RE
.TP
.B \-hide \f[I]boolean\f[]
Indicates whether the legend should be displayed.
If \f[I]boolean\f[] is true, the legend will not be draw.
The default is no.
.RS
.RE
.TP
.B \-ipadx \f[I]pad\f[]
Sets the amount of internal padding to be added to the width of each
legend entry.
\f[I]Pad\f[] can be a list of one or two screen distances.
If \f[I]pad\f[] has two elements, the left side of the legend entry is
padded by the first distance and the right side by the second.
If \f[I]pad\f[] is just one distance, both the left and right sides are
padded evenly.
The default is 2.
.RS
.RE
.TP
.B \-ipady \f[I]pad\f[]
Sets an amount of internal padding to be added to the height of each
legend entry.
\f[I]Pad\f[] can be a list of one or two screen distances.
If \f[I]pad\f[] has two elements, the top of the entry is padded by the
first distance and the bottom by the second.
If \f[I]pad\f[] is just one distance, both the top and bottom of the
entry are padded evenly.
The default is 2.
.RS
.RE
.TP
.B \-padx \f[I]pad\f[]
Sets the padding to the left and right exteriors of the legend.
\f[I]Pad\f[] can be a list of one or two screen distances.
If \f[I]pad\f[] has two elements, the left side of the legend is padded
by the first distance and the right side by the second.
If \f[I]pad\f[] has just one distance, both the left and right sides are
padded evenly.
The default is 4.
.RS
.RE
.TP
.B \-pady \f[I]pad\f[]
Sets the padding above and below the legend.
\f[I]Pad\f[] can be a list of one or two screen distances.
If \f[I]pad\f[] has two elements, the area above the legend is padded by
the first distance and the area below by the second.
If \f[I]pad\f[] is just one distance, both the top and bottom areas are
padded evenly.
The default is 0.
.RS
.RE
.TP
.B \-position \f[I]pos\f[]
Specifies where the legend is drawn.
The \f[B]\-anchor\f[] option also affects where the legend is
positioned.
If \f[I]pos\f[] is left, left, top, or bottom, the legend is drawn in
the specified margin.
If \f[I]pos\f[] is plotarea, then the legend is drawn inside the
plotting area at a particular anchor.
If \f[I]pos\f[] is in the form "\f[I]\@x,y\f[]", where \f[I]x\f[] and
\f[I]y\f[] are the window coordinates, the legend is drawn in the
plotting area at the specified coordinates.
The default is right.
.RS
.RE
.TP
.B \-raised \f[I]boolean\f[]
Indicates whether the legend is above or below the data elements.
This matters only if the legend is in the plotting area.
If \f[I]boolean\f[] is true, the legend will be drawn on top of any
elements that may overlap it.
The default is no.
.RS
.RE
.TP
.B \-relief \f[I]relief\f[]
Specifies the 3\-D effect for the border around the legend.
\f[I]Relief\f[] specifies how the interior of the legend should appear
relative to the graph; for example, raised means the legend should
appear to protrude from the graph, relative to the surface of the graph.
The default is sunken.
.RS
.RE
.PP
Legend configuration options may also be set by the \f[B]option\f[]
command.
The resource name and class are legend and Legend respectively.
.PP
option add *Graph.legend.Foreground blue option add *Graph.Legend.Relief
raised
.RE
.TP
.B \f[I]pathName\f[] \f[B]legend deactivate\f[] \f[I]pattern\f[]...
Selects legend entries to be drawn using the normal legend colors and
relief.
All entries whose element names match \f[I]pattern\f[] are selected.
To be selected, the element name must match only one \f[I]pattern\f[].
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]legend get\f[] \f[I]pos\f[]
Returns the name of the element whose entry is at the screen position
\f[I]pos\f[] in the legend.
\f[I]Pos\f[] must be in the form "\f[I]\@x,y\f[]", where \f[I]x\f[] and
\f[I]y\f[] are window coordinates.
If the given coordinates do not lie over a legend entry, "" is returned.
.RS
.RE
.SS PEN COMPONENTS
.PP
Pens define attributes (both symbol and line style) for elements.
Pens mirror the configuration options of data elements that pertain to
how symbols and lines are drawn.
Data elements use pens to determine how they are drawn.
A data element may use several pens at once.
In this case, the pen used for a particular data point is determined
from each element\[aq]s weight vector (see the element\[aq]s
\f[B]\-weight\f[] and \f[B]\-style\f[] options).
.PP
One pen, called activeLine, is automatically created.
It\[aq]s used as the default active pen for elements.
So you can change the active attributes for all elements by simply
reconfiguring this pen.
.IP
.nf
\f[C]
\&.g\ pen\ configure\ "activeLine"\ \-color\ green
\f[]
.fi
.PP
You can create and use several pens.
To create a pen, invoke the pen component and its create operation.
.IP
.nf
\f[C]
\&.g\ pen\ create\ myPen
\f[]
.fi
.PP
You map pens to a data element using either the element\[aq]s
\f[B]\-pen\f[] or \f[B]\-activepen\f[] options.
.IP
.nf
\f[C]
\&.g\ element\ create\ "line1"\ \-xdata\ $x\ \-ydata\ $tempData\ \\
\ \ \ \ \-pen\ myPen
\f[]
.fi
.PP
An element can use several pens at once.
This is done by specifying the name of the pen in the element\[aq]s
style list (see the \f[B]\-styles\f[] option).
.IP
.nf
\f[C]
\&.g\ element\ configure\ "line1"\ \-styles\ {\ myPen\ 2.0\ 3.0\ }
\f[]
.fi
.PP
This says that any data point with a weight between 2.0 and 3.0 is to be
drawn using the pen myPen.
All other points are drawn with the element\[aq]s default attributes.
.PP
The following operations are available for pen components.
.TP
.B \f[I]pathName\f[] \f[B]pen cget\f[] \f[I]penName\f[] \f[I]option\f[]
Returns the current value of the option given by \f[I]option\f[] for
\f[I]penName\f[].
\f[I]Option\f[] may be any option described below for the pen
\f[B]configure\f[] operation.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]pen configure\f[] \f[I]penName\f[] ?\f[I]penName\f[]... ?\f[I]option\f[] \f[I]value\f[]?...
Queries or modifies the configuration options of \f[I]penName\f[].
Several pens can be modified at once.
If \f[I]option\f[] isn\[aq]t specified, a list describing the current
options for \f[I]penName\f[] is returned.
If \f[I]option\f[] is specified, but not \f[I]value\f[], then a list
describing \f[I]option\f[] is returned.
If one or more \f[I]option\f[] and \f[I]value\f[] pairs are specified,
then for each pair, the pen option \f[I]option\f[] is set to
\f[I]value\f[].
The following options are valid for pens.
.RS
.TP
.B \-color \f[I]color\f[]
Sets the color of the traces connecting the data points.
.RS
.RE
.TP
.B \-dashes \f[I]dashList\f[]
Sets the dash style of element line.
\f[I]DashList\f[] is a list of up to 11 numbers that alternately
represent the lengths of the dashes and gaps on the element line.
Each number must be between 1 and 255.
If \f[I]dashList\f[] is "", the lines will be solid.
.RS
.RE
.TP
.B \-fill \f[I]color\f[]
Sets the interior color of symbols.
If \f[I]color\f[] is "", then the interior of the symbol is transparent.
If \f[I]color\f[] is defcolor, then the color will be the same as the
\f[B]\-color\f[] option.
The default is defcolor.
.RS
.RE
.TP
.B \-linewidth \f[I]pixels\f[]
Sets the width of the connecting lines between data points.
If \f[I]pixels\f[] is 0, no connecting lines will be drawn between
symbols.
The default is 0.
.RS
.RE
.TP
.B \-offdash \f[I]color\f[]
Sets the color of the stripes when traces are dashed (see the
\f[B]\-dashes\f[] option).
If \f[I]color\f[] is "", then the "off" pixels will represent gaps
instead of stripes.
If \f[I]color\f[] is defcolor, then the color will be the same as the
\f[B]\-color\f[] option.
The default is defcolor.
.RS
.RE
.TP
.B \-outline \f[I]color\f[]
Sets the color or the outline around each symbol.
If \f[I]color\f[] is "", then no outline is drawn.
If \f[I]color\f[] is defcolor, then the color will be the same as the
\f[B]\-color\f[] option.
The default is defcolor.
.RS
.RE
.TP
.B \-outlinewidth \f[I]pixels\f[]
Sets the width of the outline bordering each symbol.
If \f[I]pixels\f[] is 0, no outline will be drawn.
The default is 1.
.RS
.RE
.TP
.B \-pixels \f[I]pixels\f[]
Sets the size of symbols.
If \f[I]pixels\f[] is 0, no symbols will be drawn.
The default is 0.125i.
.RS
.RE
.TP
.B \-symbol \f[I]symbol\f[]
Specifies the symbol for data points.
\f[I]Symbol\f[] can be either square, circle, diamond, plus, cross,
splus, scross, triangle, "" (where no symbol is drawn), or a bitmap.
Bitmaps are specified as "\f[I]source\f[] ?\f[I]mask\f[]?", where
\f[I]source\f[] is the name of the bitmap, and \f[I]mask\f[] is the
bitmap\[aq]s optional mask.
The default is circle.
.RS
.RE
.TP
.B \-type \f[I]elemType\f[]
Specifies the type of element the pen is to be used with.
This option should only be employed when creating the pen.
This is for those that wish to mix different types of elements (bars and
lines) on the same graph.
The default type is "line".
.RS
.RE
.PP
Pen configuration options may be also be set by the \f[B]option\f[]
command.
The resource class is Pen.
The resource names are the names of the pens.
.PP
option add *Graph.Pen.Color blue
.PD 0
.P
.PD
option add *Graph.activeLine.color green
.RE
.TP
.B \f[I]pathName\f[] \f[B]pen create\f[] \f[I]penName\f[] ?\f[I]option\f[] \f[I]value\f[]?...
Creates a new pen by the name \f[I]penName\f[].
No pen by the same name can already exist.
\f[I]Option\f[] and \f[I]value\f[] are described in above in the pen
\f[B]configure\f[] operation.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]pen delete\f[] ?\f[I]penName\f[]?...
Deletes the named pens.
A pen is not really deleted until it is not longer in use, so it\[aq]s
safe to delete pens mapped to elements.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]pen names\f[] ?\f[I]pattern\f[]?...
Returns a list of pens matching zero or more patterns.
If no \f[I]pattern\f[] argument is give, the names of all pens are
returned.
.RS
.RE
.SS POSTSCRIPT COMPONENT
.PP
The graph can generate encapsulated PostScript output.
There are several configuration options you can specify to control how
the plot will be generated.
You can change the page dimensions and borders.
The plot itself can be scaled, centered, or rotated to landscape.
The PostScript output can be written directly to a file or returned
through the interpreter.
.PP
The following postscript operations are available.
.TP
.B \f[I]pathName\f[] \f[B]postscript cget\f[] \f[I]option\f[]
Returns the current value of the postscript option given by
\f[I]option\f[].
\f[I]Option\f[] may be any option described below for the postscript
\f[B]configure\f[] operation.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]postscript configure\f[] ?\f[I]option\f[] \f[I]value\f[]?...
Queries or modifies the configuration options for PostScript generation.
If \f[I]option\f[] isn\[aq]t specified, a list describing the current
postscript options for \f[I]pathName\f[] is returned.
If \f[I]option\f[] is specified, but not \f[I]value\f[], then a list
describing \f[I]option\f[] is returned.
If one or more \f[I]option\f[] and \f[I]value\f[] pairs are specified,
then for each pair, the postscript option \f[I]option\f[] is set to
\f[I]value\f[].
The following postscript options are available.
.RS
.TP
.B \-center \f[I]boolean\f[]
Indicates whether the plot should be centered on the PostScript page.
If \f[I]boolean\f[] is false, the plot will be placed in the upper left
corner of the page.
The default is 1.
.RS
.RE
.TP
.B \-colormap \f[I]varName\f[]
\f[I]VarName\f[] must be the name of a global array variable that
specifies a color mapping from the X color name to PostScript.
Each element of \f[I]varName\f[] must consist of PostScript code to set
a particular color value (e.g.
``1.0 1.0 0.0 setrgbcolor\[aq]\[aq]).
When generating color information in PostScript, the array variable
\f[I]varName\f[] is checked if an element of the name as the color
exists.
If so, it uses its value as the PostScript command to set the color.
If this option hasn\[aq]t been specified, or if there isn\[aq]t an entry
in \f[I]varName\f[] for a given color, then it uses the red, green, and
blue intensities from the X color.
.RS
.RE
.TP
.B \-colormode \f[I]mode\f[]
Specifies how to output color information.
\f[I]Mode\f[] must be either color (for full color output), gray
(convert all colors to their gray\-scale equivalents) or mono (convert
foreground colors to black and background colors to white).
The default mode is color.
.RS
.RE
.TP
.B \-fontmap \f[I]varName\f[]
\f[I]VarName\f[] must be the name of a global array variable that
specifies a font mapping from the X font name to PostScript.
Each element of \f[I]varName\f[] must consist of a Tcl list with one or
two elements; the name and point size of a PostScript font.
When outputting PostScript commands for a particular font, the array
variable \f[I]varName\f[] is checked to see if an element by the
specified font exists.
If there is such an element, then the font information contained in that
element is used in the PostScript output.
(If the point size is omitted from the list, the point size of the X
font is used).
Otherwise the X font is examined in an attempt to guess what PostScript
font to use.
This works only for fonts whose foundry property is \f[I]Adobe\f[] (such
as Times, Helvetica, Courier, etc.).
If all of this fails then the font defaults to Helvetica\-Bold.
.RS
.RE
.TP
.B \-decorations \f[I]boolean\f[]
Indicates whether PostScript commands to generate color backgrounds and
3\-D borders will be output.
If \f[I]boolean\f[] is false, the background will be white and no 3\-D
borders will be generated.
The default is 1.
.RS
.RE
.TP
.B \-height \f[I]pixels\f[]
Sets the height of the plot.
This lets you print the graph with a height different from the one drawn
on the screen.
If \f[I]pixels\f[] is 0, the height is the same as the widget\[aq]s
height.
The default is 0.
.RS
.RE
.TP
.B \-landscape \f[I]boolean\f[]
If \f[I]boolean\f[] is true, this specifies the printed area is to be
rotated 90 degrees.
In non\-rotated output the X\-axis of the printed area runs along the
short dimension of the page (``portrait\[aq]\[aq] orientation); in
rotated output the X\-axis runs along the long dimension of the page
(``landscape\[aq]\[aq] orientation).
Defaults to 0.
.RS
.RE
.TP
.B \-maxpect \f[I]boolean\f[]
Indicates to scale the plot so that it fills the PostScript page.
The aspect ratio of the graph is still retained.
The default is 0.
.RS
.RE
.TP
.B \-padx \f[I]pad\f[]
Sets the horizontal padding for the left and right page borders.
The borders are exterior to the plot.
\f[I]Pad\f[] can be a list of one or two screen distances.
If \f[I]pad\f[] has two elements, the left border is padded by the first
distance and the right border by the second.
If \f[I]pad\f[] has just one distance, both the left and right borders
are padded evenly.
The default is 1i.
.RS
.RE
.TP
.B \-pady \f[I]pad\f[]
Sets the vertical padding for the top and bottom page borders.
The borders are exterior to the plot.
\f[I]Pad\f[] can be a list of one or two screen distances.
If \f[I]pad\f[] has two elements, the top border is padded by the first
distance and the bottom border by the second.
If \f[I]pad\f[] has just one distance, both the top and bottom borders
are padded evenly.
The default is 1i.
.RS
.RE
.TP
.B \-paperheight \f[I]pixels\f[]
Sets the height of the postscript page.
This can be used to select between different page sizes (letter, A4,
etc).
The default height is 11.0i.
.RS
.RE
.TP
.B \-paperwidth \f[I]pixels\f[]
Sets the width of the postscript page.
This can be used to select between different page sizes (letter, A4,
etc).
The default width is 8.5i.
.RS
.RE
.TP
.B \-width \f[I]pixels\f[]
Sets the width of the plot.
This lets you generate a plot of a width different from that of the
widget.
If \f[I]pixels\f[] is 0, the width is the same as the widget\[aq]s
width.
The default is 0.
.RS
.RE
.PP
Postscript configuration options may be also be set by the
\f[B]option\f[] command.
The resource name and class are postscript and Postscript respectively.
.PP
option add *Graph.postscript.Decorations false option add
*Graph.Postscript.Landscape true
.RE
.TP
.B \f[I]pathName\f[] \f[B]postscript output\f[] ?\f[I]fileName\f[]? ?\f[I]option\f[] \f[I]value\f[]?...
Outputs a file of encapsulated PostScript.
If a \f[I]fileName\f[] argument isn\[aq]t present, the command returns
the PostScript.
If any \f[I]option\-value\f[] pairs are present, they set configuration
options controlling how the PostScript is generated.
\f[I]Option\f[] and \f[I]value\f[] can be anything accepted by the
postscript \f[B]configure\f[] operation above.
.RS
.RE
.SS MARKER COMPONENTS
.PP
Markers are simple drawing procedures used to annotate or highlight
areas of the graph.
Markers have various types: text strings, bitmaps, images, connected
lines, windows, or polygons.
They can be associated with a particular element, so that when the
element is hidden or un\- hidden, so is the marker.
By default, markers are the last items drawn, so that data elements will
appear in behind them.
You can change this by configuring the \f[B]\-under\f[] option.
.PP
Markers, in contrast to elements, don\[aq]t affect the scaling of the
coordinate axes.
They can also have \f[I]elastic\f[] coordinates (specified by \-Inf and
Inf respectively) that translate into the minimum or maximum limit of
the axis.
For example, you can place a marker so it always remains in the lower
left corner of the plotting area, by using the coordinates \-Inf,\-Inf.
.PP
The following operations are available for markers.
.TP
.B \f[I]pathName\f[] \f[B]marker after\f[] \f[I]markerId\f[] ?\f[I]afterId\f[]?
Changes the order of the markers, drawing the first marker after the
second.
If no second \f[I]afterId\f[] argument is specified, the marker is
placed at the end of the display list.
This command can be used to control how markers are displayed since
markers are drawn in the order of this display list.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]marker before\f[] \f[I]markerId\f[] ?\f[I]beforeId\f[]?
Changes the order of the markers, drawing the first marker before the
second.
If no second \f[I]beforeId\f[] argument is specified, the marker is
placed at the beginning of the display list.
This command can be used to control how markers are displayed since
markers are drawn in the order of this display list.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]marker bind\f[] \f[I]tagName\f[] ?\f[I]sequence\f[]? ?\f[I]command\f[]?
Associates \f[I]command\f[] with \f[I]tagName\f[] such that whenever the
event sequence given by \f[I]sequence\f[] occurs for a marker with this
tag, \f[I]command\f[] will be invoked.
The syntax is similar to the \f[B]bind\f[] command except that it
operates on graph markers, rather than widgets.
See the \f[B]bind\f[] manual entry for complete details on
\f[I]sequence\f[] and the substitutions performed on \f[I]command\f[]
before invoking it.
.RS
.PP
If all arguments are specified then a new binding is created, replacing
any existing binding for the same \f[I]sequence\f[] and
\f[I]tagName\f[].
If the first character of \f[I]command\f[] is + then \f[I]command\f[]
augments an existing binding rather than replacing it.
If no \f[I]command\f[] argument is provided then the command currently
associated with \f[I]tagName\f[] and \f[I]sequence\f[] (it\[aq]s an
error occurs if there\[aq]s no such binding) is returned.
If both \f[I]command\f[] and \f[I]sequence\f[] are missing then a list
of all the event sequences for which bindings have been defined for
\f[I]tagName\f[].
.RE
.TP
.B \f[I]pathName\f[] \f[B]marker cget\f[] \f[I]option\f[]
Returns the current value of the marker configuration option given by
\f[I]option\f[].
\f[I]Option\f[] may be any option described below in the
\f[B]configure\f[] operation.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]marker configure\f[] \f[I]markerId\f[] ?\f[I]option\f[] \f[I]value\f[]?...
Queries or modifies the configuration options for markers.
If \f[I]option\f[] isn\[aq]t specified, a list describing the current
options for \f[I]markerId\f[] is returned.
If \f[I]option\f[] is specified, but not \f[I]value\f[], then a list
describing \f[I]option\f[] is returned.
If one or more \f[I]option\f[] and \f[I]value\f[] pairs are specified,
then for each pair, the marker option \f[I]option\f[] is set to
\f[I]value\f[].
.RS
.PP
The following options are valid for all markers.
Each type of marker also has its own type\-specific options.
They are described in the sections below.
.TP
.B \-bindtags \f[I]tagList\f[]
Specifies the binding tags for the marker.
\f[I]TagList\f[] is a list of binding tag names.
The tags and their order will determine how events for markers are
handled.
Each tag in the list matching the current event sequence will have its
Tcl command executed.
Implicitly the name of the marker is always the first tag in the list.
The default value is all.
.RS
.RE
.TP
.B \-coords \f[I]coordList\f[]
Specifies the coordinates of the marker.
\f[I]CoordList\f[] is a list of graph coordinates.
The number of coordinates required is dependent on the type of marker.
Text, image, and window markers need only two coordinates (an X\-Y
coordinate).
Bitmap markers can take either two or four coordinates (if four, they
represent the corners of the bitmap).
Line markers need at least four coordinates, polygons at least six.
If \f[I]coordList\f[] is "", the marker will not be displayed.
The default is "".
.RS
.RE
.TP
.B \-element \f[I]elemName\f[]
Links the marker with the element \f[I]elemName\f[].
The marker is drawn only if the element is also currently displayed (see
the element\[aq]s \f[B]show\f[] operation).
If \f[I]elemName\f[] is "", the marker is always drawn.
The default is "".
.RS
.RE
.TP
.B \-hide \f[I]boolean\f[]
Indicates whether the marker is drawn.
If \f[I]boolean\f[] is true, the marker is not drawn.
The default is no.
.RS
.RE
.TP
.B \-mapx \f[I]xAxis\f[]
Specifies the X\-axis to map the marker\[aq]s X\-coordinates onto.
\f[I]XAxis\f[] must the name of an axis.
The default is x.
.RS
.RE
.TP
.B \-mapy \f[I]yAxis\f[]
Specifies the Y\-axis to map the marker\[aq]s Y\-coordinates onto.
\f[I]YAxis\f[] must the name of an axis.
The default is y.
.RS
.RE
.TP
.B \-name \f[I]markerId\f[]
Changes the identifier for the marker.
The identifier \f[I]markerId\f[] can not already be used by another
marker.
If this option isn\[aq]t specified, the marker\[aq]s name is uniquely
generated.
.RS
.RE
.TP
.B \-under \f[I]boolean\f[]
Indicates whether the marker is drawn below/above data elements.
If \f[I]boolean\f[] is true, the marker is be drawn underneath the data
element symbols and lines.
Otherwise, the marker is drawn on top of the element.
The default is 0.
.RS
.RE
.TP
.B \-xoffset \f[I]pixels\f[]
Specifies a screen distance to offset the marker horizontally.
\f[I]Pixels\f[] is a valid screen distance, such as 2 or 1.2i.
The default is 0.
.RS
.RE
.TP
.B \-yoffset \f[I]pixels\f[]
Specifies a screen distance to offset the markers vertically.
\f[I]Pixels\f[] is a valid screen distance, such as 2 or 1.2i.
The default is 0.
.RS
.RE
.PP
Marker configuration options may also be set by the \f[B]option\f[]
command.
The resource class is either BitmapMarker, ImageMarker, LineMarker,
PolygonMarker, TextMarker, or WindowMarker, depending on the type of
marker.
The resource name is the name of the marker.
.PP
option add *Graph.TextMarker.Foreground white option add
*Graph.BitmapMarker.Foreground white option add *Graph.m1.Background
blue
.RE
.TP
.B \f[I]pathName\f[] \f[B]marker create\f[] \f[I]type\f[] ?\f[I]option\f[] \f[I]value\f[]?...
Creates a marker of the selected type.
\f[I]Type\f[] may be either text, line, bitmap, image, polygon, or
window.
This command returns the marker identifier, used as the
\f[I]markerId\f[] argument in the other marker\-related commands.
If the \f[B]\-name\f[] option is used, this overrides the normal marker
identifier.
If the name provided is already used for another marker, the new marker
will replace the old.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]marker delete\f[] ?\f[I]name\f[]?...
Removes one of more markers.
The graph will automatically be redrawn without the marker..
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]marker exists\f[] \f[I]markerId\f[]
Returns 1 if the marker \f[I]markerId\f[] exists and 0 otherwise.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]marker names\f[] ?\f[I]pattern\f[]?
Returns the names of all the markers that currently exist.
If \f[I]pattern\f[] is supplied, only those markers whose names match it
will be returned.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]marker type\f[] \f[I]markerId\f[]
Returns the type of the marker given by \f[I]markerId\f[], such as line
or text.
If \f[I]markerId\f[] is not a valid a marker identifier, "" is returned.
.RS
.RE
.SS BITMAP MARKERS
.PP
A bitmap marker displays a bitmap.
The size of the bitmap is controlled by the number of coordinates
specified.
If two coordinates, they specify the position of the top\-left corner of
the bitmap.
The bitmap retains its normal width and height.
If four coordinates, the first and second pairs of coordinates represent
the corners of the bitmap.
The bitmap will be stretched or reduced as necessary to fit into the
bounding rectangle.
.PP
Bitmap markers are created with the marker\[aq]s \f[B]create\f[]
operation in the form: \f[I]pathName\f[] \f[B]marker create bitmap\f[]
?\f[I]option\f[] \f[I]value\f[]?...
There may be many \f[I]option\f[]\-\f[I]value\f[] pairs, each sets a
configuration options for the marker.
These same \f[I]option\f[]\-\f[I]value\f[] pairs may be used with the
marker\[aq]s \f[B]configure\f[] operation.
.PP
The following options are specific to bitmap markers:
.TP
.B \-background \f[I]color\f[]
Same as the \f[B]\-fill\f[] option.
.RS
.RE
.TP
.B \-bitmap \f[I]bitmap\f[]
Specifies the bitmap to be displayed.
If \f[I]bitmap\f[] is "", the marker will not be displayed.
The default is "".
.RS
.RE
.TP
.B \-fill \f[I]color\f[]
Sets the background color of the bitmap.
If \f[I]color\f[] is the empty string, no background will be
transparent.
The default background color is "".
.RS
.RE
.TP
.B \-foreground \f[I]color\f[]
Same as the \f[B]\-outline\f[] option.
.RS
.RE
.TP
.B \-mask \f[I]mask\f[]
Specifies a mask for the bitmap to be displayed.
This mask is a bitmap itself, denoting the pixels that are transparent.
If \f[I]mask\f[] is "", all pixels of the bitmap will be drawn.
The default is "".
.RS
.RE
.TP
.B \-outline \f[I]color\f[]
Sets the foreground color of the bitmap.
The default value is black.
.RS
.RE
.TP
.B \-rotate \f[I]theta\f[]
Sets the rotation of the bitmap.
\f[I]Theta\f[] is a real number representing the angle of rotation in
degrees.
The marker is first rotated and then placed according to its anchor
position.
The default rotation is 0.0.
.RS
.RE
.SS IMAGE MARKERS
.PP
A image marker displays an image.
Image markers are created with the marker\[aq]s \f[B]create\f[]
operation in the form: \f[I]pathName\f[] \f[B]marker create image\f[]
?\f[I]option\f[] \f[I]value\f[]?...
There may be many \f[I]option\f[]\-\f[I]value\f[] pairs, each sets a
configuration option for the marker.
These same \f[I]option\f[]\-\f[I]value\f[] pairs may be used with the
marker\[aq]s \f[B]configure\f[] operation.
.PP
The following options are specific to image markers:
.TP
.B \-anchor \f[I]anchor\f[]
\f[I]Anchor\f[] tells how to position the image relative to the
positioning point for the image.
For example, if \f[I]anchor\f[] is center then the image is centered on
the point; if \f[I]anchor\f[] is n then the image will be drawn such
that the top center point of the rectangular region occupied by the
image will be at the positioning point.
This option defaults to center.
.RS
.RE
.TP
.B \-image \f[I]image\f[]
Specifies the image to be drawn.
If \f[I]image\f[] is "", the marker will not be drawn.
The default is "".
.RS
.RE
.SS LINE MARKERS
.PP
A line marker displays one or more connected line segments.
Line markers are created with marker\[aq]s \f[B]create\f[] operation in
the form: \f[I]pathName\f[] \f[B]marker create line\f[] ?\f[I]option\f[]
\f[I]value\f[]?...
There may be many \f[I]option\f[]\-\f[I]value\f[] pairs, each sets a
configuration option for the marker.
These same \f[I]option\f[]\-\f[I]value\f[] pairs may be used with the
marker\[aq]s \f[B]configure\f[] operation.
.PP
The following options are specific to line markers:
.TP
.B \-dashes \f[I]dashList\f[]
Sets the dash style of the line.
\f[I]DashList\f[] is a list of up to 11 numbers that alternately
represent the lengths of the dashes and gaps on the line.
Each number must be between 1 and 255.
If \f[I]dashList\f[] is "", the marker line will be solid.
.RS
.RE
.TP
.B \-fill \f[I]color\f[]
Sets the background color of the line.
This color is used with striped lines (see the \f[B]\-fdashes\f[]
option).
If \f[I]color\f[] is the empty string, no background color is drawn (the
line will be dashed, not striped).
The default background color is "".
.RS
.RE
.TP
.B \-linewidth \f[I]pixels\f[]
Sets the width of the lines.
The default width is 0.
.RS
.RE
.TP
.B \-outline \f[I]color\f[]
Sets the foreground color of the line.
The default value is black.
.RS
.RE
.TP
.B \-stipple \f[I]bitmap\f[]
Specifies a stipple pattern used to draw the line, rather than a solid
line.
\f[I]Bitmap\f[] specifies a bitmap to use as the stipple pattern.
If \f[I]bitmap\f[] is "", then the line is drawn in a solid fashion.
The default is "".
.RS
.RE
.SS POLYGON MARKERS
.PP
A polygon marker displays a closed region described as two or more
connected line segments.
It is assumed the first and last points are connected.
Polygon markers are created using the marker \f[B]create\f[] operation
in the form: \f[I]pathName\f[] \f[B]marker create polygon\f[]
?\f[I]option\f[] \f[I]value\f[]?...
There may be many \f[I]option\f[]\-\f[I]value\f[] pairs, each sets a
configuration option for the marker.
These same \f[I]option\f[]\-\f[I]value\f[] pairs may be used with the
\f[B]marker configure\f[] command to change the marker\[aq]s
configuration.
The following options are supported for polygon markers:
.TP
.B \-dashes \f[I]dashList\f[]
Sets the dash style of the outline of the polygon.
\f[I]DashList\f[] is a list of up to 11 numbers that alternately
represent the lengths of the dashes and gaps on the outline.
Each number must be between 1 and 255.
If \f[I]dashList\f[] is "", the outline will be a solid line.
.RS
.RE
.TP
.B \-fill \f[I]color\f[]
Sets the fill color of the polygon.
If \f[I]color\f[] is "", then the interior of the polygon is
transparent.
The default is white.
.RS
.RE
.TP
.B \-linewidth \f[I]pixels\f[]
Sets the width of the outline of the polygon.
If \f[I]pixels\f[] is zero, no outline is drawn.
The default is 0.
.RS
.RE
.TP
.B \-outline \f[I]color\f[]
Sets the color of the outline of the polygon.
If the polygon is stippled (see the \f[B]\-stipple\f[] option), then
this represents the foreground color of the stipple.
The default is black.
.RS
.RE
.TP
.B \-stipple \f[I]bitmap\f[]
Specifies that the polygon should be drawn with a stippled pattern
rather than a solid color.
\f[I]Bitmap\f[] specifies a bitmap to use as the stipple pattern.
If \f[I]bitmap\f[] is "", then the polygon is filled with a solid color
(if the \f[B]\-fill\f[] option is set).
The default is "".
.RS
.RE
.SS TEXT MARKERS
.PP
A text marker displays a string of characters on one or more lines of
text.
Embedded newlines cause line breaks.
They may be used to annotate regions of the graph.
Text markers are created with the \f[B]create\f[] operation in the form:
\f[I]pathName\f[] \f[B]marker create text\f[] ?\f[I]option\f[]
\f[I]value\f[]?...
There may be many \f[I]option\f[]\-\f[I]value\f[] pairs, each sets a
configuration option for the text marker.
These same \f[I]option\f[]\-\f[I]value\f[] pairs may be used with the
marker\[aq]s \f[B]configure\f[] operation.
.PP
The following options are specific to text markers:
.TP
.B \-anchor \f[I]anchor\f[]
\f[I]Anchor\f[] tells how to position the text relative to the
positioning point for the text.
For example, if \f[I]anchor\f[] is center then the text is centered on
the point; if \f[I]anchor\f[] is n then the text will be drawn such that
the top center point of the rectangular region occupied by the text will
be at the positioning point.
This default is center.
.RS
.RE
.TP
.B \-background \f[I]color\f[]
Same as the \f[B]\-fill\f[] option.
.RS
.RE
.TP
.B \-font \f[I]fontName\f[]
Specifies the font of the text.
The default is *\-Helvetica\- Bold\-R\-Normal\-*\-120\-*.
.RS
.RE
.TP
.B \-fill \f[I]color\f[]
Sets the background color of the text.
If \f[I]color\f[] is the empty string, no background will be
transparent.
The default background color is "".
.RS
.RE
.TP
.B \-foreground \f[I]color\f[]
Same as the \f[B]\-outline\f[] option.
.RS
.RE
.TP
.B \-justify \f[I]justify\f[]
Specifies how the text should be justified.
This matters only when the marker contains more than one line of text.
\f[I]Justify\f[] must be left, right, or center.
The default is center.
.RS
.RE
.TP
.B \-outline \f[I]color\f[]
Sets the color of the text.
The default value is black.
.RS
.RE
.TP
.B \-padx \f[I]pad\f[]
Sets the padding to the left and right exteriors of the text.
\f[I]Pad\f[] can be a list of one or two screen distances.
If \f[I]pad\f[] has two elements, the left side of the text is padded by
the first distance and the right side by the second.
If \f[I]pad\f[] has just one distance, both the left and right sides are
padded evenly.
The default is 4.
.RS
.RE
.TP
.B \-pady \f[I]pad\f[]
Sets the padding above and below the text.
\f[I]Pad\f[] can be a list of one or two screen distances.
If \f[I]pad\f[] has two elements, the area above the text is padded by
the first distance and the area below by the second.
If \f[I]pad\f[] is just one distance, both the top and bottom areas are
padded evenly.
The default is 4.
.RS
.RE
.TP
.B \-rotate \f[I]theta\f[]
Specifies the number of degrees to rotate the text.
\f[I]Theta\f[] is a real number representing the angle of rotation.
The marker is first rotated along its center and is then drawn according
to its anchor position.
The default is 0.0.
.RS
.RE
.TP
.B \-text \f[I]text\f[]
Specifies the text of the marker.
The exact way the text is displayed may be affected by other options
such as \f[B]\-anchor\f[] or \f[B]\-rotate\f[].
.RS
.RE
.SS WINDOW MARKERS
.PP
A window marker displays a widget at a given position.
Window markers are created with the marker\[aq]s \f[B]create\f[]
operation in the form: \f[I]pathName\f[] \f[B]marker create window\f[]
?\f[I]option\f[] \f[I]value\f[]?...
There may be many \f[I]option\f[]\-\f[I]value\f[] pairs, each sets a
configuration option for the marker.
These same \f[I]option\f[]\-\f[I]value\f[] pairs may be used with the
marker\[aq]s \f[B]configure\f[] command.
.PP
The following options are specific to window markers:
.TP
.B \-anchor \f[I]anchor\f[]
\f[I]Anchor\f[] tells how to position the widget relative to the
positioning point for the widget.
For example, if \f[I]anchor\f[] is center then the widget is centered on
the point; if \f[I]anchor\f[] is n then the widget will be displayed
such that the top center point of the rectangular region occupied by the
widget will be at the positioning point.
This option defaults to center.
.RS
.RE
.TP
.B \-height \f[I]pixels\f[]
Specifies the height to assign to the marker\[aq]s window.
If this option isn\[aq]t specified, or if it is specified as "", then
the window is given whatever height the widget requests internally.
.RS
.RE
.TP
.B \-width \f[I]pixels\f[]
Specifies the width to assign to the marker\[aq]s window.
If this option isn\[aq]t specified, or if it is specified as "", then
the window is given whatever width the widget requests internally.
.RS
.RE
.TP
.B \-window \f[I]pathName\f[]
Specifies the widget to be managed by the graph.
\f[I]PathName\f[] must be a child of the \f[B]graph\f[] widget.
.RS
.RE
.SH GRAPH COMPONENT BINDINGS
.PP
Specific graph components, such as elements, markers and legend entries,
can have a command trigger when event occurs in them, much like canvas
items in Tk\[aq]s canvas widget.
Not all event sequences are valid.
The only binding events that may be specified are those related to the
mouse and keyboard (such as \f[B]Enter\f[], \f[B]Leave\f[],
\f[B]ButtonPress\f[], \f[B]Motion\f[], and \f[B]KeyPress\f[]).
.PP
Only one element or marker can be picked during an event.
This means, that if the mouse is directly over both an element and a
marker, only the uppermost component is selected.
This isn\[aq]t true for legend entries.
Both a legend entry and an element (or marker) binding commands will be
invoked if both items are picked.
.PP
It is possible for multiple bindings to match a particular event.
This could occur, for example, if one binding is associated with the
element name and another is associated with one of the element\[aq]s
tags (see the \f[B]\-bindtags\f[] option).
When this occurs, all of the matching bindings are invoked.
A binding associated with the element name is invoked first, followed by
one binding for each of the element\[aq]s bindtags.
If there are multiple matching bindings for a single tag, then only the
most specific binding is invoked.
A continue command in a binding script terminates that script, and a
break command terminates that script and skips any remaining scripts for
the event, just as for the bind command.
.PP
The \f[B]\-bindtags\f[] option for these components controls addition
tag names which can be matched.
Implicitly elements and markers always have tags matching their names.
Setting the value of the \f[B]\-bindtags\f[] option doesn\[aq]t change
this.
.SH C LANGUAGE API
.PP
You can manipulate data elements from the C language.
There may be situations where it is too expensive to translate the data
values from ASCII strings.
Or you might want to read data in a special file format.
.PP
Data can manipulated from the C language using RBC vectors.
You specify the X\-Y data coordinates of an element as vectors and
manipulate the vector from C.
The graph will be redrawn automatically after the vectors are updated.
.PP
From Tcl, create the vectors and configure the element to use them.
.IP
.nf
\f[C]
vector\ X\ Y
\&.g\ element\ configure\ line1\ \-xdata\ X\ \-ydata\ Y
\f[]
.fi
.PP
To set data points from C, you pass the values as arrays of doubles
using the \f[B]Rbc_ResetVector\f[] call.
The vector is reset with the new data and at the next idle point (when
Tk re\-enters its event loop), the graph will be redrawn automatically.
.IP
.nf
\f[C]
#include\ <tcl.h>
#include\ <rbc.h>

register\ int\ i;
Rbc_Vector\ *xVec,\ *yVec;
double\ x[50],\ y[50];

/*\ Get\ the\ RBC\ vectors\ "X"\ and\ "Y"\ (created\ above\ from\ Tcl)\ */
if\ ((Rbc_GetVector(interp,\ "X",\ &xVec)\ !=\ TCL_OK)\ ||
\ \ \ \ (Rbc_GetVector(interp,\ "Y",\ &yVec)\ !=\ TCL_OK))\ {
\ \ \ \ return\ TCL_ERROR;
}

for\ (i\ =\ 0;\ i\ <\ 50;\ i++)\ {
\ \ \ \ x[i]\ =\ i\ *\ 0.02;
\ \ \ \ y[i]\ =\ sin(x[i]);
}

/*\ Put\ the\ data\ into\ RBC\ vectors\ */
if\ ((Rbc_ResetVector(xVec,\ x,\ 50,\ 50,\ TCL_VOLATILE)\ !=\ TCL_OK)\ ||
\ \ \ \ (Rbc_ResetVector(yVec,\ y,\ 50,\ 50,\ TCL_VOLATILE)\ !=\ TCL_OK))\ {
\ \ \ return\ TCL_ERROR;
}
\f[]
.fi
.PP
See the \f[B]vector\f[] manual page for more details.
.SH SPEED TIPS
.PP
There may be cases where the graph needs to be drawn and updated as
quickly as possible.
If drawing speed becomes a big problem, here are a few tips to speed up
displays.
.IP \[bu] 2
Try to minimize the number of data points.
The more data points the looked at, the more work the graph must do.
.IP \[bu] 2
If your data is generated as floating point values, the time required to
convert the data values to and from ASCII strings can be significant,
especially when there any many data points.
You can avoid the redundant string\-to\-decimal conversions using the C
API to RBC vectors.
.IP \[bu] 2
Data elements without symbols are drawn faster than with symbols.
Set the data element\[aq]s \f[B]\-symbol\f[] option to none.
If you need to draw symbols, try using the simple symbols such as splus
and scross.
.IP \[bu] 2
Don\[aq]t stipple or dash the element.
Solid lines are much faster.
.IP \[bu] 2
If you update data elements frequently, try turning off the widget\[aq]s
\f[B]\-bufferelements\f[] option.
When the graph is first displayed, it draws data elements into an
internal pixmap.
The pixmap acts as a cache, so that when the graph needs to be redrawn
again, and the data elements or coordinate axes haven\[aq]t changed, the
pixmap is simply copied to the screen.
This is especially useful when you are using markers to highlight points
and regions on the graph.
But if the graph is updated frequently, changing either the element data
or coordinate axes, the buffering becomes redundant.
.SH LIMITATIONS
.PP
Auto\-scale routines do not use requested min/max limits as boundaries
when the axis is logarithmically scaled.
.PP
The PostScript output generated for polygons with more than 1500 points
may exceed the limits of some printers (See PostScript Language
Reference Manual, page 568).
The work\-around is to break the polygon into separate pieces.
.SH KEYWORDS
.PP
graph, widget
