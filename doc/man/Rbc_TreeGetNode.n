.\" Automatically generated by Pandoc 1.17.1
.\"
.ad l
.TH "Rbc_TreeGetNode" "n" "" "RBC(0.2)" "RBC Built-In Commands"
.hy
.SH NAME
.PP
Rbc_TreeGetNode \- Finds the node from the ID.
.SH SYNOPSIS
.PP
\f[B]#include <rbcTree.h>\f[]
.PP
Rbc_TreeNode
.PD 0
.P
.PD
\f[B]Rbc_TreeGetNode\f[](\f[I]tree\f[], \f[I]number\f[])
.SH ARGUMENTS
.PP
Rbc_Tree \f[I]tree\f[] (in) Tree containing the requested node.
.PP
unsigned int \f[I]number\f[] (in) Serial number of the requested node.
.SH DESCRIPTION
.PP
This procedure returns a node in a tree object based upon a give serial
number.
The node is searched using the serial number.
.PP
The arguments are as follows:
.TP
.B \f[I]tree\f[]
The tree containing the requested node.
.RS
.RE
.TP
.B \f[I]number\f[]
The serial number of the requested node.
.RS
.RE
.SH RETURNS
.PP
The node represented by the given serial number is returned.
If no node with that ID exists in \f[I]tree\f[] then NULL is returned.
.SH EXAMPLE
.PP
The following example gets the node from a serial number.
.IP
.nf
\f[C]
unsigned\ int\ number;
Rbc_TreeNode\ node;
Rbc_TreeToken\ token;
node\ =\ Rbc_TreeGetNode(token,\ number);
if\ (node\ ==\ NULL)\ {
\ \ \ \ printf("no\ node\ with\ ID\ %d\ exists\\n",\ number);
}\ else\ {
\ \ \ \ printf("node\ found:\ label\ is\ %s\\n",\ Rbc_TreeNodeLabel(node));
}
\f[]
.fi
.SH KEYWORDS
.PP
Tcl_TreeCreateNode, Tcl_TreeDeleteNode
