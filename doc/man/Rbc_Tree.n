.\" Automatically generated by Pandoc 1.17.1
.\"
.ad l
.TH "Rbc_Tree" "n" "" "RBC(0.2)" "RBC Built-In Commands"
.hy
.SH NAME
.PP
Rbc_Tree \- Tree data object.
.SH SYNOPSIS
.SH include <rbcTree.h>
.PP
struct Rbc_Tree {
.PD 0
.P
.PD
\f[B]Tcl_Alloc\f[](\f[I]size\f[])
.PP
\f[B]Tcl_Free\f[](\f[I]ptr\f[])
.PP
char *
.PD 0
.P
.PD
\f[B]Tcl_Realloc\f[](\f[I]ptr,\f[] \f[I]size\f[])
.SH ARGUMENTS
.PP
int \f[I]size\f[] (in) Size in bytes of the memory block to allocate.
.PP
char \f[I]*ptr\f[] (in) Pointer to memory block to free or realloc.
.SH DESCRIPTION
.PP
These procedures provide a platform and compiler independent interface
for memory allocation.
Programs that need to transfer ownership of memory blocks between Tcl
and other modules should use these routines rather than the native
\f[B]malloc()\f[] and \f[B]free()\f[] routines provided by the C
run\-time library.
.PP
\f[B]Tcl_Alloc\f[] returns a pointer to a block of at least
\f[I]size\f[] bytes suitably aligned for any use.
.PP
\f[B]Tcl_Free\f[] makes the space referred to by \f[I]ptr\f[] available
for further allocation.
.PP
\f[B]Tcl_Realloc\f[] changes the size of the block pointed to by
\f[I]ptr\f[] to \f[I]size\f[] bytes and returns a pointer to the new
block.
The contents will be unchanged up to the lesser of the new and old
sizes.
The returned location may be different from \f[I]ptr\f[].
.SH TREE OBJECT ROUTINES
.PP
The following library routines allow you to create and destroy tree
objects.
Each tree object has a name that uniquely identifies it.
Tree objects can also be shared.
For example, the \f[B]tree\f[] and \f[B]hiertable\f[] commands may
access the same tree data object.
Each client grabs a token associated with the tree.
When all tokens are released the tree data object is automatically
destroyed.
.TP
.B Rbc_TreeCreate
Create a tree data object and optionally obtains a token associated with
it.
.RS
.RE
.TP
.B Rbc_TreeExists
Indicates if a tree by a given name exists.
.RS
.RE
.TP
.B Rbc_TreeGetToken
Obtains a token for an existing tree data object.
.RS
.RE
.TP
.B Rbc_TreeReleaseToken
Releases a token for a tree data object.
The tree object is deleted when all outstanding tokens have been
released.
.RS
.RE
.TP
.B Rbc_TreeName
Returns the name of the tree object.
.RS
.RE
.TP
.B Rbc_TreeChangeRoot
Specifies a node as the new root to a tree.
.RS
.RE
.SH TREENODE ROUTINES
.PP
Tree objects initially contain only a root node.
You can add or delete nodes with the following routines.
.TP
.B Rbc_TreeCreateNode
Creates a new child node for a given parent in the tree.
.RS
.RE
.TP
.B Rbc_TreeDeleteNode
Deletes a node and its children.
.RS
.RE
.TP
.B Rbc_TreeNodeId
Returns the unique node identifier for a node.
.RS
.RE
.TP
.B Rbc_TreeGetNode
Gets a node based upon its identifier.
.RS
.RE
.TP
.B Rbc_TreeFindChild
Searches for a child node given by its label in a parent node.
.RS
.RE
.TP
.B Rbc_TreeNodeLabel
Returns the current label for a node.
.RS
.RE
.TP
.B Rbc_TreeRelabelNode
Resets a node\[aq]s label.
.RS
.RE
.TP
.B Rbc_TreeNodePath
Returns the fullpath to a node.
.RS
.RE
.TP
.B Rbc_TreeNodeDepth
Returns the depth of the node.
.RS
.RE
.TP
.B Rbc_TreeNodeDegree
Returns the number of children for a node.
.RS
.RE
.TP
.B Rbc_TreeIsLeaf
Indicates if a node has no children.
.RS
.RE
.TP
.B Rbc_TreeIsBefore
Indicates if a node is before another node in depth\-first search order.
.RS
.RE
.TP
.B Rbc_TreeIsAncestor
Indicates if a node is an ancestor or another.
.RS
.RE
.TP
.B Rbc_TreeSortNode
Sorts the children of a node.
.RS
.RE
.TP
.B Rbc_TreeSize
Returns the number of nodes in a node and its descendants.
.RS
.RE
.PP
\f[B]Rbc_TreeMoveNode\f[]
.SH NODE NAVIGATION
.PP
Each node can have zero or more children nodes.
These routines let you navigate the tree hierarchy.
.TP
.B Rbc_TreeNodeParent
Returns the parent node.
.RS
.RE
.TP
.B Rbc_TreeFirstChild
Returns the first child of a parent node.
.RS
.RE
.TP
.B Rbc_TreeLastChild
Returns the last child of a parent node.
.RS
.RE
.TP
.B Rbc_TreeNextSibling
Returns the next sibling node in the parent\[aq]s list of children.
.RS
.RE
.TP
.B Rbc_TreePrevSibling
Returns the previous sibling node in the parent\[aq]s list of children.
.RS
.RE
.TP
.B Rbc_TreeRootNode
Returns the root node of the tree.
.RS
.RE
.TP
.B Rbc_TreeNextNode
Returns the next node in depth\-first order.
.RS
.RE
.TP
.B Rbc_TreePrevNode
Returns the previous node in depth\-first order.
.RS
.RE
.TP
.B Rbc_TreeEndNode
Returns the last node in the tree as determined by depth\-first order.
.RS
.RE
.TP
.B Rbc_TreeApply
Walks through a node and all it descendants, applying a given callback
procedure.
.RS
.RE
.TP
.B Rbc_TreeApplyDFS
Walks through a node and all it descendants in depth\-first search
order, applying a given callback procedure.
.RS
.RE
.TP
.B Rbc_TreeApplyBFS
Walks through a node and all it descendants in breadth\-first search
order, applying a given callback procedure.
.RS
.RE
.SH NODE DATA VALUES
.PP
Data values can be stored at any node.
Values have by both a string key and a Tcl_Obj value.
Data value keys do not have to be homogenous across all nodes (i.e.
nodes do not have to contain the same keys).
There is also a special node array data type.
.TP
.B Rbc_TreeGetValue
Gets the node data value given by a key.
.RS
.RE
.TP
.B Rbc_TreeValueExists
Indicates if a node data value given by a key exists.
.RS
.RE
.TP
.B Rbc_TreeSetValue
Sets a node\[aq]s value of a key.
.RS
.RE
.TP
.B Rbc_TreeUnsetValue
Remove the node data value and key.
.RS
.RE
.TP
.B Rbc_TreeGetArrayValue
Gets the node data array value given by a key and an array index.
.RS
.RE
.TP
.B Rbc_TreeSetArrayValue
Sets the node data array value given by a key and an array index.
.RS
.RE
.TP
.B Rbc_TreeUnsetArrayValue
Remove the node data array value.
.RS
.RE
.TP
.B Rbc_TreeArrayValueExists
Determines if an array element by a given index exists.
.RS
.RE
.TP
.B Rbc_TreeFirstKey
Returns the key of the first value in the node.
.RS
.RE
.TP
.B Rbc_TreeNextKey
Returns the key of the next value in the node.
.RS
.RE
.TP
.B Rbc_TreePrivateValue
Lock the value to current client, making it private.
.RS
.RE
.TP
.B Rbc_TreePublicValue
Unlock the value so that all clients can access it.
.RS
.RE
.PP
\f[B]Rbc_TreeGetKey\f[]
.SH NODE TRACES
.TP
.B Rbc_TreeCreateTrace
Sets up a trace callback to be invoked when the node value is read, set,
or unset.
.RS
.RE
.TP
.B Rbc_TreeDeleteTrace
Deletes an existing trace.
.RS
.RE
.SH NODE EVENTS
.TP
.B Rbc_TreeCreateEventHandler
Sets up a callback to be invoked when events (create, delete, relabel,
etc) take place on a node.
.RS
.RE
.TP
.B Rbc_TreeDeleteEventHandler
Deletes an existing node callback.
.RS
.RE
.SH KEYWORDS
.PP
alloc, allocation, free, malloc, memory, realloc
