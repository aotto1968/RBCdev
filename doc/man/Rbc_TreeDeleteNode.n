.\" Automatically generated by Pandoc 1.17.1
.\"
.ad l
.TH "Rbc_TreeDeleteNode" "n" "" "RBC(0.2)" "RBC Built-In Commands"
.hy
.SH NAME
.PP
Rbc_TreeDeleteNode \- Deletes a node and its descendants.
.SH SYNOPSIS
.SH include <rbcTree.h>
.PP
Rbc_TreeNode
.PD 0
.P
.PD
\f[B]Rbc_TreeDeleteNode\f[](\f[I]tree\f[], \f[I]node\f[])
.SH ARGUMENTS
.PP
Rbc_Tree \f[I]tree\f[] (in) Tree containing the node.
.PP
Rbc_TreeNode \f[I]node\f[] (in) Node to be deleted.
.SH DESCRIPTION
.PP
This procedure deletes a given node and all it descendants from a tree
data object.
.PP
The arguments are as follows:
.TP
.B \f[I]tree\f[]
The tree containing the parent node.
.RS
.RE
.TP
.B \f[I]node\f[]
Node to be deleted.
The node and its descendant nodes are deleted.
Each node\[aq]s data values are deleted also.
The reference count of the Tcl_Obj is decremented.
.RS
.RE
.PP
Since all tree objects must contain at least a root node, the root node
itself can\[aq]t be deleted unless the tree is released and destroyed.
Therefore you can clear a tree by deleting its root, but the root node
will remain until the tree is destroyed.
.SH RETURNS
.PP
Always returns TCL_OK.
Errors generated in a notification callbacks are backgrounded (see
\f[B]Tcl_TreeCreateNotifyHandler\f[]).
.SH EXAMPLE
.PP
The following example deletes the root node.
.IP
.nf
\f[C]
Rbc_TreeNode\ root;

root\ =\ Rbc_TreeRootNode(token);
Rbc_TreeDeleteNode(token,\ root);
\f[]
.fi
.SH NOTIFICATIONS
.PP
\f[B]Rbc_TreeDeleteNode\f[] can trigger tree notify events.
You can be notified whenever a node is deleted by using the
\f[B]Rbc_TreeCreateNotifyHandler\f[].
A callback routine is registered that will be automatically invoked
whenever a node is deleted via \f[B]Rbc_TreeDeleteNode\f[] to the tree.
.SH KEYWORDS
.PP
tree, token
