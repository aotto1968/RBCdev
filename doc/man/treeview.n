.\" Automatically generated by Pandoc 1.17.1
.\"
.ad l
.TH "treeview" "n" "" "RBC(0.2)" "RBC Built-In Commands"
.hy
.SH NAME
.PP
treeview \- Create and manipulate hierarchical table widgets
.SH SYNOPSIS
.PP
\f[B]treeview\f[] \f[I]pathName\f[] ?\f[I]options\f[]?
.SH DESCRIPTION
.PP
The \f[B]treeview\f[] widget displays a tree of data.
It replaces both the \f[B]hiertable\f[] and \f[B]hierbox\f[] widgets.
The \f[B]treeview\f[] is 100% syntax compatible with the
\f[B]hiertable\f[] widget.
The \f[B]hiertable\f[] command is retained for sake of script\-level
compatibility.
This widget obsoletes the \f[B]hierbox\f[] widget.
It does everything the old \f[B]hierbox\f[] widget did, but also
provides data sharing (via \f[I]tree\f[] \f[I]data\f[] \f[I]objects\f[])
and the ability to tag nodes.
.SH INTRODUCTION
.PP
The \f[B]treeview\f[] widget displays hierarchical data.
Data is represented as nodes in a general\-ordered tree.
Each node may have sub\-nodes and these nodes can in turn has their own
children.
.PP
A node is displayed as a row entry in the widget.
Each entry has a text label and icon.
When a node has children, its entry is drawn with a small button to the
left of the label.
Clicking the mouse over this button opens or closes the node.
When a node is \f[I]open\f[], its children are exposed.
When it is \f[I]closed\f[], the children and their descedants are
hidden.
The button is normally a + or \- symbol (ala Windows Explorer), but can
be replaced with a pair of Tk images (open and closed images).
.PP
If the node has data associated with it, they can be displayed in
columns running vertically on either side the tree.
You can control the color, font, etc of each entry.
Any entry label or data field can be edited in\-place.
.SH TREE DATA OBJECT
.PP
The tree is not stored inside the widget but in a tree data object (see
the \f[B]tree\f[] command for a further explanation).
Tree data objects can be shared among different clients, such as a
\f[B]treeview\f[] widget or the \f[B]tree\f[] command.
You can walk the tree and manage its data with the \f[B]tree\f[] command
tree, while displaying it with the \f[B]treeview\f[] widget.
Whenever the tree is updated, the \f[B]treeview\f[] widget is
automatically redrawn.
.PP
By default, the \f[B]treeview\f[] widget creates its own tree object.
The tree initially contains just a root node.
But you can also display trees created by the \f[B]tree\f[] command
using the \f[B]\-tree\f[] configuration option.
\f[B]Treeview\f[] widgets can share the same tree object, possibly
displaying different views of the same data.
.PP
A tree object has both a Tcl and C API.
You can insert or delete nodes using \f[B]treeview\f[] widget or
\f[B]tree\f[] command operations, but also from C code.
For example, you can load the tree from your C code while still managing
and displaying the tree from Tcl.
The widget is automatically notified whenever the tree is modified via C
or Tcl.
.SH SYNTAX
.PP
\f[B]treeview\f[] \f[I]pathName\f[] ?\f[I]option\f[] \f[I]value\f[]?...
The \f[B]treeview\f[] command creates a new window \f[I]pathName\f[] and
makes it into a \f[B]treeview\f[] widget.
At the time this command is invoked, there must not exist a window named
\f[I]pathName\f[], but \f[I]pathName\f[]\[aq]s parent must exist.
Additional options may be specified on the command line or in the option
database to configure aspects of the widget such as its colors and font.
See the \f[B]configure\f[] operation below for the exact details about
what \f[I]option\f[] and \f[I]value\f[] pairs are valid.
.PP
If successful, \f[B]treeview\f[] returns the path name of the widget.
It also creates a new Tcl command by the same name.
You can use this command to invoke various operations that query or
modify the widget.
The general form is: \f[I]pathName\f[] \f[I]operation\f[]
?\f[I]arg\f[]?...
Both \f[I]operation\f[] and its arguments determine the exact behavior
of the command.
The operations available are described in the \f[B]TREEVIEW
OPERATIONS\f[] section.
.SH IDS AND TAGS
.PP
Nodes can be inserted into a tree using the \f[B]treeview\f[] widget
.IP
.nf
\f[C]
blt::treeview\ .t
set\ node\ [.t\ insert\ end\ root\ "one"]
\f[]
.fi
.PP
or \f[B]tree\f[] command.
.IP
.nf
\f[C]
set\ tree\ [blt::tree\ create]
set\ node\ [$tree\ insert\ root\ "one"]
\f[]
.fi
.PP
In both cases, a number identifying the node is returned (the value of
$node).
This serial number or \f[I]id\f[] uniquely identifies the node.
Please note that you can\[aq]t infer a location or position of a node
from its id.
The only exception is that the root node is always id 0.
Since nodes may have the same labels or be moved within the tree, ids
provide an convenient way to identify nodes.
If a tree is shared, the ids will be the same regardless if you are
using by the \f[B]treeview\f[] widget or the \f[B]tree\f[] command.
Ids are recycled when the node deleted.
.PP
A node may also have any number of \f[I]tags\f[] associated with it.
A tag is just a string of characters, and it may take any form except
that of an integer.
For example, "x123" is valid, but "123" isn\[aq]t.
The same tag may be associated with many different nodes.
This is typically done to associate a group of nodes.
Many operations in the \f[B]treeview\f[] widget take either node ids or
tag names as arguments.
Using a tag says to apply the operation to all nodes with that tag.
.PP
The tag \f[B]all\f[] is implicitly associated with every node in the
tree.
It may be used to invoke operations on all the nodes in the tree.
.PP
Tags may be shared, just like trees, between clients.
For example, you can use the tags created by the \f[B]tree\f[] command
with \f[B]treeview\f[] widgets.
.SH SPECIAL NODE IDS
.PP
There are also several special non\-numeric ids.
Special ids differ from tags in that they are always translated to their
numeric equivalent.
They also take precedence over tags.
For example, you can\[aq]t use a tag name that is a special id.
These ids are specific to the \f[B]treeview\f[] widget.
.TP
.B active
The node where the mouse pointer is currently located.
When a node is active, it is drawn using its active icon (see the
\f[B]\-activeicon\f[] option).
The \f[B]active\f[] id is changed automatically by moving the mouse
pointer over another node or by using the \f[B]entry activate\f[]
operation.
Note that there can be only one active node at a time.
.RS
.RE
.TP
.B anchor
The node representing the fixed end of the current selection.
The anchor is set by the \f[B]selection anchor\f[] operation.
.RS
.RE
.TP
.B current
The node where the mouse pointer is currently located.
But unlike \f[B]active\f[], this id changes while the selection is
dragged.
It is used to determine the current node during button drags.
.RS
.RE
.TP
.B down
The next open node from the current focus.
The \f[B]down\f[] of the last open node is the same.
.RS
.RE
.TP
.B end
The last open node (in depth\-first order) on the tree.
.RS
.RE
.TP
.B focus
The node that currently has focus.
When a node has focus, it receives key events.
To indicate focus, the node is drawn with a dotted line around its
label.
You can change the focus using the \f[B]focus\f[] operation.
.RS
.RE
.TP
.B last
The last open node from the current focus.
But unlike \f[B]up\f[], when the focus is at root, \f[B]last\f[] wraps
around to the last open node in the tree.
.RS
.RE
.TP
.B mark
The node representing the non\-fixed end of the current selection.
The mark is set by the \f[B]selection mark\f[] operation.
.RS
.RE
.TP
.B next
The next open node from the current focus.
But unlike \f[B]down\f[], when the focus is on last open node,
\f[B]next\f[] wraps around to the root node.
.RS
.RE
.TP
.B nextsibling
The next sibling from the node with the current focus.
If the node is already the last sibling then it is the
\f[B]nextsibling.\f[]
.RS
.RE
.TP
.B parent
The parent of the node with the current focus.
The \f[B]parent\f[] of the root is also the root.
.RS
.RE
.TP
.B prevsibling
The previous sibling from the node with the current focus.
If the node is already the first sibling then it is the
\f[B]prevsibling.\f[]
.RS
.RE
.TP
.B root
The root node.
You can also use id 0 to indicate the root.
.RS
.RE
.TP
.B up
The last open node (in depth\-first order) from the current focus.
The \f[B]up\f[] of the root node (i.e.
the root has focus) is also the root.
.RS
.RE
.TP
.B view.top
First node that\[aq]s current visible in the widget.
.RS
.RE
.TP
.B view.bottom
Last node that\[aq]s current visible in the widget.
.RS
.RE
.TP
.B \@\f[I]x\f[],\f[I]y\f[]
Indicates the node that covers the point in the treeview window
specified by \f[I]x\f[] and \f[I]y\f[] (in pixel coordinates).
If no part of the entryd covers that point, then the closest node to
that point is used.
.RS
.RE
.PP
A node may be specified as an id or tag.
If the specifier is an integer then it is assumed to refer to the single
node with that id.
If the specifier is not an integer, it\[aq]s checked to see if it\[aq]s
a special id (such as focus).
Otherwise, it\[aq]s assumed to be tag.
Some operations only operate on a single node at a time; if a tag refers
to more than one node, then an error is generated.
.SH DATA FIELDS
.PP
A node in the tree can have \f[I]data\f[] \f[I]fields\f[].
A data field is a name\-value pair, used to represent arbitrary data in
the node.
Nodes can contain different fields (they aren\[aq]t required to contain
the same fields).
You can optionally display these fields in the \f[B]treeview\f[] widget
in columns running on either side of the displayed tree.
A node\[aq]s value for the field is drawn in the column along side its
node in the hierarchy.
Any node that doesn\[aq]t have a specific field is left blank.
Columns can be interactively resized, hidden, or, moved.
.SH ENTRY BINDINGS
.PP
You can bind Tcl commands to be invoked when events occur on nodes (much
like Tk canvas items).
You can bind a node using its id or its \f[I]bindtags\f[].
Bindtags are simply names that associate a binding with one or more
nodes.
There is a built\-in tag all that all node entries automatically have.
.SH TREEVIEW OPERATIONS
.PP
The \f[B]treeview\f[] operations are the invoked by specifying the
widget\[aq]s pathname, the operation, and any arguments that pertain to
that operation.
The general form is:
.IP
.nf
\f[C]
pathName\ operation\ ?arg\ arg\ ...?
\f[]
.fi
.PP
\f[I]Operation\f[] and the \f[I]arg\f[]s determine the exact behavior of
the command.
The following operation are available for \f[B]treeview\f[] widgets:
.TP
.B \f[I]pathName\f[] \f[B]bbox\f[] ?\f[B]\-screen\f[]? \f[I]tagOrId...\f[]
Returns a list of 4 numbers, representing a bounding box of around the
specified entries.
The entries is given by one or more \f[I]tagOrId\f[] arguments.
If the \f[B]\-screen\f[] flag is given, then the x\-y coordinates of the
bounding box are returned as screen coordinates, not virtual
coordinates.
Virtual coordinates start from 0 from the root node.
The returned list contains the following values.
.RS
.TP
.B \f[I]x\f[]
X\-coordinate of the upper\-left corner of the bounding box.
.RS
.RE
.TP
.B \f[I]y\f[]
Y\-coordinate of the upper\-left corner of the bounding box.
.RS
.RE
.TP
.B \f[I]width\f[]
Width of the bounding box.
.RS
.RE
.TP
.B \f[I]height\f[]
Height of the bounding box.
.RS
.RE
.RE
.TP
.B \f[I]pathName\f[] \f[B]bind\f[] \f[I]tagName\f[] ?\f[I]sequence\f[] \f[I]command\f[]?
Associates \f[I]command\f[] with \f[I]tagName\f[] such that whenever the
event sequence given by \f[I]sequence\f[] occurs for a node with this
tag, \f[I]command\f[] will be invoked.
The syntax is similar to the \f[B]bind\f[] command except that it
operates on \f[B]treeview\f[] entries, rather than widgets.
See the \f[B]bind\f[] manual entry for complete details on
\f[I]sequence\f[] and the substitutions performed on \f[I]command\f[]
before invoking it.
.RS
.PP
If all arguments are specified then a new binding is created, replacing
any existing binding for the same \f[I]sequence\f[] and
\f[I]tagName\f[].
If the first character of \f[I]command\f[] is + then \f[I]command\f[]
augments an existing binding rather than replacing it.
If no \f[I]command\f[] argument is provided then the command currently
associated with \f[I]tagName\f[] and \f[I]sequence\f[] (it\[aq]s an
error occurs if there\[aq]s no such binding) is returned.
If both \f[I]command\f[] and \f[I]sequence\f[] are missing then a list
of all the event sequences for which bindings have been defined for
\f[I]tagName\f[].
.RE
.TP
.B \f[I]pathName\f[] \f[B]button\f[] \f[I]operation\f[] ?\f[I]args\f[]?
This command is used to control the button selectors within a
\f[B]treeview\f[] widget.
It has several forms, depending on \f[I]operation\f[]:
.RS
.TP
.B \f[I]pathName\f[] \f[B]button activate\f[] \f[I]tagOrId\f[]
Designates the node given by \f[I]tagOrId\f[] as active.
When a node is active it\[aq]s entry is drawn using its active icon (see
the \f[B]\-activeicon\f[] option).
Note that there can be only one active entry at a time.
The special id \f[B]active\f[] indicates the currently active node.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]button bind\f[] \f[I]tagName\f[] ?\f[I]sequence\f[] \f[I]command\f[]?
Associates \f[I]command\f[] with \f[I]tagName\f[] such that whenever the
event sequence given by \f[I]sequence\f[] occurs for an button of a node
entry with this tag, \f[I]command\f[] will be invoked.
The syntax is similar to the \f[B]bind\f[] command except that it
operates on \f[B]treeview\f[] buttons, rather than widgets.
See the \f[B]bind\f[] manual entry for complete details on
\f[I]sequence\f[] and the substitutions performed on \f[I]command\f[]
before invoking it.
.RS
.PP
If all arguments are specified then a new binding is created, replacing
any existing binding for the same \f[I]sequence\f[] and
\f[I]tagName\f[].
If the first character of \f[I]command\f[] is + then \f[I]command\f[]
augments an existing binding rather than replacing it.
If no \f[I]command\f[] argument is provided then the command currently
associated with \f[I]tagName\f[] and \f[I]sequence\f[] (it\[aq]s an
error occurs if there\[aq]s no such binding) is returned.
If both \f[I]command\f[] and \f[I]sequence\f[] are missing then a list
of all the event sequences for which bindings have been defined for
\f[I]tagName\f[].
.RE
.TP
.B \f[I]pathName\f[] \f[B]button cget\f[] \f[I]option\f[]
Returns the current value of the configuration option given by
\f[I]option\f[].
\f[I]Option\f[] may have any of the values accepted by the
\f[B]configure\f[] operation described below.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]button configure\f[] ?\f[I]option\f[]? ?\f[I]value\f[] \f[I]option\f[] \f[I]value\f[] \f[I]\&...\f[]?
Query or modify the configuration options of the widget.
If no \f[I]option\f[] is specified, returns a list describing all of the
available options for \f[I]pathName\f[] (see \f[B]Tk_ConfigureInfo\f[]
for information on the format of this list).
If \f[I]option\f[] is specified with no \f[I]value\f[], then the command
returns a list describing the one named option (this list will be
identical to the corresponding sublist of the value returned if no
\f[I]option\f[] is specified).
If one or more \f[I]option\-value\f[] pairs are specified, then the
command modifies the given widget option(s) to have the given value(s);
in this case the command returns an empty string.
\f[I]Option\f[] and \f[I]value\f[] are described in the section
\f[B]BUTTON OPTIONS\f[] below.
.RS
.RE
.RE
.TP
.B \f[I]pathName\f[] \f[B]cget\f[] \f[I]option\f[]
Returns the current value of the configuration option given by
\f[I]option\f[].
\f[I]Option\f[] may have any of the values accepted by the
\f[B]configure\f[] operation described below.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]close\f[] ?\f[B]\-recurse\f[]? \f[I]tagOrId...\f[]
Closes the node specified by \f[I]tagOrId\f[].
In addition, if a Tcl script was specified by the
\f[B]\-closecommand\f[] option, it is invoked.
If the node is already closed, this command has no effect.
If the \f[B]\-recurse\f[] flag is present, each child node is
recursively closed.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]column\f[] \f[I]operation\f[] ?\f[I]args\f[]?
The following operations are available for treeview columns.
.RS
.TP
.B \f[I]pathName\f[] \f[B]column activate\f[] \f[I]column\f[]
Sets the active column to \f[I]column\f[].
\f[I]Column\f[] is the name of a column in the widget.
When a column is active, it\[aq]s drawn using its
\f[B]\-activetitlebackground\f[] and \f[B]\-activetitleforeground\f[]
options.
If \f[I]column\f[] is the "", then no column will be active.
If no column argument is provided, then the name of the currently active
column is returned.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]column cget\f[] \f[I]name\f[] \f[I]option\f[]
Returns the current value of the column configuration option given by
\f[I]option\f[] for \f[I]name\f[].
\f[I]Name\f[] is the name of column that corresponds to a data field.
\f[I]Option\f[] may have any of the values accepted by the
\f[B]configure\f[] operation described below.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]column configure\f[] \f[I]name\f[] ?\f[I]option\f[]? ?\f[I]value\f[] \f[I]option\f[] \f[I]value\f[] \f[I]\&...\f[]?
Query or modify the configuration options of the column designated by
\f[I]name\f[].
\f[I]Name\f[] is the name of the column corresponding to a data field.
If no \f[I]option\f[] is specified, returns a list describing all of the
available options for \f[I]pathName\f[] (see \f[B]Tk_ConfigureInfo\f[]
for information on the format of this list).
If \f[I]option\f[] is specified with no \f[I]value\f[], then the command
returns a list describing the one named option (this list will be
identical to the corresponding sublist of the value returned if no
\f[I]option\f[] is specified).
If one or more \f[I]option\-value\f[] pairs are specified, then the
command modifies the given widget option(s) to have the given value(s);
in this case the command returns an empty string.
\f[I]Option\f[] and \f[I]value\f[] are described in the section
\f[B]COLUMN OPTIONS\f[] below.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]column delete\f[] \f[I]field\f[] ?\f[I]field\f[]...?
Deletes one of more columns designated by \f[I]field\f[].
Note that this does not delete the data fields themselves.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]column insert\f[] \f[I]position\f[] \f[I]field\f[] ?\f[I]options\f[]...?
Inserts one of more columns designated by \f[I]field\f[].
A column displays each node\[aq]s data field by the same name.
If the node doesn\[aq]t have the given field, the cell is left blank.
\f[I]Position\f[] indicates where in the list of columns to add the new
column.
It may be either a number or end.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]column invoke\f[] \f[I]field\f[]
Invokes the Tcl command associated with the column \f[I]field\f[], if
there is one (using the column\[aq]s \f[B]\-command\f[] option).
The command is ignored if the column\[aq]s \f[B]\-state\f[] option set
to disabled.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]column move\f[] \f[I]name\f[] \f[I]dest\f[]
Moves the column \f[I]name\f[] to the destination position.
\f[I]Dest\f[] is the name of another column or a screen position in the
form \@\f[I]x,y\f[].
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]column names\f[]
Returns a list of the names of all columns in the widget.
The list is ordered as the columns are drawn from left\- to\-right.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]column nearest\f[] \f[I]x\f[] ?\f[I]y\f[]?
Returns the name of the column closest to the given X\-Y screen
coordinate.
If you provide a \f[I]y\f[] argument (it\[aq]s optional), a name is
returned only when if the point is over a column\[aq]s title.
.RS
.RE
.RE
.TP
.B \f[I]pathName\f[] \f[B]configure\f[] ?\f[I]option\f[]? ?\f[I]value\f[] \f[I]option\f[] \f[I]value\f[] \f[I]\&...\f[]?
Query or modify the configuration options of the widget.
If no \f[I]option\f[] is specified, returns a list describing all of the
available options for \f[I]pathName\f[] (see \f[B]Tk_ConfigureInfo\f[]
for information on the format of this list).
If \f[I]option\f[] is specified with no \f[I]value\f[], then the command
returns a list describing the one named option (this list will be
identical to the corresponding sublist of the value returned if no
\f[I]option\f[] is specified).
If one or more \f[I]option\-value\f[] pairs are specified, then the
command modifies the given widget option(s) to have the given value(s);
in this case the command returns an empty string.
\f[I]Option\f[] and \f[I]value\f[] are described in the section
\f[B]TREEVIEW\f[] \f[B]OPTIONS\f[] below.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]curselection\f[]
Returns a list containing the ids of all of the entries that are
currently selected.
If there are no entries selected, then the empty string is returned.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]delete\f[] \f[I]tagOrId\f[]...
Deletes one or more entries given by \f[I]tagOrId\f[] and its children.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]entry\f[] \f[I]operation\f[] ?\f[I]args\f[]?
The following operations are available for treeview entries.
.RS
.TP
.B \f[I]pathName\f[] \f[B]entry activate\f[] \f[I]tagOrId\f[]
Sets the active entry to the one specified by \f[I]tagOrId\f[].
When an entry is active it is drawn using its active icon (see the
\f[B]\-activeicon\f[] option).
Note that there can be only one active node at a time.
The special id of the currently active node is \f[B]active\f[].
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]entry cget\f[] \f[I]option\f[]
Returns the current value of the configuration option given by
\f[I]option\f[].
\f[I]Option\f[] may have any of the values accepted by the
\f[B]configure\f[] operation described below.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]entry children\f[] \f[I]tagOrId\f[] ?\f[I]first\f[]? ?\f[I]last\f[]?
Returns a list of ids for the given range of children of
\f[I]tagOrId\f[].
\f[I]TagOrId\f[] is the id or tag of the node to be examined.
If only a \f[I]first\f[] argument is present, then the id of the that
child at that numeric position is returned.
If both \f[I]first\f[] and \f[I]last\f[] arguments are given, then the
ids of all the children in that range are returned.
Otherwise the ids of all children are returned.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]entry configure\f[] ?\f[I]option\f[]? ?\f[I]value\f[] \f[I]option\f[] \f[I]value\f[] \f[I]\&...\f[]?
Query or modify the configuration options of the widget.
If no \f[I]option\f[] is specified, returns a list describing all of the
available options for \f[I]pathName\f[] (see \f[B]Tk_ConfigureInfo\f[]
for information on the format of this list).
If \f[I]option\f[] is specified with no \f[I]value\f[], then the command
returns a list describing the one named option (this list will be
identical to the corresponding sublist of the value returned if no
\f[I]option\f[] is specified).
If one or more \f[I]option\-value\f[] pairs are specified, then the
command modifies the given widget option(s) to have the given value(s);
in this case the command returns an empty string.
\f[I]Option\f[] and \f[I]value\f[] are described below:
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]entry delete\f[] \f[I]tagOrId\f[] ?\f[I]first\f[] ?\f[I]last\f[]?
Deletes the one or more children nodes of the parent \f[I]tagOrId\f[].
If \f[I]first\f[] and \f[I]last\f[] arguments are present, they are
positions designating a range of children nodes to be deleted.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]entry isbefore\f[] \f[I]tagOrId1\f[] \f[I]tagOrId2\f[]
Returns 1 if \f[I]tagOrId1\f[] is before \f[I]tagOrId2\f[] and 0
otherwise.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]entry ishidden\f[] \f[I]tagOrId\f[]
Returns 1 if the node is currently hidden and 0 otherwise.
A node is also hidden if any of its ancestor nodes are closed or hidden.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]entry isopen\f[] \f[I]tagOrId\f[]
Returns 1 if the node is currently open and 0 otherwise.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]entry size \-recurse\f[] \f[I]tagOrId\f[]
Returns the number of children for parent node \f[I]tagOrId\f[].
If the \f[B]\-recurse\f[] flag is set, the number of all its descendants
is returned.
The node itself is not counted.
.RS
.RE
.RE
.TP
.B \f[I]pathName\f[] \f[B]find\f[] ?\f[I]flags\f[]? \f[I]first\f[] \f[I]last\f[]
Finds for all entries matching the criteria given by \f[I]flags\f[].
A list of ids for all matching nodes is returned.
\f[I]First\f[] and \f[I]last\f[] are ids designating the range of the
search in depth\-first order.
If \f[I]last\f[] is before \f[I]first\f[], then nodes are searched in
reverse order.
The valid flags are:
.RS
.TP
.B \-name \f[I]pattern\f[]
Specifies pattern to match against node names.
.RS
.RE
.TP
.B \-full \f[I]pattern\f[]
Specifies pattern to match against node pathnames.
.RS
.RE
.TP
.B \-\f[I]option\f[] \f[I]pattern\f[]
Specifies pattern to match against the node entry\[aq]s configuration
option.
.RS
.RE
.TP
.B \-exact
Patterns must match exactly.
The is the default.
.RS
.RE
.TP
.B \-glob
Use global pattern matching.
Matching is done in a fashion similar to that used by the C\-shell.
For the two strings to match, their contents must be identical except
that the following special sequences may appear in pattern:
.RS
.TP
.B *
Matches any sequence of characters in string, including a null string.
.RS
.RE
.TP
.B ?
Matches any single character in string.
.RS
.RE
.TP
.B [\f[I]chars]\f[]
Matches any character in the set given by \f[I]chars\f[].
If a sequence of the form \f[I]x\f[]\-\f[I]y\f[] appears in
\f[I]chars\f[], then any character between \f[I]x\f[] and \f[I]y\f[],
inclusive, will match.
.RS
.RE
.TP
.B \\\\\f[I]x\f[]
Matches the single character \f[I]x\f[].
This provides a way of avoiding the special interpretation of the
characters *?[]\\ in the pattern.
.RS
.RE
.RE
.TP
.B \-regexp
Use regular expression pattern matching (i.e.
the same as implemented by the \f[B]regexp\f[] command).
.RS
.RE
.TP
.B \-nonmatching
Pick entries that don\[aq]t match.
.RS
.RE
.TP
.B \-exec \f[I]string\f[]
Specifies a Tcl script to be invoked for each matching node.
Percent substitutions are performed on \f[I]string\f[] before it is
executed.
The following substitutions are valid:
.RS
.TP
.B %W
The pathname of the widget.
.RS
.RE
.TP
.B %p
The name of the node.
.RS
.RE
.TP
.B %P
The full pathname of the node.
.RS
.RE
.TP
.B %#
The id of the node.
.RS
.RE
.TP
.B %%
Translates to a single percent.
.RS
.RE
.RE
.TP
.B \-count \f[I]number\f[]
Stop searching after \f[I]number\f[] matches.
.RS
.RE
.TP
.B \-\-
Indicates the end of flags.
.RS
.RE
.RE
.TP
.B \f[I]pathName\f[] \f[B]focus\f[] \f[I]tagOrId\f[]
Sets the focus to the node given by \f[I]tagOrId\f[].
When a node has focus, it can receive keyboard events.
The special id \f[B]focus\f[] designates the node that currently has
focus.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]get\f[] ?\f[B]\-full\f[]? \f[I]tagOrId\f[] \f[I]tagOrId\f[]...
Translates one or more ids to their node entry names.
It returns a list of names for all the ids specified.
If the \f[B]\-full\f[] flag is set, then the full pathnames are
returned.
.RS
.PP
Note: If the \f[B]\-separator\f[] option is the empty string (the
default), the result is always a list of lists, even if there is only
one node specified.
.RE
.TP
.B \f[I]pathName\f[] \f[B]hide\f[] ?\f[B]flags\f[]? \f[I]tagOrId\f[]...
Hides all nodes matching the criteria given by \f[I]flags\f[].
The search is performed recursively for each node given by
\f[I]tagOrId\f[].
The valid flags are described below:
.RS
.TP
.B \-name \f[I]pattern\f[]
Specifies pattern to match against node names.
.RS
.RE
.TP
.B \-full \f[I]pattern\f[]
Specifies pattern to match against node pathnames.
.RS
.RE
.TP
.B \-\f[I]option\f[] \f[I]pattern\f[]
Specifies pattern to match against the node entry\[aq]s configuration
option.
.RS
.RE
.TP
.B \-exact
Match patterns exactly.
The is the default.
.RS
.RE
.TP
.B \-glob
Use global pattern matching.
Matching is done in a fashion similar to that used by the C\-shell.
For the two strings to match, their contents must be identical except
that the following special sequences may appear in pattern:
.RS
.TP
.B *
Matches any sequence of characters in string, including a null string.
.RS
.RE
.TP
.B ?
Matches any single character in string.
.RS
.RE
.TP
.B [\f[I]chars]\f[]
Matches any character in the set given by \f[I]chars\f[].
If a sequence of the form \f[I]x\f[]\-\f[I]y\f[] appears in
\f[I]chars\f[], then any character between \f[I]x\f[] and \f[I]y\f[],
inclusive, will match.
.RS
.RE
.TP
.B \\\\\f[I]x\f[]
Matches the single character \f[I]x\f[].
This provides a way of avoiding the special interpretation of the
characters *?[]\\ in the pattern.
.RS
.RE
.RE
.TP
.B \-regexp
Use regular expression pattern matching (i.e.
the same as implemented by the \f[B]regexp\f[] command).
.RS
.RE
.TP
.B \-nonmatching
Hide nodes that don\[aq]t match.
.RS
.RE
.TP
.B \-\-
Indicates the end of flags.
.RS
.RE
.RE
.TP
.B \f[I]pathName\f[] \f[B]index\f[] ?\f[B]\-at\f[] ?\f[B]\-path\f[]? \f[I]tagOrId\f[]? \f[I]string\f[]
Returns the id of the node specified by \f[I]string\f[].
\f[I]String\f[] may be a tag or node id.
Some special ids are normally relative to the node that has focus.
The \f[B]\-at\f[] flag lets you select another node.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]insert\f[] ?\f[B]\-at\f[] \f[I]tagOrId\f[]? \f[I]position\f[] \f[I]path\f[] ?\f[I]options...\f[]? ?\f[I]path\f[]? ?\f[I]options...\f[]?
Inserts one or more nodes at \f[I]position\f[].
\f[I]Position\f[] is the location (number or end) where the new nodes
are added to the parent node.
\f[I]Path\f[] is the pathname of the new node.
Pathnames can be formated either as a Tcl list (each element is a path
component) or as a string separated by a special character sequence
(using the \f[B]\-separator\f[] option).
Pathnames are normally absolute, but the \f[B]\-at\f[] switch lets you
select a relative starting point.
Its value is the id of the starting node.
.RS
.PP
All ancestors of the new node must already exist, unless the
\f[B]\-autocreate\f[] option is set.
It is also an error if a node already exists, unless the
\f[B]\-allowduplicates\f[] option is set.
.PP
\f[I]Option\f[] and \f[I]value\f[] may have any of the values accepted
by the \f[B]entry configure\f[] operation described in the \f[B]ENTRY
OPERATIONS\f[] section below.
This command returns a list of the ids of the new entries.
.RE
.TP
.B \f[I]pathName\f[] \f[B]move\f[] \f[I]tagOrId\f[] \f[I]how\f[] \f[I]destId\f[]
Moves the node given by \f[I]tagOrId\f[] to the destination node.
The node can not be an ancestor of the destination.
\f[I]DestId\f[] is the id of the destination node and can not be the
root of the tree.
In conjunction with \f[I]how\f[], it describes how the move is
performed.
.RS
.TP
.B before
Moves the node before the destination node.
.RS
.RE
.TP
.B after
Moves the node after the destination node.
.RS
.RE
.TP
.B into
Moves the node to the end of the destination\[aq]s list of children.
.RS
.RE
.RE
.TP
.B \f[I]pathName\f[] \f[B]nearest\f[] \f[I]x\f[] \f[I]y\f[] ?\f[I]varName\f[]?
Returns the id of the node entry closest to the given X\-Y screen
coordinate.
If the coordinate is not directly over any node, then the empty string
is returned.
If the argument \f[I]varName\f[] is present, this is a Tcl variable that
is set to either button, label, label, or "" depending what part of the
entry the coordinate lies.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]open\f[] ?\f[B]\-recurse\f[]? \f[I]tagOrId...\f[]
Opens the one or more nodes specified by \f[I]tagOrId\f[].
If a node is not already open, the Tcl script specified by the
\f[B]\-opencommand\f[] option is invoked.
If the \f[B]\-recurse\f[] flag is present, then each descendant is
recursively opened.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]range\f[] ?\f[B]\-open\f[]? \f[I]first\f[] \f[I]last\f[]
Returns the ids in depth\-first order of the nodes between the
\f[I]first\f[] and \f[I]last\f[] ids.
If the \f[B]\-open\f[] flag is present, it indicates to consider only
open nodes.
If \f[I]last\f[] is before \f[I]first\f[], then the ids are returned in
reverse order.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]scan\f[] \f[I]option\f[] \f[I]args\f[]
This command implements scanning.
It has two forms, depending on \f[I]option\f[]:
.RS
.TP
.B \f[I]pathName\f[] \f[B]scan mark\f[] \f[I]x\f[] \f[I]y\f[]
Records \f[I]x\f[] and \f[I]y\f[] and the current view in the treeview
window; used in conjunction with later \f[B]scan dragto\f[] commands.
Typically this command is associated with a mouse button press in the
widget.
It returns an empty string.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]scan dragto\f[] \f[I]x\f[] \f[I]y\f[].
Computes the difference between its \f[I]x\f[] and \f[I]y\f[] arguments
and the \f[I]x\f[] and \f[I]y\f[] arguments to the last \f[B]scan
mark\f[] command for the widget.
It then adjusts the view by 10 times the difference in coordinates.
This command is typically associated with mouse motion events in the
widget, to produce the effect of dragging the list at high speed through
the window.
The return value is an empty string.
.RS
.RE
.RE
.TP
.B \f[I]pathName\f[] \f[B]see\f[] ?\f[B]\-anchor\f[] \f[I]anchor\f[]? \f[I]tagOrId\f[]
Adjusts the view of entries so that the node given by \f[I]tagOrId\f[]
is visible in the widget window.
It is an error if \f[B]tagOrId\f[] is a tag that refers to more than one
node.
By default the node\[aq]s entry is displayed in the middle of the
window.
This can changed using the \f[B]\-anchor\f[] flag.
Its value is a Tk anchor position.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]selection\f[] \f[I]option\f[] \f[I]arg\f[]
This command is used to adjust the selection within a \f[B]treeview\f[]
widget.
It has several forms, depending on \f[I]option\f[]:
.RS
.TP
.B \f[I]pathName\f[] \f[B]selection anchor\f[] \f[I]tagOrId\f[]
Sets the selection anchor to the node given by \f[I]tagOrId\f[].
If \f[I]tagOrId\f[] refers to a non\-existent node, then the closest
node is used.
The selection anchor is the end of the selection that is fixed while
dragging out a selection with the mouse.
The special id \f[B]anchor\f[] may be used to refer to the anchor node.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]selection cancel\f[]
Clears the temporary selection of entries back to the current anchor.
Temporary selections are created by the \f[B]selection mark\f[]
operation.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]selection clear\f[] \f[I]first\f[] ?\f[I]last\f[]?
Removes the entries between \f[I]first\f[] and \f[I]last\f[] (inclusive)
from the selection.
Both \f[I]first\f[] and \f[I]last\f[] are ids representing a range of
entries.
If \f[I]last\f[] isn\[aq]t given, then only \f[I]first\f[] is
deselected.
Entries outside the selection are not affected.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]selection clearall\f[]
Clears the entire selection.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]selection mark\f[] \f[I]tagOrId\f[]
Sets the selection mark to the node given by \f[I]tagOrId\f[].
This causes the range of entries between the anchor and the mark to be
temporarily added to the selection.
The selection mark is the end of the selection that is fixed while
dragging out a selection with the mouse.
The special id \f[B]mark\f[] may be used to refer to the current mark
node.
If \f[I]tagOrId\f[] refers to a non\-existent node, then the mark is
ignored.
Resetting the mark will unselect the previous range.
Setting the anchor finalizes the range.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]selection includes\f[] \f[I]tagOrId\f[]
Returns 1 if the node given by \f[I]tagOrId\f[] is currently selected, 0
if it isn\[aq]t.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]selection present\f[]
Returns 1 if any nodes are currently selected and 0 otherwise.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]selection set\f[] \f[I]first\f[] ?\f[I]last\f[]?
Selects all of the nodes in the range between \f[I]first\f[] and
\f[I]last\f[], inclusive, without affecting the selection state of nodes
outside that range.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]selection toggle\f[] \f[I]first\f[] ?\f[I]last\f[]?
Selects/deselects nodes in the range between \f[I]first\f[] and
\f[I]last\f[], inclusive, from the selection.
If a node is currently selected, it becomes deselected, and visa versa.
.RS
.RE
.RE
.TP
.B \f[I]pathName\f[] \f[B]show\f[] ?\f[B]flags\f[]? \f[I]tagOrId\f[]...
Exposes all nodes matching the criteria given by \f[I]flags\f[].
This is the inverse of the \f[B]hide\f[] operation.
The search is performed recursively for each node given by
\f[I]tagOrId\f[].
The valid flags are described below:
.RS
.TP
.B \-name \f[I]pattern\f[]
Specifies pattern to match against node names.
.RS
.RE
.TP
.B \-full \f[I]pattern\f[]
Specifies pattern to match against node pathnames.
.RS
.RE
.TP
.B \-\f[I]option\f[] \f[I]pattern\f[]
Specifies pattern to match against the entry\[aq]s configuration option.
.RS
.RE
.TP
.B \-exact
Match patterns exactly.
The is the default.
.RS
.RE
.TP
.B \-glob
\f[B]\-glob\f[] Use global pattern matching.
Matching is done in a fashion similar to that used by the C\-shell.
For the two strings to match, their contents must be identical except
that the following special sequences may appear in pattern:
.RS
.TP
.B *
Matches any sequence of characters in string, including a null string.
.RS
.RE
.TP
.B ?
Matches any single character in string.
.RS
.RE
.TP
.B [\f[I]chars]\f[]
Matches any character in the set given by \f[I]chars\f[].
If a sequence of the form \f[I]x\f[]\-\f[I]y\f[] appears in
\f[I]chars\f[], then any character between \f[I]x\f[] and \f[I]y\f[],
inclusive, will match.
.RS
.RE
.TP
.B \\\\\f[I]x\f[]
Matches the single character \f[I]x\f[].
This provides a way of avoiding the special interpretation of the
characters *?[]\\ in the pattern.
.RS
.RE
.RE
.TP
.B \-regexp
Use regular expression pattern matching (i.e.
the same as implemented by the \f[B]regexp\f[] command).
.RS
.RE
.TP
.B \-nonmatching
Expose nodes that don\[aq]t match.
.RS
.RE
.TP
.B \-\-
Indicates the end of flags.
.RS
.RE
.RE
.TP
.B \f[I]pathName\f[] \f[B]sort\f[] ?\f[I]operation\f[]? \f[I]args...\f[]
\&...
.RS
.TP
.B \f[I]pathName\f[] \f[B]sort auto\f[] ?\f[I]boolean\f[]
Turns on/off automatic sorting of node entries.
If \f[I]boolean\f[] is true, entries will be automatically sorted as
they are opened, closed, inserted, or deleted.
If no \f[I]boolean\f[] argument is provided, the current state is
returned.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]sort cget\f[] \f[I]option\f[]
Returns the current value of the configuration option given by
\f[I]option\f[].
\f[I]Option\f[] may have any of the values accepted by the
\f[B]configure\f[] operation described below.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]sort configure\f[] ?\f[I]option\f[]? ?\f[I]value\f[] \f[I]option\f[] \f[I]value\f[] \f[I]\&...\f[]?
Query or modify the sorting configuration options of the widget.
If no \f[I]option\f[] is specified, returns a list describing all of the
available options for \f[I]pathName\f[] (see \f[B]Tk_ConfigureInfo\f[]
for information on the format of this list).
If \f[I]option\f[] is specified with no \f[I]value\f[], then the command
returns a list describing the one named option (this list will be
identical to the corresponding sublist of the value returned if no
\f[I]option\f[] is specified).
If one or more \f[I]option\-value\f[] pairs are specified, then the
command modifies the given sorting option(s) to have the given value(s);
in this case the command returns an empty string.
\f[I]Option\f[] and \f[I]value\f[] are described below:
.RS
.TP
.B \-column \f[I]string\f[]
Specifies the column to sort.
Entries in the widget are rearranged according to this column.
If \f[I]column\f[] is "" then no sort is performed.
.RS
.RE
.TP
.B \-command \f[I]string\f[]
Specifies a Tcl procedure to be called when sorting nodes.
The procedure is called with three arguments: the pathname of the widget
and the fields of two entries.
The procedure returns 1 if the first node is greater than the second,
\-1 is the second is greater, and 0 if equal.
.RS
.RE
.TP
.B \-decreasing \f[I]boolean\f[]
Indicates to sort in ascending/descending order.
If \f[I]boolean\f[] is true, then the entries as in descending order.
The default is no.
.RS
.RE
.TP
.B \-mode \f[I]string\f[]
Specifies how to compare entries when sorting.
\f[I]String\f[] may be one of the following:
.RS
.TP
.B ascii
Use string comparison based upon the ASCII collation order.
.RS
.RE
.TP
.B dictionary
Use dictionary\-style comparison.
This is the same as ascii except (a) case is ignored except as a
tie\-breaker and (b) if two strings contain embedded numbers, the
numbers compare as integers, not characters.
For example, "bigBoy" sorts between "bigbang" and "bigboy", and "x10y"
sorts between "x9y" and "x11y".
.RS
.RE
.TP
.B integer
Compares fields as integers.
.RS
.RE
.TP
.B real
Compares fields as floating point numbers.
.RS
.RE
.TP
.B command
Use the Tcl proc specified by the \f[B]\-command\f[] option to compare
entries when sorting.
If no command is specified, the sort reverts to ascii sorting.
.RS
.RE
.RE
.RE
.TP
.B \f[I]pathName\f[] \f[B]sort once\f[] ?\f[I]flags\f[]? \f[I]tagOrId...\f[]
Sorts the children for each entries specified by \f[I]tagOrId\f[].
By default, entries are sorted by name, but you can specify a Tcl proc
to do your own comparisons.
.RS
.TP
.B \-recurse
Recursively sort the entire branch, not just the children.
.RS
.RE
.RE
.RE
.TP
.B \f[I]pathName\f[] \f[B]tag\f[] \f[I]operation\f[] \f[I]args\f[]
Tags are a general means of selecting and marking nodes in the tree.
A tag is just a string of characters, and it may take any form except
that of an integer.
The same tag may be associated with many different nodes.
.RS
.PP
Both \f[I]operation\f[] and its arguments determine the exact behavior
of the command.
The operations available for tags are listed below.
.TP
.B \f[I]pathName\f[] \f[B]tag add\f[] \f[I]string\f[] \f[I]id\f[]...
Adds the tag \f[I]string\f[] to one of more entries.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]tag delete\f[] \f[I]string\f[] \f[I]id\f[]...
Deletes the tag \f[I]string\f[] from one or more entries.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]tag forget\f[] \f[I]string\f[]
Removes the tag \f[I]string\f[] from all entries.
It\[aq]s not an error if no entries are tagged as \f[I]string\f[].
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]tag names\f[] ?\f[I]id\f[]?
Returns a list of tags used.
If an \f[I]id\f[] argument is present, only those tags used by the node
designated by \f[I]id\f[] are returned.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]tag nodes\f[] \f[I]string\f[]
Returns a list of ids that have the tag \f[I]string\f[].
If no node is tagged as \f[I]string\f[], then an empty string is
returned.
.RS
.RE
.RE
.TP
.B \f[I]pathName\f[] \f[B]text\f[] \f[I]operation\f[] ?\f[I]args\f[]?
This operation is used to provide text editing for cells (data fields in
a column) or entry labels.
It has several forms, depending on \f[I]operation\f[]:
.RS
.TP
.B \f[I]pathName\f[] \f[B]text apply\f[]
Applies the edited buffer, replacing the entry label or data field.
The edit window is hidden.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]text cancel\f[]
Cancels the editing operation, reverting the entry label or data value
back to the previous value.
The edit window is hidden.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]text cget\f[] \f[I]value\f[]
Returns the current value of the configuration option given by
\f[I]option\f[].
\f[I]Option\f[] may have any of the values accepted by the
\f[B]configure\f[] operation described below.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]text configure\f[] ?\f[I]option\f[] \f[I]value\f[]?
Query or modify the configuration options of the edit window.
If no \f[I]option\f[] is specified, returns a list describing all of the
available options (see \f[B]Tk_ConfigureInfo\f[] for information on the
format of this list).
If \f[I]option\f[] is specified with no \f[I]value\f[], then the command
returns a list describing the one named option (this list will be
identical to the corresponding sublist of the value returned if no
\f[I]option\f[] is specified).
If one or more \f[I]option\-value\f[] pairs are specified, then the
command modifies the given widget option(s) to have the given value(s);
in this case the command returns an empty string.
\f[I]Option\f[] and \f[I]value\f[] are described in the section
\f[B]TEXT EDITING OPTIONS\f[] below.
.RS
.RE
.RE
.TP
.B \f[I]pathName\f[] \f[B]text delete\f[] \f[I]first\f[] \f[I]last\f[]
Deletes the characters in the edit buffer between the two given
character positions.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]text get\f[] ?\f[I]\-root\f[]? \f[I]x\f[] \f[I]y\f[]
\&...
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]text icursor\f[] \f[I]index\f[]
\&...
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]text index\f[] \f[I]index\f[]
Returns the text index of given \f[I]index\f[].
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]text insert\f[] \f[I]index\f[] \f[I]string\f[]
Insert the text string \f[I]string\f[] into the edit buffer at the index
\f[I]index\f[].
For example, the index 0 will prepend the buffer.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]text selection\f[] \f[I]args\f[]
This operation controls the selection of the editing window.
Note that this differs from the selection of entries.
It has the following forms:
.RS
.TP
.B \f[I]pathName\f[] \f[B]text selection adjust\f[] \f[I]index\f[]
Adjusts either the first or last index of the selection.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]text selection clear\f[]
Clears the selection.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]text selection from\f[] \f[I]index\f[]
Sets the anchor of the selection.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]text selection present\f[]
Indicates if a selection is present.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]text selection range\f[] \f[I]start\f[] \f[I]end\f[]
Sets both the anchor and mark of the selection.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]text selection to\f[] \f[I]index\f[]
Sets the unanchored end (mark) of the selection.
.RS
.RE
.RE
.TP
.B \f[I]pathName\f[] \f[B]toggle\f[] \f[I]tagOrId\f[]
Opens or closes the node given by \f[I]tagOrId\f[].
If the corresponding \f[B]\-opencommand\f[] or \f[B]\-closecommand\f[]
option is set, then that command is also invoked.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]xview\f[] \f[I]args\f[]
This command is used to query and change the horizontal position of the
information in the widget\[aq]s window.
It can take any of the following forms:
.RS
.TP
.B \f[I]pathName\f[] \f[B]xview\f[]
Returns a list containing two elements.
Each element is a real fraction between 0 and 1; together they describe
the horizontal span that is visible in the window.
For example, if the first element is .2 and the second element is .6,
20% of the \f[B]treeview\f[] widget\[aq]s text is off\- screen to the
left, the middle 40% is visible in the window, and 40% of the text is
off\-screen to the right.
These are the same values passed to scrollbars via the
\f[B]\-xscrollcommand\f[] option.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]xview\f[] \f[I]tagOrId\f[]
Adjusts the view in the window so that the character position given by
\f[I]tagOrId\f[] is displayed at the left edge of the window.
Character positions are defined by the width of the character
\f[B]0\f[].
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]xview moveto\f[] \f[I]fraction\f[]
Adjusts the view in the window so that \f[I]fraction\f[] of the total
width of the \f[B]treeview\f[] widget\[aq]s text is off\-screen to the
left.
\f[I]fraction\f[] must be a fraction between 0 and 1.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]xview scroll\f[] \f[I]number\f[] \f[I]what\f[]
This command shifts the view in the window left or right according to
\f[I]number\f[] and \f[I]what\f[].
\f[I]Number\f[] must be an integer.
\f[I]What\f[] must be either \f[B]units\f[] or \f[B]pages\f[] or an
abbreviation of one of these.
If \f[I]what\f[] is \f[B]units\f[], the view adjusts left or right by
\f[I]number\f[] character units (the width of the \f[B]0\f[] character)
on the display; if it is \f[B]pages\f[] then the view adjusts by
\f[I]number\f[] screenfuls.
If \f[I]number\f[] is negative then characters farther to the left
become visible; if it is positive then characters farther to the right
become visible.
.RS
.RE
.RE
.TP
.B \f[I]pathName\f[] \f[B]yview\f[] \f[I]?args\f[]?
This command is used to query and change the vertical position of the
text in the widget\[aq]s window.
It can take any of the following forms:
.RS
.TP
.B \f[I]pathName\f[] \f[B]yview\f[]
Returns a list containing two elements, both of which are real fractions
between 0 and 1.
The first element gives the position of the node at the top of the
window, relative to the widget as a whole (0.5 means it is halfway
through the treeview window, for example).
The second element gives the position of the node just after the last
one in the window, relative to the widget as a whole.
These are the same values passed to scrollbars via the
\f[B]\-yscrollcommand\f[] option.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]yview\f[] \f[I]tagOrId\f[]
Adjusts the view in the window so that the node given by
\f[I]tagOrId\f[] is displayed at the top of the window.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]yview moveto\f[] \f[I]fraction\f[]
Adjusts the view in the window so that the node given by
\f[I]fraction\f[] appears at the top of the window.
\f[I]Fraction\f[] is a fraction between 0 and 1; 0 indicates the first
node, 0.33 indicates the node one\-third the way through the
\f[B]treeview\f[] widget, and so on.
.RS
.RE
.TP
.B \f[I]pathName\f[] \f[B]yview scroll\f[] \f[I]number\f[] \f[I]what\f[]
This command adjusts the view in the window up or down according to
\f[I]number\f[] and \f[I]what\f[].
\f[I]Number\f[] must be an integer.
\f[I]What\f[] must be either \f[B]units\f[] or \f[B]pages\f[].
If \f[I]what\f[] is \f[B]units\f[], the view adjusts up or down by
\f[I]number\f[] lines; if it is \f[B]pages\f[] then the view adjusts by
\f[I]number\f[] screenfuls.
If \f[I]number\f[] is negative then earlier nodes become visible; if it
is positive then later nodes become visible.
.RS
.RE
.RE
.SH TREEVIEW OPTIONS
.PP
In addition to the \f[B]configure\f[] operation, widget configuration
options may also be set by the Tk \f[B]option\f[] command.
The class resource name is TreeView.
.IP
.nf
\f[C]
option\ add\ *TreeView.Foreground\ white
option\ add\ *TreeView.Background\ blue
\f[]
.fi
.PP
The following widget options are available:
.TP
.B \-activebackground \f[I]color\f[]
Sets the background color for active entries.
A node is active when the mouse passes over it\[aq]s entry or using the
\f[B]activate\f[] operation.
.RS
.RE
.TP
.B \-activeforeground \f[I]color\f[]
Sets the foreground color of the active node.
A node is active when the mouse passes over it\[aq]s entry or using the
\f[B]activate\f[] operation.
.RS
.RE
.TP
.B \-activeicons \f[I]images\f[]
Specifies images to be displayed for an entry\[aq]s icon when it is
active.
\f[I]Images\f[] is a list of two Tk images: the first image is displayed
when the node is open, the second when it is closed.
.RS
.RE
.TP
.B \-autocreate \f[I]boolean\f[]
If \f[I]boolean\f[] is true, automatically create missing ancestor nodes
when inserting new nodes.
Otherwise flag an error.
The default is no.
.RS
.RE
.TP
.B \-allowduplicates \f[I]boolean\f[]
If \f[I]boolean\f[] is true, allow nodes with duplicate pathnames when
inserting new nodes.
Otherwise flag an error.
The default is no.
.RS
.RE
.TP
.B \-background \f[I]color\f[]
Sets the background color of the widget.
The default is white.
.RS
.RE
.TP
.B \-borderwidth \f[I]pixels\f[]
Sets the width of the 3\-D border around the outside edge of the widget.
The \f[B]\-relief\f[] option determines if the border is to be drawn.
The default is 2.
.RS
.RE
.TP
.B \-closecommand \f[I]string\f[]
Specifies a Tcl script to be invoked when a node is closed.
You can overrider this for individual entries using the entry\[aq]s
\f[B]\-closecommand\f[] option.
The default is "".
Percent substitutions are performed on \f[I]string\f[] before it is
executed.
The following substitutions are valid:
.RS
.TP
.B %W
The pathname of the widget.
.RS
.RE
.TP
.B %p
The name of the node.
.RS
.RE
.TP
.B %P
The full pathname of the node.
.RS
.RE
.TP
.B %#
The id of the node.
.RS
.RE
.TP
.B %%
Translates to a single percent.
.RS
.RE
.RE
.TP
.B \-cursor \f[I]cursor\f[]
Specifies the widget\[aq]s cursor.
The default cursor is "".
.RS
.RE
.TP
.B \-dashes \f[I]number\f[]
Sets the dash style of the horizontal and vertical lines drawn
connecting entries.
\f[I]Number\f[] is the length in pixels of the dashes and gaps in the
line.
If \f[I]number\f[] is 0, solid lines will be drawn.
The default is 1 (dotted).
.RS
.RE
.TP
.B \-exportselection \f[I]boolean\f[]
Indicates if the selection is exported.
If the widget is exporting its selection then it will observe the
standard X11 protocols for handling the selection.
Selections are available as type \f[B]STRING\f[]; the value of the
selection will be the label of the selected nodes, separated by
newlines.
The default is no.
.RS
.RE
.TP
.B \-flat \f[I]boolean\f[]
Indicates whether to display the tree as a flattened list.
If \f[I]boolean\f[] is true, then the hierarchy will be a list of full
paths for the nodes.
This option also has affect on sorting.
See the \f[B]SORT OPERATIONS\f[] section for more information.
The default is no.
.RS
.RE
.TP
.B \-focusdashes \f[I]dashList\f[]
Sets the dash style of the outline rectangle drawn around the entry
label of the node that current has focus.
\f[I]Number\f[] is the length in pixels of the dashes and gaps in the
line.
If \f[I]number\f[] is 0, a solid line will be drawn.
The default is 1.
.RS
.RE
.TP
.B \-focusforeground \f[I]color\f[]
Sets the color of the focus rectangle.
The default is black.
.RS
.RE
.TP
.B \-font \f[I]fontName\f[]
Specifies the font for entry labels.
You can override this for individual entries with the entry\[aq]s
\f[B]\-font\f[] configuration option.
The default is *\-Helvetica\-Bold\-R\-Normal\-*\-12\-120\-*.
.RS
.RE
.TP
.B \-foreground \f[I]color\f[]
Sets the text color of entry labels.
You can override this for individual entries with the entry\[aq]s
\f[B]\-foreground\f[] configuration option.
The default is black.
.RS
.RE
.TP
.B \-height \f[I]pixels\f[]
Specifies the requested height of widget.
The default is 400.
.RS
.RE
.TP
.B \-hideroot \f[I]boolean\f[]
If \f[I]boolean\f[] is true, it indicates that no entry for the root
node should be displayed.
The default is no.
.RS
.RE
.TP
.B \-highlightbackground \f[I]color\f[]
Specifies the normal color of the traversal highlight region when the
widget does not have the input focus.
.RS
.RE
.TP
.B \-highlightcolor \f[I]color\f[]
Specifies the color of the traversal highlight rectangle when the widget
has the input focus.
The default is black.
.RS
.RE
.TP
.B \-highlightthickness \f[I]pixels\f[]
Specifies the width of the highlight rectangle indicating when the
widget has input focus.
The value may have any of the forms acceptable to \f[B]Tk_GetPixels\f[].
If the value is zero, no focus highlight will be displayed.
The default is 2.
.RS
.RE
.TP
.B \-icons \f[I]images\f[]
Specifies images for the entry\[aq]s icon.
\f[I]Images\f[] is a list of two Tk images: the first image is displayed
when the node is open, the second when it is closed.
.RS
.RE
.TP
.B \-linecolor \f[I]color\f[]
Sets the color of the connecting lines drawn between entries.
The default is black.
.RS
.RE
.TP
.B \-linespacing \f[I]pixels\f[]
Sets the number of pixels spacing between entries.
The default is 0.
.RS
.RE
.TP
.B \-linewidth \f[I]pixels\f[]
Set the width of the lines drawn connecting entries.
If \f[I]pixels\f[] is 0, no vertical or horizontal lines are drawn.
The default is 1.
.RS
.RE
.TP
.B \-newtags \f[I]boolean\f[]
If \f[I]boolean\f[] is true, when sharing a tree object (see the
\f[B]\-tree\f[] option), don\[aq]t share its tags too.
The default is 0.
.RS
.RE
.TP
.B \-opencommand \f[I]string\f[]
Specifies a Tcl script to be invoked when a node is open.
You can override this for individual entries with the entry\[aq]s
\f[B]\-opencommand\f[] configuration option.
The default is "".
Percent substitutions are performed on \f[I]string\f[] before it is
executed.
The following substitutions are valid:
.RS
.TP
.B %W
The pathname of the widget.
.RS
.RE
.TP
.B %p
The name of the node.
.RS
.RE
.TP
.B %P
The full pathname of the node.
.RS
.RE
.TP
.B %#
The id of the node.
.RS
.RE
.TP
.B %%
Translates to a single percent.
.RS
.RE
.RE
.TP
.B \-relief \f[I]relief\f[]
Specifies the 3\-D effect for the widget.
\f[I]Relief\f[] specifies how the \f[B]treeview\f[] widget should appear
relative to widget it is packed into; for example, raised means the
\f[B]treeview\f[] widget should appear to protrude.
The default is sunken.
.RS
.RE
.TP
.B \-scrollmode \f[I]mode\f[]
Specifies the style of scrolling to be used.
The following styles are valid.
This is the default is hierbox.
.RS
.TP
.B listbox
Like the \f[B]listbox\f[] widget, the last entry can always be scrolled
to the top of the widget window.
This allows the scrollbar thumb to shrink as the last entry is scrolled
upward.
.RS
.RE
.TP
.B hierbox
Like the \f[B]hierbox\f[] widget, the last entry can only be viewed at
the bottom of the widget window.
The scrollbar stays a constant size.
.RS
.RE
.TP
.B canvas
Like the \f[B]canvas\f[] widget, the entries are bound within the
scrolling area.
.RS
.RE
.RE
.TP
.B \-selectbackground \f[I]color\f[]
Sets the background color selected node entries.
The default is #ffffea.
.RS
.RE
.TP
.B \-selectborderwidth \f[I]pixels\f[]
Sets the width of the raised 3\-D border drawn around the labels of
selected entries.
The default is 0.
\f[B]\-selectcommand\f[] \f[I]string\f[] Specifies a Tcl script to
invoked when the set of selected nodes changes.
The default is "".
.RS
.RE
.TP
.B \-selectforeground \f[I]color\f[]
Sets the color of the labels of selected node entries.
The default is black.
.RS
.RE
.TP
.B \-selectmode \f[I]mode\f[]
Specifies the selection mode.
If \f[I]mode\f[] is single, only one node can be selected at a time.
If multiple more than one node can be selected.
The default is single.
.RS
.RE
.TP
.B \-separator \f[I]string\f[]
Specifies the character sequence to use when spliting the path
components.
The separator may be several characters wide (such as "::") Consecutive
separators in a pathname are treated as one.
If \f[I]string\f[] is the empty string, the pathnames are Tcl lists.
Each element is a path component.
The default is "".
.RS
.RE
.TP
.B \-showtitles \f[I]boolean\f[]
If \f[I]boolean\f[] is false, column titles are not be displayed.
The default is yes.
.RS
.RE
.TP
.B \-sortselection \f[I]boolean\f[]
If \f[I]boolean\f[] is true, nodes in the selection are ordered as they
are currently displayed (depth\-first or sorted), not in the order they
were selected.
The default is no.
.RS
.RE
.TP
.B \-takefocus \f[I]focus\f[]
Provides information used when moving the focus from window to window
via keyboard traversal (e.g., Tab and Shift\-Tab).
If \f[I]focus\f[] is 0, this means that this window should be skipped
entirely during keyboard traversal.
1 means that the this window should always receive the input focus.
An empty value means that the traversal scripts make the decision
whether to focus on the window.
The default is "1".
.RS
.RE
.TP
.B \-trim \f[I]string\f[]
Specifies a string leading characters to trim from entry pathnames
before parsing.
This only makes sense if the \f[B]\-separator\f[] is also set.
The default is "".
.RS
.RE
.TP
.B \-width \f[I]pixels\f[]
Sets the requested width of the widget.
If \f[I]pixels\f[] is 0, then the with is computed from the contents of
the \f[B]treeview\f[] widget.
The default is 200.
.RS
.RE
.TP
.B \-xscrollcommand \f[I]string\f[]
Specifies the prefix for a command used to communicate with horizontal
scrollbars.
Whenever the horizontal view in the widget\[aq]s window changes, the
widget will generate a Tcl command by concatenating the scroll command
and two numbers.
If this option is not specified, then no command will be executed.
.RS
.RE
.TP
.B \-xscrollincrement \f[I]pixels\f[]
Sets the horizontal scrolling distance.
The default is 20 pixels.
.RS
.RE
.TP
.B \-yscrollcommand \f[I]string\f[]
Specifies the prefix for a command used to communicate with vertical
scrollbars.
Whenever the vertical view in the widget\[aq]s window changes, the
widget will generate a Tcl command by concatenating the scroll command
and two numbers.
If this option is not specified, then no command will be executed.
.RS
.RE
.TP
.B \-yscrollincrement \f[I]pixels\f[]
Sets the vertical scrolling distance.
The default is 20 pixels.
.RS
.RE
.SH ENTRY OPTIONS
.PP
Many widget configuration options have counterparts in entries.
For example, there is a \f[B]\-closecommand\f[] configuration option for
both widget itself and for individual entries.
Options set at the widget level are global for all entries.
If the entry configuration option is set, then it overrides the widget
option.
This is done to avoid wasting memory by replicated options.
Most entries will have redundant options.
.PP
There is no resource class or name for entries.
.TP
.B \-activeicons \f[I]images\f[]
Specifies images to be displayed as the entry\[aq]s icon when it is
active.
This overrides the global \f[B]\-activeicons\f[] configuration option
for the specific entry.
\f[I]Images\f[] is a list of two Tk images: the first image is displayed
when the node is open, the second when it is closed.
.RS
.RE
.TP
.B \-bindtags \f[I]tagList\f[]
Specifies the binding tags for nodes.
\f[I]TagList\f[] is a list of binding tag names.
The tags and their order will determine how events are handled for
nodes.
Each tag in the list matching the current event sequence will have its
Tcl command executed.
The default value is all.
.RS
.RE
.TP
.B \-button \f[I]string\f[]
Indicates whether a button should be displayed on the left side of the
node entry.
\f[I]String\f[] can be yes, no, or auto.
If auto, then a button is automatically displayed if the node has
children.
This is the default.
.RS
.RE
.TP
.B \-closecommand \f[I]string\f[]
Specifies a Tcl script to be invoked when the node is closed.
This overrides the global \f[B]\-closecommand\f[] option for this entry.
The default is "".
Percent substitutions are performed on \f[I]string\f[] before it is
executed.
The following substitutions are valid:
.RS
.TP
.B %W
The pathname of the widget.
.RS
.RE
.TP
.B %p
The name of the node.
.RS
.RE
.TP
.B %P
The full pathname of the node.
.RS
.RE
.TP
.B %#
The id of the node.
.RS
.RE
.TP
.B %%
Translates to a single percent.
.RS
.RE
.RE
.TP
.B \-data \f[I]string\f[]
Sets data fields for the node.
\f[I]String\f[] is a list of name\-value pairs to be set.
The default is "".
.RS
.RE
.TP
.B \-font \f[I]fontName\f[]
Sets the font for entry labels.
This overrides the widget\[aq]s \f[B]\-font\f[] option for this node.
The default is *\-Helvetica\-Bold\-R\- Normal\-*\-12\-120\-*.
.RS
.RE
.TP
.B \-foreground \f[I]color\f[]
Sets the text color of the entry label.
This overrides the widget\[aq]s \f[B]\-foreground\f[] configuration
option.
The default is "".
.RS
.RE
.TP
.B \-icons \f[I]images\f[]
Specifies images to be displayed for the entry\[aq]s icon.
This overrides the global \f[B]\-icons\f[] configuration option.
\f[I]Images\f[] is a list of two Tk images: the first image is displayed
when the node is open, the second when it is closed.
.RS
.RE
.TP
.B \-label \f[I]string\f[]
Sets the text for the entry\[aq]s label.
If not set, this defaults to the name of the node.
The default is "".
.RS
.RE
.TP
.B \-opencommand \f[I]string\f[]
Specifies a Tcl script to be invoked when the entry is opened.
This overrides the widget\[aq]s \f[B]\-opencommand\f[] option for this
node.
The default is "".
Percent substitutions are performed on \f[I]string\f[] before it is
executed.
The following substitutions are valid:
.RS
.TP
.B %W
The pathname of the widget.
.RS
.RE
.TP
.B %p
The name of the node.
.RS
.RE
.TP
.B %P
The full pathname of the node.
.RS
.RE
.TP
.B %#
The id of the node.
.RS
.RE
.TP
.B %%
Translates to a single percent.
.RS
.RE
.RE
.SH BUTTON OPTIONS
.PP
Button configuration options may also be set by the \f[B]option\f[]
command.
The resource subclass is Button.
The resource name is always button.
.IP
.nf
\f[C]
option\ add\ *TreeView.Button.Foreground\ white
option\ add\ *TreeView.button.Background\ blue
\f[]
.fi
.PP
The following are the configuration options available for buttons.
.TP
.B \-activebackground \f[I]color\f[]
Sets the background color of active buttons.
A button is made active when the mouse passes over it or by the
\f[B]button activate\f[] operation.
.RS
.RE
.TP
.B \-activeforeground \f[I]color\f[]
Sets the foreground color of active buttons.
A button is made active when the mouse passes over it or by the
\f[B]button activate\f[] operation.
.RS
.RE
.TP
.B \-background \f[I]color\f[]
Sets the background of the button.
The default is white.
.RS
.RE
.TP
.B \-borderwidth \f[I]pixels\f[]
Sets the width of the 3\-D border around the button.
The \f[B]\-relief\f[] option determines if a border is to be drawn.
The default is 1.
.RS
.RE
.TP
.B \-closerelief \f[I]relief\f[]
Specifies the 3\-D effect for the closed button.
\f[I]Relief\f[] indicates how the button should appear relative to the
widget; for example, raised means the button should appear to protrude.
The default is solid.
.RS
.RE
.TP
.B \-cursor \f[I]cursor\f[]
Sets the widget\[aq]s cursor.
The default cursor is "".
.RS
.RE
.TP
.B \-foreground \f[I]color\f[]
Sets the foreground color of buttons.
The default is black.
.RS
.RE
.TP
.B \-images \f[I]images\f[]
Specifies images to be displayed for the button.
\f[I]Images\f[] is a list of two Tk images: the first image is displayed
when the button is open, the second when it is closed.
If the \f[I]images\f[] is the empty string, then a plus/minus gadget is
drawn.
The default is "".
.RS
.RE
.TP
.B \-openrelief \f[I]relief\f[]
Specifies the 3\-D effect of the open button.
\f[I]Relief\f[] indicates how the button should appear relative to the
widget; for example, raised means the button should appear to protrude.
The default is flat.
.RS
.RE
.TP
.B \-size \f[I]pixels\f[]
Sets the requested size of the button.
The default is 0.
.RS
.RE
.SH COLUMN OPTIONS
.PP
Column configuration options may also be set by the \f[B]option\f[]
command.
The resource subclass is Column.
The resource name is the name of the column.
.IP
.nf
\f[C]
option\ add\ *TreeView.Column.Foreground\ white
option\ add\ *TreeView.treeView.Background\ blue
\f[]
.fi
.PP
The following configuration options are available for columns.
.TP
.B \-background \f[I]color\f[]
Sets the background color of the column.
This overrides the widget\[aq]s \f[B]\-background\f[] option.
The default is white.
.RS
.RE
.TP
.B \-borderwidth \f[I]pixels\f[]
Sets the width of the 3\-D border of the column.
The \f[B]\-relief\f[] option determines if a border is to be drawn.
The default is 0.
.RS
.RE
.TP
.B \-edit \f[I]boolean\f[]
Indicates if the column\[aq]s data fields can be edited.
If \f[I]boolean\f[] is false, the data fields in the column may not be
edited.
The default is yes.
.RS
.RE
.TP
.B \-foreground \f[I]color\f[]
Specifies the foreground color of the column.
You can override this for individual entries with the entry\[aq]s
\f[B]\-foreground\f[] option.
The default is black.
.RS
.RE
.TP
.B \-font \f[I]fontName\f[]
Sets the font for a column.
You can override this for individual entries with the entry\[aq]s
\f[B]\-font\f[] option.
The default is *\-Helvetica\-Bold\-R\-Normal\-*\-12\-120\-*.
.RS
.RE
.TP
.B \-hide \f[I]boolean\f[]
If \f[I]boolean\f[] is true, the column is not displayed.
The default is yes.
.RS
.RE
.TP
.B \-justify \f[I]justify\f[]
Specifies how the column data fields title should be justified within
the column.
This matters only when the column is wider than the data field to be
display.
\f[I]Justify\f[] must be left, right, or center.
The default is left.
.RS
.RE
.TP
.B \-pad \f[I]pad\f[]
Specifies how much padding for the left and right sides of the column.
\f[I]Pad\f[] is a list of one or two screen distances.
If \f[I]pad\f[] has two elements, the left side of the column is padded
by the first distance and the right side by the second.
If \f[I]pad\f[] has just one distance, both the left and right sides are
padded evenly.
The default is 2.
.RS
.RE
.TP
.B \-relief \f[I]relief\f[]
Specifies the 3\-D effect of the column.
\f[I]Relief\f[] specifies how the column should appear relative to the
widget; for example, raised means the column should appear to protrude.
The default is flat.
.RS
.RE
.TP
.B \-state \f[I]state\f[]
Sets the state of the column.
If \f[I]state\f[] is disable then the column title can not be activated
nor invoked.
The default is normal.
.RS
.RE
.TP
.B \-title \f[I]string\f[]
Sets the title for the column.
The default is "".
.RS
.RE
.TP
.B \-titleforeground \f[I]color\f[]
Sets the foreground color of the column title.
The default is black.
.RS
.RE
.TP
.B \-titleshadow \f[I]color\f[]
Sets the color of the drop shadow of the column title.
The default is "".
.RS
.RE
.TP
.B \-width \f[I]pixels\f[]
Sets the requested width of the column.
This overrides the computed with of the column.
If \f[I]pixels\f[] is 0, the width is computed as from the contents of
the column.
The default is 0.
.RS
.RE
.SH TEXT EDITING OPTIONS
.PP
Text edit window configuration options may also be set by the
\f[B]option\f[] command.
The resource class is TreeViewEditor.
The resource name is always edit.
.IP
.nf
\f[C]
option\ add\ *TreeViewEditor.Foreground\ white
option\ add\ *edit.Background\ blue
\f[]
.fi
.PP
The following are the configuration options available for the text
editing window.
.TP
.B \-background \f[I]color\f[]
Sets the background of the text edit window.
The default is white.
.RS
.RE
.TP
.B \-borderwidth \f[I]pixels\f[]
Sets the width of the 3\-D border around the edit window.
The \f[B]\-relief\f[] option determines if a border is to be drawn.
The default is 1.
.RS
.RE
.TP
.B \-exportselection \f[I]boolean\f[]
Indicates if the text selection is exported.
If the edit window is exporting its selection then it will observe the
standard X11 protocols for handling the selection.
Selections are available as type \f[B]STRING\f[].
The default is no.
.RS
.RE
.TP
.B \-relief \f[I]relief\f[]
Specifies the 3\-D effect of the edit window.
\f[I]Relief\f[] indicates how the background should appear relative to
the edit window; for example, raised means the background should appear
to protrude.
The default is solid.
.RS
.RE
.TP
.B \-selectbackground \f[I]color\f[]
Sets the background of the selected text in the edit window.
The default is white.
.RS
.RE
.TP
.B \-selectborderwidth \f[I]pixels\f[]
Sets the width of the 3\-D border around the selected text in the edit
window.
The \f[B]\-selectrelief\f[] option determines if a border is to be
drawn.
The default is 1.
.RS
.RE
.TP
.B \-selectforeground \f[I]color\f[]
Sets the foreground of the selected text in the edit window.
The default is white.
.RS
.RE
.TP
.B \-selectrelief \f[I]relief\f[]
Specifies the 3\-D effect of the selected text in the edit window.
\f[I]Relief\f[] indicates how the text should appear relative to the
edit window; for example, raised means the text should appear to
protrude.
The default is flat.
.RS
.RE
.SH DEFAULT BINDINGS
.PP
Tk automatically creates class bindings for treeviews that give them
Motif\-like behavior.
Much of the behavior of a \f[B]treeview\f[] widget is determined by its
\f[B]\-selectmode\f[] option, which selects one of two ways of dealing
with the selection.
.PP
If the selection mode is \f[B]single\f[], only one node can be selected
at a time.
Clicking button 1 on an node selects it and deselects any other selected
item.
.PP
If the selection mode is \f[B]multiple\f[], any number of entries may be
selected at once, including discontiguous ranges.
Clicking Control\- Button\-1 on a node entry toggles its selection state
without affecting any other entries.
Pressing Shift\-Button\-1 on a node entry selects it, extends the
selection.
.TP
.B [1]
In \f[B]extended\f[] mode, the selected range can be adjusted by
pressing button 1 with the Shift key down: this modifies the selection
to consist of the entries between the anchor and the entry under the
mouse, inclusive.
The un\-anchored end of this new selection can also be dragged with the
button down.
.RS
.RE
.TP
.B [2]
In \f[B]extended\f[] mode, pressing button 1 with the Control key down
starts a toggle operation: the anchor is set to the entry under the
mouse, and its selection state is reversed.
The selection state of other entries isn\[aq]t changed.
If the mouse is dragged with button 1 down, then the selection state of
all entries between the anchor and the entry under the mouse is set to
match that of the anchor entry; the selection state of all other entries
remains what it was before the toggle operation began.
.RS
.RE
.TP
.B [3]
If the mouse leaves the treeview window with button 1 down, the window
scrolls away from the mouse, making information visible that used to be
off\-screen on the side of the mouse.
The scrolling continues until the mouse re\-enters the window, the
button is released, or the end of the hierarchy is reached.
.RS
.RE
.TP
.B [4]
Mouse button 2 may be used for scanning.
If it is pressed and dragged over the \f[B]treeview\f[] widget, the
contents of the hierarchy drag at high speed in the direction the mouse
moves.
.RS
.RE
.TP
.B [5]
If the Up or Down key is pressed, the location cursor (active entry)
moves up or down one entry.
If the selection mode is \f[B]browse\f[] or \f[B]extended\f[] then the
new active entry is also selected and all other entries are deselected.
In \f[B]extended\f[] mode the new active entry becomes the selection
anchor.
.RS
.RE
.TP
.B [6]
In \f[B]extended\f[] mode, Shift\-Up and Shift\-Down move the location
cursor (active entry) up or down one entry and also extend the selection
to that entry in a fashion similar to dragging with mouse button 1.
.RS
.RE
.TP
.B [7]
The Left and Right keys scroll the \f[B]treeview\f[] widget view left
and right by the width of the character \f[B]0\f[].
Control\-Left and Control\-Right scroll the \f[B]treeview\f[] widget
view left and right by the width of the window.
Control\-Prior and Control\-Next also scroll left and right by the width
of the window.
.RS
.RE
.TP
.B [8]
The Prior and Next keys scroll the \f[B]treeview\f[] widget view up and
down by one page (the height of the window).
.RS
.RE
.TP
.B [9]
The Home and End keys scroll the \f[B]treeview\f[] widget horizontally
to the left and right edges, respectively.
.RS
.RE
.TP
.B [10]
Control\-Home sets the location cursor to the the first entry, selects
that entry, and deselects everything else in the widget.
.RS
.RE
.TP
.B [11]
Control\-End sets the location cursor to the the last entry, selects
that entry, and deselects everything else in the widget.
.RS
.RE
.TP
.B [12]
In \f[B]extended\f[] mode, Control\-Shift\-Home extends the selection to
the first entry and Control\-Shift\-End extends the selection to the
last entry.
.RS
.RE
.TP
.B [13]
In \f[B]multiple\f[] mode, Control\-Shift\-Home moves the location
cursor to the first entry and Control\-Shift\-End moves the location
cursor to the last entry.
.RS
.RE
.TP
.B [14]
The space and Select keys make a selection at the location cursor
(active entry) just as if mouse button 1 had been pressed over this
entry.
.RS
.RE
.TP
.B [15]
In \f[B]extended\f[] mode, Control\-Shift\-space and Shift\-Select
extend the selection to the active entry just as if button 1 had been
pressed with the Shift key down.
.RS
.RE
.TP
.B [16]
In \f[B]extended\f[] mode, the Escape key cancels the most recent
selection and restores all the entries in the selected range to their
previous selection state.
.RS
.RE
.TP
.B [17]
Control\-slash selects everything in the widget, except in
\f[B]single\f[] and \f[B]browse\f[] modes, in which case it selects the
active entry and deselects everything else.
.RS
.RE
.TP
.B [18]
Control\-backslash deselects everything in the widget, except in
\f[B]browse\f[] mode where it has no effect.
.RS
.RE
.TP
.B [19]
The F16 key (labelled Copy on many Sun workstations) or Meta\-w copies
the selection in the widget to the clipboard, if there is a selection.
.RS
.RE
.PP
The behavior of \f[B]treeview\f[] widgets can be changed by defining new
bindings for individual widgets or by redefining the class bindings.
.SS WIDGET BINDINGS
.PP
In addition to the above behavior, the following additional behavior is
defined by the default widget class (TreeView) bindings.
.TP
.B <ButtonPress\-2>
Starts scanning.
.RS
.RE
.TP
.B <B2\-Motion>
Adjusts the scan.
.RS
.RE
.TP
.B <ButtonRelease\-2>
Stops scanning.
.RS
.RE
.TP
.B <B1\-Leave>
Starts auto\-scrolling.
.RS
.RE
.TP
.B <B1\-Enter>
Starts auto\-scrolling
.RS
.RE
.TP
.B <KeyPress\-Up>
Moves the focus to the previous entry.
.RS
.RE
.TP
.B <KeyPress\-Down>
Moves the focus to the next entry.
.RS
.RE
.TP
.B <Shift\-KeyPress\-Up>
Moves the focus to the previous sibling.
.RS
.RE
.TP
.B <Shift\-KeyPress\-Down>
Moves the focus to the next sibling.
.RS
.RE
.TP
.B <KeyPress\-Prior>
Moves the focus to first entry.
Closed or hidden entries are ignored.
.RS
.RE
.TP
.B <KeyPress\-Next>
Move the focus to the last entry.
Closed or hidden entries are ignored.
.RS
.RE
.TP
.B <KeyPress\-Left>
Closes the entry.
It is not an error if the entry has no children.
.RS
.RE
.TP
.B <KeyPress\-Right>
Opens the entry, displaying its children.
It is not an error if the entry has no children.
.RS
.RE
.TP
.B <KeyPress\-space>
In "single" select mode this selects the entry.
In "multiple" mode, it toggles the entry (if it was previous selected,
it is not deselected).
.RS
.RE
.TP
.B <KeyRelease\-space>
Turns off select mode.
.RS
.RE
.TP
.B <KeyPress\-Return>
Sets the focus to the current entry.
.RS
.RE
.TP
.B <KeyRelease\-Return>
Turns off select mode.
.RS
.RE
.TP
.B <KeyPress>
Moves to the next entry whose label starts with the letter typed.
.RS
.RE
.TP
.B <KeyPress\-Home>
Moves the focus to first entry.
Closed or hidden entries are ignored.
.RS
.RE
.TP
.B <KeyPress\-End>
Move the focus to the last entry.
Closed or hidden entries are ignored.
.RS
.RE
.TP
.B <KeyPress\-F1>
Opens all entries.
.RS
.RE
.TP
.B <KeyPress\-F2>
Closes all entries (except root).
.RS
.RE
.SS BUTTON BINDINGS
.PP
Buttons have bindings.
There are associated with the "all" bindtag (see the entry\[aq]s
\-bindtag option).
You can use the \f[B]bind\f[] operation to change them.
.TP
.B <Enter>
Highlights the button of the current entry.
.RS
.RE
.TP
.B <Leave>
Returns the button back to its normal state.
.RS
.RE
.TP
.B <ButtonRelease\-1>
Adjust the view so that the current entry is visible.
.RS
.RE
.SS ENTRY BINDINGS
.PP
Entries have default bindings.
There are associated with the "all" bindtag (see the entry\[aq]s
\-bindtag option).
You can use the \f[B]bind\f[] operation to modify them.
.TP
.B <Enter>
Highlights the current entry.
.RS
.RE
.TP
.B <Leave>
Returns the entry back to its normal state.
.RS
.RE
.TP
.B <ButtonPress\-1>
Sets the selection anchor the current entry.
.RS
.RE
.TP
.B <Double\-ButtonPress\-1>
Toggles the selection of the current entry.
.RS
.RE
.TP
.B <B1\-Motion>
For "multiple" mode only.
Saves the current location of the pointer for auto\-scrolling.
Resets the selection mark.
.RS
.RE
.TP
.B <ButtonRelease\-1>
For "multiple" mode only.
Sets the selection anchor to the current entry.
.RS
.RE
.TP
.B <Shift\-ButtonPress\-1>
For "multiple" mode only.
Extends the selection.
.RS
.RE
.TP
.B <Shift\-Double\-ButtonPress\-1>
Place holder.
Does nothing.
.RS
.RE
.TP
.B <Shift\-B1\-Motion>
Place holder.
Does nothing.
.RS
.RE
.TP
.B <Shift\-ButtonRelease\-1>
Stop auto\-scrolling.
.RS
.RE
.TP
.B <Control\-ButtonPress\-1>
For "multiple" mode only.
Toggles and extends the selection.
.RS
.RE
.TP
.B <Control\-Double\-ButtonPress\-1>
Place holder.
Does nothing.
.RS
.RE
.TP
.B <Control\-B1\-Motion>
Place holder.
Does nothing.
.RS
.RE
.TP
.B <Control\-ButtonRelease\-1>
Stops auto\-scrolling.
.RS
.RE
.TP
.B <Control\-Shift\-ButtonPress\-1>
???
.RS
.RE
.TP
.B <Control\-Shift\-Double\-ButtonPress\-1>
Place holder.
Does nothing.
.RS
.RE
.TP
.B <Control\-Shift\-B1\-Motion>
Place holder.
Does nothing.
.RS
.RE
.SS COLUMN BINDINGS
.PP
Columns have bindings too.
They are associated with the column\[aq]s "all" bindtag (see the column
\-bindtag option).
You can use the \f[B]column bind\f[] operation to change them.
.TP
.B <Enter>
Highlights the current column title.
.RS
.RE
.TP
.B <Leave>
Returns the column back to its normal state.
.RS
.RE
.TP
.B <ButtonRelease\-1>
Invokes the command (see the column\[aq]s \-command option) if one if
specified.
.RS
.RE
.SS COLUMN RULE BINDINGS
.TP
.B <Enter>
Highlights the current and activates the ruler.
.RS
.RE
.TP
.B <Leave>
Returns the column back to its normal state.
Deactivates the ruler.
.RS
.RE
.TP
.B <ButtonPress\-1>
Sets the resize anchor for the column.
.RS
.RE
.TP
.B <B1\-Motion>
Sets the resize mark for the column.
.RS
.RE
.TP
.B <ButtonRelease\-1>
Adjust the size of the column, based upon the resize anchor and mark
positions.
.RS
.RE
.SH EXAMPLE
.PP
The \f[B]treeview\f[] command creates a new widget.
.IP
.nf
\f[C]
treeview\ .h\ \-bg\ white
\f[]
.fi
.PP
A new Tcl command .h is also created.
This command can be used to query and modify the \f[B]treeview\f[]
widget.
For example, to change the background color of the table to "green", you
use the new command and the widget\[aq]s \f[B]configure\f[] operation.
.IP
.nf
\f[C]
#\ Change\ the\ background\ color.
\&.h\ configure\ \-background\ "green"
\f[]
.fi
.PP
By default, the \f[B]treeview\f[] widget will automatically create a new
tree object to contain the data.
The name of the new tree is the pathname of the widget.
Above, the new tree object name is ".h".
But you can use the \f[B]\-tree\f[] option to specify the name of
another tree.
.IP
.nf
\f[C]
#\ View\ the\ tree\ "myTree".
\&.h\ configure\ \-tree\ "myTree"
\f[]
.fi
.PP
When a new tree is created, it contains only a root node.
The node is automatically opened.
The id of the root node is always 0 (you can use also use the special id
root).
The \f[B]insert\f[] operation lets you insert one or more new entries
into the tree.
The last argument is the node\[aq]s \f[I]pathname\f[].
.IP
.nf
\f[C]
#\ Create\ a\ new\ entry\ named\ "myEntry"
set\ id\ [.h\ insert\ end\ "myEntry"]
\f[]
.fi
.PP
This appends a new node named "myEntry".
It will positioned as the last child of the root of the tree (using the
position "end").
You can supply another position to order the node within its siblings.
.IP
.nf
\f[C]
#\ Prepend\ "fred".
set\ id\ [.h\ insert\ 0\ "fred"]
\f[]
.fi
.PP
Entry names do not need to be unique.
By default, the node\[aq]s label is its name.
To supply a different text label, add the \f[B]\-label\f[] option.
.IP
.nf
\f[C]
#\ Create\ a\ new\ node\ named\ "fred"
set\ id\ [.h\ insert\ end\ "fred"\ \-label\ "Fred\ Flintstone"]
\f[]
.fi
.PP
The \f[B]insert\f[] operation returns the id of the new node.
You can also use the \f[B]index\f[] operation to get this information.
.IP
.nf
\f[C]
#\ Get\ the\ id\ of\ "fred"
\&.h\ index\ "fred"
\f[]
.fi
.PP
To insert a node somewhere other than root, use the \f[B]\-at\f[]
switch.
It takes the id of the node where the new child will be added.
.IP
.nf
\f[C]
#\ Create\ a\ new\ node\ "barney"\ in\ "fred".
\&.h\ insert\ \-at\ $id\ end\ "barney"
\f[]
.fi
.PP
A pathname describes the path to an entry in the hierarchy.
It\[aq]s a list of entry names that compose the path in the tree.
Therefore, you can also add "barney" to "fred" as follows.
.IP
.nf
\f[C]
#\ Create\ a\ new\ sub\-entry\ of\ "fred"
\&.h\ insert\ end\ "fred\ barney"
\f[]
.fi
.PP
Every name in the list is ancestor of the next.
All ancestors must already exist.
That means that an entry "fred" is an ancestor of "barney" and must
already exist.
But you can use the \f[B]\-autocreate\f[] configuration option to force
the creation of ancestor nodes.
.IP
.nf
\f[C]
#\ Force\ the\ creation\ of\ ancestors.
\&.h\ configure\ \-autocreate\ yes
\&.h\ insert\ end\ "fred\ barney\ wilma\ betty"
\f[]
.fi
.PP
Sometimes the pathname is already separated by a character sequence
rather than formed as a list.
A file name is a good example of this.
You can use the \f[B]\-separator\f[] option to specify a separator
string to split the path into its components.
Each pathname inserted is automatically split using the separator string
as a separator.
Multiple separators are treated as one.
.IP
.nf
\f[C]
\&.h\ configure\ \-separator\ /
\&.h\ insert\ end\ "/usr/local/tcl/bin"
\f[]
.fi
.PP
If the path is prefixed by extraneous characters, you can automatically
trim it off using the \f[B]\-trim\f[] option.
It removed the string from the path before it is parsed.
.IP
.nf
\f[C]
\&.h\ configure\ \-trim\ C:/windows\ \-separator\ /
\&.h\ insert\ end\ "C:/window/system"
\f[]
.fi
.PP
You can insert more than one entry at a time with the \f[B]insert\f[]
operation.
This can be much faster than looping over a list of names.
.IP
.nf
\f[C]
#\ The\ slow\ way
foreach\ f\ [glob\ $dir/*]\ {
\ \ \ \ .h\ insert\ end\ $f
}
#\ The\ fast\ way
eval\ .h\ insert\ end\ [glob\ $dir/*]
\f[]
.fi
.PP
In this case, the \f[B]insert\f[] operation will return a list of ids of
the new entries.
.PP
You can delete entries with the \f[B]delete\f[] operation.
It takes one or more tags of ids as its argument.
It deletes the entry and all its children.
.IP
.nf
\f[C]
\&.h\ delete\ $id
\f[]
.fi
.PP
Entries have several configuration options.
They control the appearance of the entry\[aq]s icon and label.
We have already seen the \f[B]\-label\f[] option that sets the
entry\[aq]s text label.
The \f[B]entry configure\f[] operation lets you set or modify an
entry\[aq]s configuration options.
.IP
.nf
\f[C]
\&.h\ entry\ configure\ $id\ \-color\ red\ \-font\ fixed
\f[]
.fi
.PP
You can hide an entry and its children using the \f[B]\-hide\f[] option.
.IP
.nf
\f[C]
\&.h\ entry\ configure\ $id\ \-hide\ yes
\f[]
.fi
.PP
More that one entry can be configured at once.
All entries specified are configured with the same options.
.IP
.nf
\f[C]
\&.h\ entry\ configure\ $i1\ $i2\ $i3\ $i4\ \-color\ brown
\f[]
.fi
.PP
An icon is displayed for each entry.
It\[aq]s a Tk image drawn to the left of the label.
You can set the icon with the entry\[aq]s \f[B]\-icons\f[] option.
It takes a list of two image names: one to represent the open entry,
another when it is closed.
.IP
.nf
\f[C]
set\ im1\ [image\ create\ photo\ \-file\ openfolder.gif]
set\ im2\ [image\ create\ photo\ \-file\ closefolder.gif]
\&.h\ entry\ configure\ $id\ \-icons\ "$im1\ $im2"
\f[]
.fi
.PP
If \f[B]\-icons\f[] is set to the empty string, no icons are display.
.PP
If an entry has children, a button is displayed to the left of the icon.
Clicking the mouse on this button opens or closes the sub\- hierarchy.
The button is normally a + or \- symbol, but can be configured in a
variety of ways using the \f[B]button configure\f[] operation.
For example, the + and \- symbols can be replaced with Tk images.
.IP
.nf
\f[C]
set\ im1\ [image\ create\ photo\ \-file\ closefolder.gif]
set\ im2\ [image\ create\ photo\ \-file\ downarrow.gif]
\&.h\ button\ configure\ $id\ \-images\ "$im1\ $im2"\ \\
\ \ \ \ \-openrelief\ raised\ \-closerelief\ raised
\f[]
.fi
.PP
Entries can contain an arbitrary number of \f[I]data\f[]
\f[I]fields\f[].
Data fields are name\-value pairs.
Both the value and name are strings.
The entry\[aq]s \f[B]\-data\f[] option lets you set data fields.
.IP
.nf
\f[C]
\&.h\ entry\ configure\ $id\ \-data\ {mode\ 0666\ group\ users}
\f[]
.fi
.PP
The \f[B]\-data\f[] takes a list of name\-value pairs.
.PP
You can display these data fields as \f[I]columns\f[] in the
\f[B]treeview\f[] widget.
You can create and configure columns with the \f[B]column\f[] operation.
For example, to add a new column to the widget, use the \f[B]column
insert\f[] operation.
The last argument is the name of the data field that you want to
display.
.IP
.nf
\f[C]
\&.h\ column\ insert\ end\ "mode"
\f[]
.fi
.PP
The column title is displayed at the top of the column.
By default, it\[aq]s is the field name.
You can override this using the column\[aq]s \f[B]\-title\f[] option.
.IP
.nf
\f[C]
\&.h\ column\ insert\ end\ "mode"\ \-title\ "File\ Permissions"
\f[]
.fi
.PP
Columns have several configuration options.
The \f[B]column configure\f[] operation lets you query or modify column
options.
.IP
.nf
\f[C]
\&.h\ column\ configure\ "mode"\ \-justify\ left
\f[]
.fi
.PP
The \f[B]\-justify\f[] option says how the data is justified within in
the column.
The \f[B]\-hide\f[] option indicates whether the column is displayed.
.IP
.nf
\f[C]
\&.h\ column\ configure\ "mode"\ \-hide\ yes
\f[]
.fi
.PP
Entries can be selected by clicking on the mouse.
Selected entries are drawn using the colors specified by the
\f[B]\-selectforeground\f[] and \f[B]\-selectbackground\f[]
configuration options.
The selection itself is managed by the \f[B]selection\f[] operation.
.IP
.nf
\f[C]
#\ Clear\ all\ selections
\&.h\ selection\ clear\ 0\ end
#\ Select\ the\ root\ node
\&.h\ selection\ set\ 0
\f[]
.fi
.PP
The \f[B]curselection\f[] operation returns a list of ids of all the
selected entries.
.IP
.nf
\f[C]
set\ ids\ [.h\ curselection]
\f[]
.fi
.PP
You can use the \f[B]get\f[] operation to convert the ids to their
pathnames.
.IP
.nf
\f[C]
set\ names\ [eval\ .h\ get\ \-full\ $ids]
\f[]
.fi
.PP
If a treeview is exporting its selection (using the
\f[B]\-exportselection\f[] option), then it will observe the standard
X11 protocols for handling the selection.
Treeview selections are available as type \f[B]STRING\f[]; the value of
the selection will be the pathnames of the selected entries, separated
by newlines.
.PP
The \f[B]treeview\f[] supports two modes of selection: single and
multiple.
In single select mode, only one entry can be selected at a time, while
multiple select mode allows several entries to be selected.
The mode is set by the widget\[aq]s \f[B]\-selectmode\f[] option.
.IP
.nf
\f[C]
\&.h\ configure\ \-selectmode\ "multiple"
\f[]
.fi
.PP
You can be notified when the list of selected entries changes.
The widget\[aq]s \f[B]\-selectcommand\f[] specifies a Tcl procedure that
is called whenever the selection changes.
.IP
.nf
\f[C]
proc\ SelectNotify\ {\ widget\ }\ {
\ \ \ set\ ids\ [$widget\ curselection]
}
\&.h\ configure\ \-selectcommand\ "SelectNotify\ .h"
\f[]
.fi
.PP
The widget supports the standard Tk scrolling and scanning operations.
The \f[B]treeview\f[] can be both horizontally and vertically.
You can attach scrollbars to the \f[B]treeview\f[] the same way as the
listbox or canvas widgets.
.IP
.nf
\f[C]
scrollbar\ .xbar\ \-orient\ horizontal\ \-command\ ".h\ xview"
scrollbar\ .ybar\ \-orient\ vertical\ \-command\ ".h\ yview"
\&.h\ configure\ \-xscrollcommand\ ".xbar\ set"\ \\
\ \ \ \ \-yscrollcommand\ ".ybar\ set"
\f[]
.fi
.PP
There are three different modes of scrolling: listbox, canvas, and
hierbox.
In listbox mode, the last entry can always be scrolled to the top of the
widget.
In hierbox mode, the last entry is always drawn at the bottom of the
widget.
The scroll mode is set by the widget\[aq]s \f[B]\-selectmode\f[] option.
.IP
.nf
\f[C]
\&.h\ configure\ \-scrollmode\ "listbox"
\f[]
.fi
.PP
Entries can be programmatically opened or closed using the \f[B]open\f[]
and \f[B]close\f[] operations respectively.
.IP
.nf
\f[C]
\&.h\ open\ $id
\&.h\ close\ $id
\f[]
.fi
.PP
When an entry is opened, a Tcl procedure can be automatically invoked.
The \f[B]\-opencommand\f[] option specifies this procedure.
This procedure can lazily insert entries as needed.
.IP
.nf
\f[C]
proc\ AddEntries\ {\ dir\ }\ {
\ \ \ eval\ .h\ insert\ end\ [glob\ \-nocomplain\ $dir/*]
}
\&.h\ configure\ \-opencommand\ "AddEntries\ %P"
\f[]
.fi
.PP
Now when an entry is opened, the procedure AddEntries is called and adds
children to the entry.
Before the command is invoked, special "%" substitutions (like
\f[B]bind\f[]) are performed.
Above, %P is translated to the pathname of the entry.
.PP
The same feature exists when an entry is closed.
The \f[B]\-closecommand\f[] option specifies the procedure.
.IP
.nf
\f[C]
proc\ DeleteEntries\ {\ id\ }\ {
\ \ \ .h\ entry\ delete\ $id\ 0\ end
}
\&.h\ configure\ \-closecommand\ "DeleteEntries\ %#"
\f[]
.fi
.PP
When an entry is closed, the procedure DeleteEntries is called and
deletes the entry\[aq]s children using the \f[B]entry delete\f[]
operation (%# is the id of entry).
.SH KEYWORDS
.PP
treeview, widget
